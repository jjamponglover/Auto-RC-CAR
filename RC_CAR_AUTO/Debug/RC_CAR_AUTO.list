
RC_CAR_AUTO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08008b50  08008b50  00009b50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c78  08008c78  0000a0f0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c78  08008c78  00009c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c80  08008c80  0000a0f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c80  08008c80  00009c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008c84  08008c84  00009c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f0  20000000  08008c88  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dec  200000f0  08008d78  0000a0f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004edc  08008d78  0000aedc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b111  00000000  00000000  0000a120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004013  00000000  00000000  00025231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015f0  00000000  00000000  00029248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010ec  00000000  00000000  0002a838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019234  00000000  00000000  0002b924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab3e  00000000  00000000  00044b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000988a9  00000000  00000000  0005f696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7f3f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ca8  00000000  00000000  000f7f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000fdc2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000f0 	.word	0x200000f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b38 	.word	0x08008b38

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000f4 	.word	0x200000f4
 80001dc:	08008b38 	.word	0x08008b38

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <delay_us>:
#include "delay_us.h"



void delay_us(uint16_t us)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim11, 0);
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <delay_us+0x30>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	@ 0x24
	while((__HAL_TIM_GET_COUNTER(&htim11)) < us);
 80004e2:	bf00      	nop
 80004e4:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <delay_us+0x30>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80004ea:	88fb      	ldrh	r3, [r7, #6]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	d3f9      	bcc.n	80004e4 <delay_us+0x14>
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	20000278 	.word	0x20000278

08000504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <MX_DMA_Init+0x3c>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000512:	4a0b      	ldr	r2, [pc, #44]	@ (8000540 <MX_DMA_Init+0x3c>)
 8000514:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000518:	6313      	str	r3, [r2, #48]	@ 0x30
 800051a:	4b09      	ldr	r3, [pc, #36]	@ (8000540 <MX_DMA_Init+0x3c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2105      	movs	r1, #5
 800052a:	2039      	movs	r0, #57	@ 0x39
 800052c:	f001 fc9e 	bl	8001e6c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000530:	2039      	movs	r0, #57	@ 0x39
 8000532:	f001 fcb7 	bl	8001ea4 <HAL_NVIC_EnableIRQ>

}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40023800 	.word	0x40023800

08000544 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000548:	4a14      	ldr	r2, [pc, #80]	@ (800059c <MX_FREERTOS_Init+0x58>)
 800054a:	2100      	movs	r1, #0
 800054c:	4814      	ldr	r0, [pc, #80]	@ (80005a0 <MX_FREERTOS_Init+0x5c>)
 800054e:	f005 fca5 	bl	8005e9c <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a13      	ldr	r2, [pc, #76]	@ (80005a4 <MX_FREERTOS_Init+0x60>)
 8000556:	6013      	str	r3, [r2, #0]

  /* creation of myTask02 */
  myTask02Handle = osThreadNew(StartTask02, NULL, &myTask02_attributes);
 8000558:	4a13      	ldr	r2, [pc, #76]	@ (80005a8 <MX_FREERTOS_Init+0x64>)
 800055a:	2100      	movs	r1, #0
 800055c:	4813      	ldr	r0, [pc, #76]	@ (80005ac <MX_FREERTOS_Init+0x68>)
 800055e:	f005 fc9d 	bl	8005e9c <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a12      	ldr	r2, [pc, #72]	@ (80005b0 <MX_FREERTOS_Init+0x6c>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of myTask03 */
  myTask03Handle = osThreadNew(StartTask03, NULL, &myTask03_attributes);
 8000568:	4a12      	ldr	r2, [pc, #72]	@ (80005b4 <MX_FREERTOS_Init+0x70>)
 800056a:	2100      	movs	r1, #0
 800056c:	4812      	ldr	r0, [pc, #72]	@ (80005b8 <MX_FREERTOS_Init+0x74>)
 800056e:	f005 fc95 	bl	8005e9c <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a11      	ldr	r2, [pc, #68]	@ (80005bc <MX_FREERTOS_Init+0x78>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of myTask04 */
  myTask04Handle = osThreadNew(StartTask04, NULL, &myTask04_attributes);
 8000578:	4a11      	ldr	r2, [pc, #68]	@ (80005c0 <MX_FREERTOS_Init+0x7c>)
 800057a:	2100      	movs	r1, #0
 800057c:	4811      	ldr	r0, [pc, #68]	@ (80005c4 <MX_FREERTOS_Init+0x80>)
 800057e:	f005 fc8d 	bl	8005e9c <osThreadNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a10      	ldr	r2, [pc, #64]	@ (80005c8 <MX_FREERTOS_Init+0x84>)
 8000586:	6013      	str	r3, [r2, #0]

  /* creation of myTask05 */
  myTask05Handle = osThreadNew(StartTask05, NULL, &myTask05_attributes);
 8000588:	4a10      	ldr	r2, [pc, #64]	@ (80005cc <MX_FREERTOS_Init+0x88>)
 800058a:	2100      	movs	r1, #0
 800058c:	4810      	ldr	r0, [pc, #64]	@ (80005d0 <MX_FREERTOS_Init+0x8c>)
 800058e:	f005 fc85 	bl	8005e9c <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a0f      	ldr	r2, [pc, #60]	@ (80005d4 <MX_FREERTOS_Init+0x90>)
 8000596:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	08008ba4 	.word	0x08008ba4
 80005a0:	080005d9 	.word	0x080005d9
 80005a4:	2000010c 	.word	0x2000010c
 80005a8:	08008bc8 	.word	0x08008bc8
 80005ac:	080005e9 	.word	0x080005e9
 80005b0:	20000110 	.word	0x20000110
 80005b4:	08008bec 	.word	0x08008bec
 80005b8:	0800069d 	.word	0x0800069d
 80005bc:	20000114 	.word	0x20000114
 80005c0:	08008c10 	.word	0x08008c10
 80005c4:	080006bd 	.word	0x080006bd
 80005c8:	20000118 	.word	0x20000118
 80005cc:	08008c34 	.word	0x08008c34
 80005d0:	08000701 	.word	0x08000701
 80005d4:	2000011c 	.word	0x2000011c

080005d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f005 fced 	bl	8005fc0 <osDelay>
 80005e6:	e7fb      	b.n	80005e0 <StartDefaultTask+0x8>

080005e8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void *argument)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  switch (rxData){
 80005f0:	4b29      	ldr	r3, [pc, #164]	@ (8000698 <StartTask02+0xb0>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	3b61      	subs	r3, #97	@ 0x61
 80005f6:	2b12      	cmp	r3, #18
 80005f8:	d846      	bhi.n	8000688 <StartTask02+0xa0>
 80005fa:	a201      	add	r2, pc, #4	@ (adr r2, 8000600 <StartTask02+0x18>)
 80005fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000600:	0800064d 	.word	0x0800064d
 8000604:	08000653 	.word	0x08000653
 8000608:	08000659 	.word	0x08000659
 800060c:	0800065f 	.word	0x0800065f
 8000610:	08000665 	.word	0x08000665
 8000614:	0800066b 	.word	0x0800066b
 8000618:	08000671 	.word	0x08000671
 800061c:	08000677 	.word	0x08000677
 8000620:	08000683 	.word	0x08000683
 8000624:	08000689 	.word	0x08000689
 8000628:	08000689 	.word	0x08000689
 800062c:	08000689 	.word	0x08000689
 8000630:	08000689 	.word	0x08000689
 8000634:	08000689 	.word	0x08000689
 8000638:	08000689 	.word	0x08000689
 800063c:	08000689 	.word	0x08000689
 8000640:	08000689 	.word	0x08000689
 8000644:	08000689 	.word	0x08000689
 8000648:	0800067d 	.word	0x0800067d
	  	case 'a':
	  		go();
 800064c:	f000 fbb6 	bl	8000dbc <go>
	  		break;
 8000650:	e01d      	b.n	800068e <StartTask02+0xa6>
	  	case 'b':
			back();
 8000652:	f000 fbe3 	bl	8000e1c <back>
			break;
 8000656:	e01a      	b.n	800068e <StartTask02+0xa6>
		case 'c':
			left();
 8000658:	f000 fc10 	bl	8000e7c <left>
			break;
 800065c:	e017      	b.n	800068e <StartTask02+0xa6>
		case 'd':
			right();
 800065e:	f000 fc3d 	bl	8000edc <right>
			break;
 8000662:	e014      	b.n	800068e <StartTask02+0xa6>
		case 'e':
			goright();
 8000664:	f000 fc90 	bl	8000f88 <goright>
			break;
 8000668:	e011      	b.n	800068e <StartTask02+0xa6>
		case 'f':
			goleft();
 800066a:	f000 fcbd 	bl	8000fe8 <goleft>
			break;
 800066e:	e00e      	b.n	800068e <StartTask02+0xa6>
		case 'g':
			backright();
 8000670:	f000 fcea 	bl	8001048 <backright>
			break;
 8000674:	e00b      	b.n	800068e <StartTask02+0xa6>
		case 'h':
			backleft();
 8000676:	f000 fd17 	bl	80010a8 <backleft>
			break;
 800067a:	e008      	b.n	800068e <StartTask02+0xa6>
		case 's':
			stop();
 800067c:	f000 fc5e 	bl	8000f3c <stop>
			break;
 8000680:	e005      	b.n	800068e <StartTask02+0xa6>
		case 'i':
			autocar();
 8000682:	f000 fd41 	bl	8001108 <autocar>
			break;
 8000686:	e002      	b.n	800068e <StartTask02+0xa6>
		default:
			stop();
 8000688:	f000 fc58 	bl	8000f3c <stop>
			break;
 800068c:	bf00      	nop
	  }
    osDelay(5);
 800068e:	2005      	movs	r0, #5
 8000690:	f005 fc96 	bl	8005fc0 <osDelay>
	  switch (rxData){
 8000694:	e7ac      	b.n	80005f0 <StartTask02+0x8>
 8000696:	bf00      	nop
 8000698:	20000124 	.word	0x20000124

0800069c <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void *argument)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask03 */
  /* Infinite loop */
  for(;;)
  {
	if(backflag==1)backsong();
 80006a4:	4b04      	ldr	r3, [pc, #16]	@ (80006b8 <StartTask03+0x1c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d101      	bne.n	80006b0 <StartTask03+0x14>
 80006ac:	f000 fd6a 	bl	8001184 <backsong>
    osDelay(10);
 80006b0:	200a      	movs	r0, #10
 80006b2:	f005 fc85 	bl	8005fc0 <osDelay>
	if(backflag==1)backsong();
 80006b6:	e7f5      	b.n	80006a4 <StartTask03+0x8>
 80006b8:	20000120 	.word	0x20000120

080006bc <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void *argument)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  for(;;)
  {
	if(rxData == 'j'){
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <StartTask04+0x38>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b6a      	cmp	r3, #106	@ 0x6a
 80006ca:	d107      	bne.n	80006dc <StartTask04+0x20>
		TIM5->CCR2 = 500;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <StartTask04+0x3c>)
 80006ce:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006d2:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM5->PSC = 255;
 80006d4:	4b08      	ldr	r3, [pc, #32]	@ (80006f8 <StartTask04+0x3c>)
 80006d6:	22ff      	movs	r2, #255	@ 0xff
 80006d8:	629a      	str	r2, [r3, #40]	@ 0x28
 80006da:	e006      	b.n	80006ea <StartTask04+0x2e>
	}
	else if(backflag==0)TIM5->PSC = 0;
 80006dc:	4b07      	ldr	r3, [pc, #28]	@ (80006fc <StartTask04+0x40>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d102      	bne.n	80006ea <StartTask04+0x2e>
 80006e4:	4b04      	ldr	r3, [pc, #16]	@ (80006f8 <StartTask04+0x3c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	629a      	str	r2, [r3, #40]	@ 0x28

    osDelay(5);
 80006ea:	2005      	movs	r0, #5
 80006ec:	f005 fc68 	bl	8005fc0 <osDelay>
	if(rxData == 'j'){
 80006f0:	e7e8      	b.n	80006c4 <StartTask04+0x8>
 80006f2:	bf00      	nop
 80006f4:	20000124 	.word	0x20000124
 80006f8:	40000c00 	.word	0x40000c00
 80006fc:	20000120 	.word	0x20000120

08000700 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void *argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000708:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800070c:	4805      	ldr	r0, [pc, #20]	@ (8000724 <StartTask05+0x24>)
 800070e:	f002 f976 	bl	80029fe <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_2);
 8000712:	2104      	movs	r1, #4
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <StartTask05+0x28>)
 8000716:	f002 f972 	bl	80029fe <HAL_GPIO_TogglePin>
	osDelay(200);
 800071a:	20c8      	movs	r0, #200	@ 0xc8
 800071c:	f005 fc50 	bl	8005fc0 <osDelay>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
 8000720:	bf00      	nop
 8000722:	e7f1      	b.n	8000708 <StartTask05+0x8>
 8000724:	40020800 	.word	0x40020800
 8000728:	40020c00 	.word	0x40020c00

0800072c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	@ 0x28
 8000730:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000732:	f107 0314 	add.w	r3, r7, #20
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b4c      	ldr	r3, [pc, #304]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a4b      	ldr	r2, [pc, #300]	@ (8000878 <MX_GPIO_Init+0x14c>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b49      	ldr	r3, [pc, #292]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b45      	ldr	r3, [pc, #276]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a44      	ldr	r2, [pc, #272]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b42      	ldr	r3, [pc, #264]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b3e      	ldr	r3, [pc, #248]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a3d      	ldr	r2, [pc, #244]	@ (8000878 <MX_GPIO_Init+0x14c>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b3b      	ldr	r3, [pc, #236]	@ (8000878 <MX_GPIO_Init+0x14c>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b37      	ldr	r3, [pc, #220]	@ (8000878 <MX_GPIO_Init+0x14c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a36      	ldr	r2, [pc, #216]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007a0:	f043 0304 	orr.w	r3, r3, #4
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b34      	ldr	r3, [pc, #208]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	603b      	str	r3, [r7, #0]
 80007b6:	4b30      	ldr	r3, [pc, #192]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007bc:	f043 0308 	orr.w	r3, r3, #8
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <MX_GPIO_Init+0x14c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0308 	and.w	r3, r3, #8
 80007ca:	603b      	str	r3, [r7, #0]
 80007cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_11, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	f44f 6108 	mov.w	r1, #2176	@ 0x880
 80007d4:	4829      	ldr	r0, [pc, #164]	@ (800087c <MX_GPIO_Init+0x150>)
 80007d6:	f002 f8f9 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80007e0:	4827      	ldr	r0, [pc, #156]	@ (8000880 <MX_GPIO_Init+0x154>)
 80007e2:	f002 f8f3 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	2104      	movs	r1, #4
 80007ea:	4826      	ldr	r0, [pc, #152]	@ (8000884 <MX_GPIO_Init+0x158>)
 80007ec:	f002 f8ee 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2140      	movs	r1, #64	@ 0x40
 80007f4:	4824      	ldr	r0, [pc, #144]	@ (8000888 <MX_GPIO_Init+0x15c>)
 80007f6:	f002 f8e9 	bl	80029cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC7 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 80007fa:	f44f 6308 	mov.w	r3, #2176	@ 0x880
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000800:	2301      	movs	r3, #1
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4619      	mov	r1, r3
 8000812:	481a      	ldr	r0, [pc, #104]	@ (800087c <MX_GPIO_Init+0x150>)
 8000814:	f001 ff56 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000818:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	4619      	mov	r1, r3
 8000830:	4813      	ldr	r0, [pc, #76]	@ (8000880 <MX_GPIO_Init+0x154>)
 8000832:	f001 ff47 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000836:	2304      	movs	r3, #4
 8000838:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	4619      	mov	r1, r3
 800084c:	480d      	ldr	r0, [pc, #52]	@ (8000884 <MX_GPIO_Init+0x158>)
 800084e:	f001 ff39 	bl	80026c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000852:	2340      	movs	r3, #64	@ 0x40
 8000854:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4807      	ldr	r0, [pc, #28]	@ (8000888 <MX_GPIO_Init+0x15c>)
 800086a:	f001 ff2b 	bl	80026c4 <HAL_GPIO_Init>

}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	@ 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800
 800087c:	40020800 	.word	0x40020800
 8000880:	40020000 	.word	0x40020000
 8000884:	40020c00 	.word	0x40020c00
 8000888:	40020400 	.word	0x40020400

0800088c <HAL_UART_RxCpltCallback>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(&huart6, &rxData, sizeof(rxData));
 8000894:	2201      	movs	r2, #1
 8000896:	4906      	ldr	r1, [pc, #24]	@ (80008b0 <HAL_UART_RxCpltCallback+0x24>)
 8000898:	4806      	ldr	r0, [pc, #24]	@ (80008b4 <HAL_UART_RxCpltCallback+0x28>)
 800089a:	f004 f984 	bl	8004ba6 <HAL_UART_Receive_DMA>
	HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 800089e:	2201      	movs	r2, #1
 80008a0:	4903      	ldr	r1, [pc, #12]	@ (80008b0 <HAL_UART_RxCpltCallback+0x24>)
 80008a2:	4805      	ldr	r0, [pc, #20]	@ (80008b8 <HAL_UART_RxCpltCallback+0x2c>)
 80008a4:	f004 f95a 	bl	8004b5c <HAL_UART_Receive_IT>
}
 80008a8:	bf00      	nop
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	20000124 	.word	0x20000124
 80008b4:	20000308 	.word	0x20000308
 80008b8:	200002c0 	.word	0x200002c0

080008bc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	7f1b      	ldrb	r3, [r3, #28]
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	d167      	bne.n	800099c <HAL_TIM_IC_CaptureCallback+0xe0>
	{
		if(captureFlag1 == 0)
 80008cc:	4b88      	ldr	r3, [pc, #544]	@ (8000af0 <HAL_TIM_IC_CaptureCallback+0x234>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d11a      	bne.n	800090a <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80008d4:	2100      	movs	r1, #0
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f003 fc16 	bl	8004108 <HAL_TIM_ReadCapturedValue>
 80008dc:	4603      	mov	r3, r0
 80008de:	4a85      	ldr	r2, [pc, #532]	@ (8000af4 <HAL_TIM_IC_CaptureCallback+0x238>)
 80008e0:	6013      	str	r3, [r2, #0]
			captureFlag1 = 1;
 80008e2:	4b83      	ldr	r3, [pc, #524]	@ (8000af0 <HAL_TIM_IC_CaptureCallback+0x234>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	6a1a      	ldr	r2, [r3, #32]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f022 020a 	bic.w	r2, r2, #10
 80008f6:	621a      	str	r2, [r3, #32]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	6a1a      	ldr	r2, [r3, #32]
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f042 0202 	orr.w	r2, r2, #2
 8000906:	621a      	str	r2, [r3, #32]
 8000908:	e048      	b.n	800099c <HAL_TIM_IC_CaptureCallback+0xe0>
		}
		else if(captureFlag1 == 1)
 800090a:	4b79      	ldr	r3, [pc, #484]	@ (8000af0 <HAL_TIM_IC_CaptureCallback+0x234>)
 800090c:	881b      	ldrh	r3, [r3, #0]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d144      	bne.n	800099c <HAL_TIM_IC_CaptureCallback+0xe0>
		{
			IC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000912:	2100      	movs	r1, #0
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f003 fbf7 	bl	8004108 <HAL_TIM_ReadCapturedValue>
 800091a:	4603      	mov	r3, r0
 800091c:	4a76      	ldr	r2, [pc, #472]	@ (8000af8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800091e:	6013      	str	r3, [r2, #0]
			//__HAL_TIM_SET_COUNTER(&htim2, 0);

			if(IC_Value2 > IC_Value1)
 8000920:	4b75      	ldr	r3, [pc, #468]	@ (8000af8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	4b73      	ldr	r3, [pc, #460]	@ (8000af4 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	429a      	cmp	r2, r3
 800092a:	d907      	bls.n	800093c <HAL_TIM_IC_CaptureCallback+0x80>
			{
				echoTime1 = IC_Value2 - IC_Value1;
 800092c:	4b72      	ldr	r3, [pc, #456]	@ (8000af8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	4b70      	ldr	r3, [pc, #448]	@ (8000af4 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	4a71      	ldr	r2, [pc, #452]	@ (8000afc <HAL_TIM_IC_CaptureCallback+0x240>)
 8000938:	6013      	str	r3, [r2, #0]
 800093a:	e00d      	b.n	8000958 <HAL_TIM_IC_CaptureCallback+0x9c>
			}
			else if(IC_Value1 > IC_Value2)
 800093c:	4b6d      	ldr	r3, [pc, #436]	@ (8000af4 <HAL_TIM_IC_CaptureCallback+0x238>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b6d      	ldr	r3, [pc, #436]	@ (8000af8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	429a      	cmp	r2, r3
 8000946:	d907      	bls.n	8000958 <HAL_TIM_IC_CaptureCallback+0x9c>
			{
				echoTime1 = (0xffffffff - IC_Value1) + IC_Value2;	//prevention overflow
 8000948:	4b6b      	ldr	r3, [pc, #428]	@ (8000af8 <HAL_TIM_IC_CaptureCallback+0x23c>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b69      	ldr	r3, [pc, #420]	@ (8000af4 <HAL_TIM_IC_CaptureCallback+0x238>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	3b01      	subs	r3, #1
 8000954:	4a69      	ldr	r2, [pc, #420]	@ (8000afc <HAL_TIM_IC_CaptureCallback+0x240>)
 8000956:	6013      	str	r3, [r2, #0]
			}
			distance1 = echoTime1 / 58;
 8000958:	4b68      	ldr	r3, [pc, #416]	@ (8000afc <HAL_TIM_IC_CaptureCallback+0x240>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a68      	ldr	r2, [pc, #416]	@ (8000b00 <HAL_TIM_IC_CaptureCallback+0x244>)
 800095e:	fba2 2303 	umull	r2, r3, r2, r3
 8000962:	095b      	lsrs	r3, r3, #5
 8000964:	b29a      	uxth	r2, r3
 8000966:	4b67      	ldr	r3, [pc, #412]	@ (8000b04 <HAL_TIM_IC_CaptureCallback+0x248>)
 8000968:	801a      	strh	r2, [r3, #0]
			captureFlag1 = 0;
 800096a:	4b61      	ldr	r3, [pc, #388]	@ (8000af0 <HAL_TIM_IC_CaptureCallback+0x234>)
 800096c:	2200      	movs	r2, #0
 800096e:	801a      	strh	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	6a1a      	ldr	r2, [r3, #32]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f022 020a 	bic.w	r2, r2, #10
 800097e:	621a      	str	r2, [r3, #32]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681a      	ldr	r2, [r3, #0]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	6a12      	ldr	r2, [r2, #32]
 800098a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800098c:	4b5e      	ldr	r3, [pc, #376]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x24c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	4b5d      	ldr	r3, [pc, #372]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f022 0202 	bic.w	r2, r2, #2
 800099a:	60da      	str	r2, [r3, #12]
		}
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	7f1b      	ldrb	r3, [r3, #28]
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d167      	bne.n	8000a74 <HAL_TIM_IC_CaptureCallback+0x1b8>
		{
			if(captureFlag2 == 0)
 80009a4:	4b59      	ldr	r3, [pc, #356]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x250>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d11a      	bne.n	80009e2 <HAL_TIM_IC_CaptureCallback+0x126>
			{
				IC_Value3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80009ac:	2104      	movs	r1, #4
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f003 fbaa 	bl	8004108 <HAL_TIM_ReadCapturedValue>
 80009b4:	4603      	mov	r3, r0
 80009b6:	4a56      	ldr	r2, [pc, #344]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x254>)
 80009b8:	6013      	str	r3, [r2, #0]
				captureFlag2 = 1;
 80009ba:	4b54      	ldr	r3, [pc, #336]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x250>)
 80009bc:	2201      	movs	r2, #1
 80009be:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6a1a      	ldr	r2, [r3, #32]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80009ce:	621a      	str	r2, [r3, #32]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6a1a      	ldr	r2, [r3, #32]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f042 0220 	orr.w	r2, r2, #32
 80009de:	621a      	str	r2, [r3, #32]
 80009e0:	e048      	b.n	8000a74 <HAL_TIM_IC_CaptureCallback+0x1b8>
			}
			else if(captureFlag2 == 1)
 80009e2:	4b4a      	ldr	r3, [pc, #296]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x250>)
 80009e4:	881b      	ldrh	r3, [r3, #0]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d144      	bne.n	8000a74 <HAL_TIM_IC_CaptureCallback+0x1b8>
			{
				IC_Value4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 80009ea:	2104      	movs	r1, #4
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f003 fb8b 	bl	8004108 <HAL_TIM_ReadCapturedValue>
 80009f2:	4603      	mov	r3, r0
 80009f4:	4a47      	ldr	r2, [pc, #284]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x258>)
 80009f6:	6013      	str	r3, [r2, #0]
				//__HAL_TIM_SET_COUNTER(&htim2, 0);

				if(IC_Value4 > IC_Value3)
 80009f8:	4b46      	ldr	r3, [pc, #280]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x258>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b44      	ldr	r3, [pc, #272]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x254>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d907      	bls.n	8000a14 <HAL_TIM_IC_CaptureCallback+0x158>
				{
					echoTime2 = IC_Value4 - IC_Value3;
 8000a04:	4b43      	ldr	r3, [pc, #268]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	4b41      	ldr	r3, [pc, #260]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	4a42      	ldr	r2, [pc, #264]	@ (8000b18 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	e00d      	b.n	8000a30 <HAL_TIM_IC_CaptureCallback+0x174>
				}
				else if(IC_Value3 > IC_Value4)
 8000a14:	4b3e      	ldr	r3, [pc, #248]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b3e      	ldr	r3, [pc, #248]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d907      	bls.n	8000a30 <HAL_TIM_IC_CaptureCallback+0x174>
				{
					echoTime2 = (0xffffffff - IC_Value3) + IC_Value4;	//prevention overflow
 8000a20:	4b3c      	ldr	r3, [pc, #240]	@ (8000b14 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4b3a      	ldr	r3, [pc, #232]	@ (8000b10 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	4a3a      	ldr	r2, [pc, #232]	@ (8000b18 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000a2e:	6013      	str	r3, [r2, #0]
				}
				distance2 = echoTime2 / 58;
 8000a30:	4b39      	ldr	r3, [pc, #228]	@ (8000b18 <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a32      	ldr	r2, [pc, #200]	@ (8000b00 <HAL_TIM_IC_CaptureCallback+0x244>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b37      	ldr	r3, [pc, #220]	@ (8000b1c <HAL_TIM_IC_CaptureCallback+0x260>)
 8000a40:	801a      	strh	r2, [r3, #0]
				captureFlag2 = 0;
 8000a42:	4b32      	ldr	r3, [pc, #200]	@ (8000b0c <HAL_TIM_IC_CaptureCallback+0x250>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	6a1a      	ldr	r2, [r3, #32]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8000a56:	621a      	str	r2, [r3, #32]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6a12      	ldr	r2, [r2, #32]
 8000a62:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC2);
 8000a64:	4b28      	ldr	r3, [pc, #160]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	68da      	ldr	r2, [r3, #12]
 8000a6a:	4b27      	ldr	r3, [pc, #156]	@ (8000b08 <HAL_TIM_IC_CaptureCallback+0x24c>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f022 0204 	bic.w	r2, r2, #4
 8000a72:	60da      	str	r2, [r3, #12]
			}
		}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	7f1b      	ldrb	r3, [r3, #28]
 8000a78:	2b04      	cmp	r3, #4
 8000a7a:	f040 8089 	bne.w	8000b90 <HAL_TIM_IC_CaptureCallback+0x2d4>
		{
			if(captureFlag3 == 0)
 8000a7e:	4b28      	ldr	r3, [pc, #160]	@ (8000b20 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d11a      	bne.n	8000abc <HAL_TIM_IC_CaptureCallback+0x200>
			{
				IC_Value5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000a86:	2108      	movs	r1, #8
 8000a88:	6878      	ldr	r0, [r7, #4]
 8000a8a:	f003 fb3d 	bl	8004108 <HAL_TIM_ReadCapturedValue>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	4a24      	ldr	r2, [pc, #144]	@ (8000b24 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000a92:	6013      	str	r3, [r2, #0]
				captureFlag3 = 1;
 8000a94:	4b22      	ldr	r3, [pc, #136]	@ (8000b20 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6a1a      	ldr	r2, [r3, #32]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000aa8:	621a      	str	r2, [r3, #32]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6a1a      	ldr	r2, [r3, #32]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000ab8:	621a      	str	r2, [r3, #32]
				captureFlag3 = 0;
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
			}
		}
}
 8000aba:	e069      	b.n	8000b90 <HAL_TIM_IC_CaptureCallback+0x2d4>
			else if(captureFlag3 == 1)
 8000abc:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d165      	bne.n	8000b90 <HAL_TIM_IC_CaptureCallback+0x2d4>
				IC_Value6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000ac4:	2108      	movs	r1, #8
 8000ac6:	6878      	ldr	r0, [r7, #4]
 8000ac8:	f003 fb1e 	bl	8004108 <HAL_TIM_ReadCapturedValue>
 8000acc:	4603      	mov	r3, r0
 8000ace:	4a16      	ldr	r2, [pc, #88]	@ (8000b28 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000ad0:	6013      	str	r3, [r2, #0]
				if(IC_Value6 > IC_Value5)
 8000ad2:	4b15      	ldr	r3, [pc, #84]	@ (8000b28 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d928      	bls.n	8000b30 <HAL_TIM_IC_CaptureCallback+0x274>
					echoTime3 = IC_Value6 - IC_Value5;
 8000ade:	4b12      	ldr	r3, [pc, #72]	@ (8000b28 <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	4b10      	ldr	r3, [pc, #64]	@ (8000b24 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	4a10      	ldr	r2, [pc, #64]	@ (8000b2c <HAL_TIM_IC_CaptureCallback+0x270>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	e02e      	b.n	8000b4c <HAL_TIM_IC_CaptureCallback+0x290>
 8000aee:	bf00      	nop
 8000af0:	2000014c 	.word	0x2000014c
 8000af4:	20000128 	.word	0x20000128
 8000af8:	2000012c 	.word	0x2000012c
 8000afc:	20000140 	.word	0x20000140
 8000b00:	8d3dcb09 	.word	0x8d3dcb09
 8000b04:	20000152 	.word	0x20000152
 8000b08:	200001a0 	.word	0x200001a0
 8000b0c:	2000014e 	.word	0x2000014e
 8000b10:	20000130 	.word	0x20000130
 8000b14:	20000134 	.word	0x20000134
 8000b18:	20000144 	.word	0x20000144
 8000b1c:	20000154 	.word	0x20000154
 8000b20:	20000150 	.word	0x20000150
 8000b24:	20000138 	.word	0x20000138
 8000b28:	2000013c 	.word	0x2000013c
 8000b2c:	20000148 	.word	0x20000148
				else if(IC_Value5 > IC_Value6)
 8000b30:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d907      	bls.n	8000b4c <HAL_TIM_IC_CaptureCallback+0x290>
					echoTime3 = (0xffffffff - IC_Value5) + IC_Value6;	//prevention overflow
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <HAL_TIM_IC_CaptureCallback+0x2e0>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b15      	ldr	r3, [pc, #84]	@ (8000b98 <HAL_TIM_IC_CaptureCallback+0x2dc>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	3b01      	subs	r3, #1
 8000b48:	4a15      	ldr	r2, [pc, #84]	@ (8000ba0 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8000b4a:	6013      	str	r3, [r2, #0]
				distance3 = echoTime3 / 58;
 8000b4c:	4b14      	ldr	r3, [pc, #80]	@ (8000ba0 <HAL_TIM_IC_CaptureCallback+0x2e4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a14      	ldr	r2, [pc, #80]	@ (8000ba4 <HAL_TIM_IC_CaptureCallback+0x2e8>)
 8000b52:	fba2 2303 	umull	r2, r3, r2, r3
 8000b56:	095b      	lsrs	r3, r3, #5
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <HAL_TIM_IC_CaptureCallback+0x2ec>)
 8000b5c:	801a      	strh	r2, [r3, #0]
				captureFlag3 = 0;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <HAL_TIM_IC_CaptureCallback+0x2f0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	801a      	strh	r2, [r3, #0]
				__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6a1a      	ldr	r2, [r3, #32]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f422 6220 	bic.w	r2, r2, #2560	@ 0xa00
 8000b72:	621a      	str	r2, [r3, #32]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6a12      	ldr	r2, [r2, #32]
 8000b7e:	621a      	str	r2, [r3, #32]
				__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC3);
 8000b80:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb0 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	68da      	ldr	r2, [r3, #12]
 8000b86:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb0 <HAL_TIM_IC_CaptureCallback+0x2f4>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f022 0208 	bic.w	r2, r2, #8
 8000b8e:	60da      	str	r2, [r3, #12]
}
 8000b90:	bf00      	nop
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000138 	.word	0x20000138
 8000b9c:	2000013c 	.word	0x2000013c
 8000ba0:	20000148 	.word	0x20000148
 8000ba4:	8d3dcb09 	.word	0x8d3dcb09
 8000ba8:	20000156 	.word	0x20000156
 8000bac:	20000150 	.word	0x20000150
 8000bb0:	200001a0 	.word	0x200001a0

08000bb4 <HC_SR04>:

void HC_SR04(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bbe:	4813      	ldr	r0, [pc, #76]	@ (8000c0c <HC_SR04+0x58>)
 8000bc0:	f001 ff04 	bl	80029cc <HAL_GPIO_WritePin>
	delay_us(10);
 8000bc4:	200a      	movs	r0, #10
 8000bc6:	f7ff fc83 	bl	80004d0 <delay_us>
	HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000bd0:	480e      	ldr	r0, [pc, #56]	@ (8000c0c <HC_SR04+0x58>)
 8000bd2:	f001 fefb 	bl	80029cc <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);
 8000bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c10 <HC_SR04+0x5c>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HC_SR04+0x5c>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f042 0202 	orr.w	r2, r2, #2
 8000be4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC2);
 8000be6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c10 <HC_SR04+0x5c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	68da      	ldr	r2, [r3, #12]
 8000bec:	4b08      	ldr	r3, [pc, #32]	@ (8000c10 <HC_SR04+0x5c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f042 0204 	orr.w	r2, r2, #4
 8000bf4:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC3);
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HC_SR04+0x5c>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	4b04      	ldr	r3, [pc, #16]	@ (8000c10 <HC_SR04+0x5c>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f042 0208 	orr.w	r2, r2, #8
 8000c04:	60da      	str	r2, [r3, #12]
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40020800 	.word	0x40020800
 8000c10:	200001a0 	.word	0x200001a0

08000c14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000c18:	f001 f80a 	bl	8001c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c1c:	f000 f84e 	bl	8000cbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c20:	f7ff fd84 	bl	800072c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c24:	f7ff fc6e 	bl	8000504 <MX_DMA_Init>
  MX_TIM11_Init();
 8000c28:	f000 fd70 	bl	800170c <MX_TIM11_Init>
  MX_USART2_UART_Init();
 8000c2c:	f000 fea2 	bl	8001974 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000c30:	f000 fc72 	bl	8001518 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8000c34:	f000 fec8 	bl	80019c8 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 8000c38:	f000 fcf0 	bl	800161c <MX_TIM5_Init>
  MX_TIM2_Init();
 8000c3c:	f000 fbe6 	bl	800140c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8000c40:	2104      	movs	r1, #4
 8000c42:	4817      	ldr	r0, [pc, #92]	@ (8000ca0 <main+0x8c>)
 8000c44:	f002 fd26 	bl	8003694 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &rxData, sizeof(rxData));
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4916      	ldr	r1, [pc, #88]	@ (8000ca4 <main+0x90>)
 8000c4c:	4816      	ldr	r0, [pc, #88]	@ (8000ca8 <main+0x94>)
 8000c4e:	f003 ff85 	bl	8004b5c <HAL_UART_Receive_IT>
  HAL_UART_Receive_DMA(&huart6, &rxData, sizeof(rxData));
 8000c52:	2201      	movs	r2, #1
 8000c54:	4913      	ldr	r1, [pc, #76]	@ (8000ca4 <main+0x90>)
 8000c56:	4815      	ldr	r0, [pc, #84]	@ (8000cac <main+0x98>)
 8000c58:	f003 ffa5 	bl	8004ba6 <HAL_UART_Receive_DMA>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4814      	ldr	r0, [pc, #80]	@ (8000cb0 <main+0x9c>)
 8000c60:	f002 fd18 	bl	8003694 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c64:	2104      	movs	r1, #4
 8000c66:	4812      	ldr	r0, [pc, #72]	@ (8000cb0 <main+0x9c>)
 8000c68:	f002 fd14 	bl	8003694 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim11);		//for delay_us
 8000c6c:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <main+0xa0>)
 8000c6e:	f002 fbfb 	bl	8003468 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);		//for input capture
 8000c72:	4811      	ldr	r0, [pc, #68]	@ (8000cb8 <main+0xa4>)
 8000c74:	f002 fbf8 	bl	8003468 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	480f      	ldr	r0, [pc, #60]	@ (8000cb8 <main+0xa4>)
 8000c7c:	f002 fe14 	bl	80038a8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000c80:	2104      	movs	r1, #4
 8000c82:	480d      	ldr	r0, [pc, #52]	@ (8000cb8 <main+0xa4>)
 8000c84:	f002 fe10 	bl	80038a8 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_3);
 8000c88:	2108      	movs	r1, #8
 8000c8a:	480b      	ldr	r0, [pc, #44]	@ (8000cb8 <main+0xa4>)
 8000c8c:	f002 fe0c 	bl	80038a8 <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c90:	f005 f8ba 	bl	8005e08 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c94:	f7ff fc56 	bl	8000544 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c98:	f005 f8da 	bl	8005e50 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <main+0x88>
 8000ca0:	20000230 	.word	0x20000230
 8000ca4:	20000124 	.word	0x20000124
 8000ca8:	200002c0 	.word	0x200002c0
 8000cac:	20000308 	.word	0x20000308
 8000cb0:	200001e8 	.word	0x200001e8
 8000cb4:	20000278 	.word	0x20000278
 8000cb8:	200001a0 	.word	0x200001a0

08000cbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b094      	sub	sp, #80	@ 0x50
 8000cc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc2:	f107 0320 	add.w	r3, r7, #32
 8000cc6:	2230      	movs	r2, #48	@ 0x30
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f007 fe4c 	bl	8008968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	4b27      	ldr	r3, [pc, #156]	@ (8000d84 <SystemClock_Config+0xc8>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce8:	4a26      	ldr	r2, [pc, #152]	@ (8000d84 <SystemClock_Config+0xc8>)
 8000cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf0:	4b24      	ldr	r3, [pc, #144]	@ (8000d84 <SystemClock_Config+0xc8>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	4b21      	ldr	r3, [pc, #132]	@ (8000d88 <SystemClock_Config+0xcc>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a20      	ldr	r2, [pc, #128]	@ (8000d88 <SystemClock_Config+0xcc>)
 8000d06:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <SystemClock_Config+0xcc>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d14:	607b      	str	r3, [r7, #4]
 8000d16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d22:	2302      	movs	r3, #2
 8000d24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000d30:	2364      	movs	r3, #100	@ 0x64
 8000d32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fe77 	bl	8002a34 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d4c:	f000 f830 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	230f      	movs	r3, #15
 8000d52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d54:	2302      	movs	r3, #2
 8000d56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 f8d9 	bl	8002f24 <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000d78:	f000 f81a 	bl	8000db0 <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3750      	adds	r7, #80	@ 0x50
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000

08000d8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a04      	ldr	r2, [pc, #16]	@ (8000dac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d101      	bne.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d9e:	f000 ff69 	bl	8001c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40000800 	.word	0x40000800

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <Error_Handler+0x8>

08000dbc <go>:


#include "move.h"

void go()
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
	TIM3->CCR1 = 700;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	@ (8000e08 <go+0x4c>)
 8000dc2:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000dc6:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2 = 700;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e08 <go+0x4c>)
 8000dca:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000dce:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	2140      	movs	r1, #64	@ 0x40
 8000dd4:	480d      	ldr	r0, [pc, #52]	@ (8000e0c <go+0x50>)
 8000dd6:	f001 fdf9 	bl	80029cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2180      	movs	r1, #128	@ 0x80
 8000dde:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <go+0x54>)
 8000de0:	f001 fdf4 	bl	80029cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000de4:	2201      	movs	r2, #1
 8000de6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dea:	480a      	ldr	r0, [pc, #40]	@ (8000e14 <go+0x58>)
 8000dec:	f001 fdee 	bl	80029cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000df0:	2200      	movs	r2, #0
 8000df2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000df6:	4807      	ldr	r0, [pc, #28]	@ (8000e14 <go+0x58>)
 8000df8:	f001 fde8 	bl	80029cc <HAL_GPIO_WritePin>
	backflag=0;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <go+0x5c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40000400 	.word	0x40000400
 8000e0c:	40020400 	.word	0x40020400
 8000e10:	40020800 	.word	0x40020800
 8000e14:	40020000 	.word	0x40020000
 8000e18:	20000120 	.word	0x20000120

08000e1c <back>:

void back()
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  	TIM3->CCR1 = 700;
 8000e20:	4b11      	ldr	r3, [pc, #68]	@ (8000e68 <back+0x4c>)
 8000e22:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000e26:	635a      	str	r2, [r3, #52]	@ 0x34
  	TIM3->CCR2 = 700;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <back+0x4c>)
 8000e2a:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 8000e2e:	639a      	str	r2, [r3, #56]	@ 0x38
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2140      	movs	r1, #64	@ 0x40
 8000e34:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <back+0x50>)
 8000e36:	f001 fdc9 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	2180      	movs	r1, #128	@ 0x80
 8000e3e:	480c      	ldr	r0, [pc, #48]	@ (8000e70 <back+0x54>)
 8000e40:	f001 fdc4 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000e44:	2200      	movs	r2, #0
 8000e46:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e4a:	480a      	ldr	r0, [pc, #40]	@ (8000e74 <back+0x58>)
 8000e4c:	f001 fdbe 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e56:	4807      	ldr	r0, [pc, #28]	@ (8000e74 <back+0x58>)
 8000e58:	f001 fdb8 	bl	80029cc <HAL_GPIO_WritePin>
  	backflag=1;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <back+0x5c>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40000400 	.word	0x40000400
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020000 	.word	0x40020000
 8000e78:	20000120 	.word	0x20000120

08000e7c <left>:

void left()
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
  	TIM3->CCR1 = 1000;
 8000e80:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <left+0x4c>)
 8000e82:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e86:	635a      	str	r2, [r3, #52]	@ 0x34
  	TIM3->CCR2 = 1000;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <left+0x4c>)
 8000e8a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e8e:	639a      	str	r2, [r3, #56]	@ 0x38
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8000e90:	2200      	movs	r2, #0
 8000e92:	2140      	movs	r1, #64	@ 0x40
 8000e94:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <left+0x50>)
 8000e96:	f001 fd99 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	2180      	movs	r1, #128	@ 0x80
 8000e9e:	480c      	ldr	r0, [pc, #48]	@ (8000ed0 <left+0x54>)
 8000ea0:	f001 fd94 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000eaa:	480a      	ldr	r0, [pc, #40]	@ (8000ed4 <left+0x58>)
 8000eac:	f001 fd8e 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000eb6:	4807      	ldr	r0, [pc, #28]	@ (8000ed4 <left+0x58>)
 8000eb8:	f001 fd88 	bl	80029cc <HAL_GPIO_WritePin>
  	backflag=0;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <left+0x5c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	40000400 	.word	0x40000400
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40020800 	.word	0x40020800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	20000120 	.word	0x20000120

08000edc <right>:

void right()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  	TIM3->CCR1 = 1000;
 8000ee0:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <right+0x4c>)
 8000ee2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ee6:	635a      	str	r2, [r3, #52]	@ 0x34
  	TIM3->CCR2 = 1000;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <right+0x4c>)
 8000eea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000eee:	639a      	str	r2, [r3, #56]	@ 0x38
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2140      	movs	r1, #64	@ 0x40
 8000ef4:	480d      	ldr	r0, [pc, #52]	@ (8000f2c <right+0x50>)
 8000ef6:	f001 fd69 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2180      	movs	r1, #128	@ 0x80
 8000efe:	480c      	ldr	r0, [pc, #48]	@ (8000f30 <right+0x54>)
 8000f00:	f001 fd64 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f0a:	480a      	ldr	r0, [pc, #40]	@ (8000f34 <right+0x58>)
 8000f0c:	f001 fd5e 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f16:	4807      	ldr	r0, [pc, #28]	@ (8000f34 <right+0x58>)
 8000f18:	f001 fd58 	bl	80029cc <HAL_GPIO_WritePin>
  	backflag=0;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <right+0x5c>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40000400 	.word	0x40000400
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	20000120 	.word	0x20000120

08000f3c <stop>:

void stop()
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000f40:	2201      	movs	r2, #1
 8000f42:	2140      	movs	r1, #64	@ 0x40
 8000f44:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <stop+0x3c>)
 8000f46:	f001 fd41 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2180      	movs	r1, #128	@ 0x80
 8000f4e:	480b      	ldr	r0, [pc, #44]	@ (8000f7c <stop+0x40>)
 8000f50:	f001 fd3c 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000f54:	2201      	movs	r2, #1
 8000f56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f5a:	4809      	ldr	r0, [pc, #36]	@ (8000f80 <stop+0x44>)
 8000f5c:	f001 fd36 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000f60:	2201      	movs	r2, #1
 8000f62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f66:	4806      	ldr	r0, [pc, #24]	@ (8000f80 <stop+0x44>)
 8000f68:	f001 fd30 	bl	80029cc <HAL_GPIO_WritePin>
  	backflag=0;
 8000f6c:	4b05      	ldr	r3, [pc, #20]	@ (8000f84 <stop+0x48>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020400 	.word	0x40020400
 8000f7c:	40020800 	.word	0x40020800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	20000120 	.word	0x20000120

08000f88 <goright>:

void goright()
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  	TIM3->CCR1 = 1000;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <goright+0x4c>)
 8000f8e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f92:	635a      	str	r2, [r3, #52]	@ 0x34
  	TIM3->CCR2 = 500;
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <goright+0x4c>)
 8000f96:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000f9a:	639a      	str	r2, [r3, #56]	@ 0x38
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2140      	movs	r1, #64	@ 0x40
 8000fa0:	480d      	ldr	r0, [pc, #52]	@ (8000fd8 <goright+0x50>)
 8000fa2:	f001 fd13 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2180      	movs	r1, #128	@ 0x80
 8000faa:	480c      	ldr	r0, [pc, #48]	@ (8000fdc <goright+0x54>)
 8000fac:	f001 fd0e 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fb6:	480a      	ldr	r0, [pc, #40]	@ (8000fe0 <goright+0x58>)
 8000fb8:	f001 fd08 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000fc2:	4807      	ldr	r0, [pc, #28]	@ (8000fe0 <goright+0x58>)
 8000fc4:	f001 fd02 	bl	80029cc <HAL_GPIO_WritePin>
  	backflag=0;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <goright+0x5c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40000400 	.word	0x40000400
 8000fd8:	40020400 	.word	0x40020400
 8000fdc:	40020800 	.word	0x40020800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	20000120 	.word	0x20000120

08000fe8 <goleft>:

void goleft()
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  	TIM3->CCR2 = 1000;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <goleft+0x4c>)
 8000fee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ff2:	639a      	str	r2, [r3, #56]	@ 0x38
  	TIM3->CCR1 = 500;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <goleft+0x4c>)
 8000ff6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ffa:	635a      	str	r2, [r3, #52]	@ 0x34
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2140      	movs	r1, #64	@ 0x40
 8001000:	480d      	ldr	r0, [pc, #52]	@ (8001038 <goleft+0x50>)
 8001002:	f001 fce3 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2180      	movs	r1, #128	@ 0x80
 800100a:	480c      	ldr	r0, [pc, #48]	@ (800103c <goleft+0x54>)
 800100c:	f001 fcde 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 1);
 8001010:	2201      	movs	r2, #1
 8001012:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001016:	480a      	ldr	r0, [pc, #40]	@ (8001040 <goleft+0x58>)
 8001018:	f001 fcd8 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001022:	4807      	ldr	r0, [pc, #28]	@ (8001040 <goleft+0x58>)
 8001024:	f001 fcd2 	bl	80029cc <HAL_GPIO_WritePin>
  	backflag=0;
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <goleft+0x5c>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40000400 	.word	0x40000400
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020000 	.word	0x40020000
 8001044:	20000120 	.word	0x20000120

08001048 <backright>:

void backright()
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  	TIM3->CCR1 = 1000;
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <backright+0x4c>)
 800104e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001052:	635a      	str	r2, [r3, #52]	@ 0x34
  	TIM3->CCR2 = 500;
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <backright+0x4c>)
 8001056:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800105a:	639a      	str	r2, [r3, #56]	@ 0x38
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 800105c:	2200      	movs	r2, #0
 800105e:	2140      	movs	r1, #64	@ 0x40
 8001060:	480d      	ldr	r0, [pc, #52]	@ (8001098 <backright+0x50>)
 8001062:	f001 fcb3 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 8001066:	2201      	movs	r2, #1
 8001068:	2180      	movs	r1, #128	@ 0x80
 800106a:	480c      	ldr	r0, [pc, #48]	@ (800109c <backright+0x54>)
 800106c:	f001 fcae 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001076:	480a      	ldr	r0, [pc, #40]	@ (80010a0 <backright+0x58>)
 8001078:	f001 fca8 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800107c:	2201      	movs	r2, #1
 800107e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001082:	4807      	ldr	r0, [pc, #28]	@ (80010a0 <backright+0x58>)
 8001084:	f001 fca2 	bl	80029cc <HAL_GPIO_WritePin>
  	backflag=1;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <backright+0x5c>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40000400 	.word	0x40000400
 8001098:	40020400 	.word	0x40020400
 800109c:	40020800 	.word	0x40020800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	20000120 	.word	0x20000120

080010a8 <backleft>:

void backleft()
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  	TIM3->CCR2 = 1000;
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <backleft+0x4c>)
 80010ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80010b2:	639a      	str	r2, [r3, #56]	@ 0x38
  	TIM3->CCR1 = 500;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <backleft+0x4c>)
 80010b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010ba:	635a      	str	r2, [r3, #52]	@ 0x34
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2140      	movs	r1, #64	@ 0x40
 80010c0:	480d      	ldr	r0, [pc, #52]	@ (80010f8 <backleft+0x50>)
 80010c2:	f001 fc83 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 1);
 80010c6:	2201      	movs	r2, #1
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	480c      	ldr	r0, [pc, #48]	@ (80010fc <backleft+0x54>)
 80010cc:	f001 fc7e 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80010d0:	2200      	movs	r2, #0
 80010d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010d6:	480a      	ldr	r0, [pc, #40]	@ (8001100 <backleft+0x58>)
 80010d8:	f001 fc78 	bl	80029cc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80010dc:	2201      	movs	r2, #1
 80010de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010e2:	4807      	ldr	r0, [pc, #28]	@ (8001100 <backleft+0x58>)
 80010e4:	f001 fc72 	bl	80029cc <HAL_GPIO_WritePin>
  	backflag=1;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <backleft+0x5c>)
 80010ea:	2201      	movs	r2, #1
 80010ec:	601a      	str	r2, [r3, #0]
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40000400 	.word	0x40000400
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020800 	.word	0x40020800
 8001100:	40020000 	.word	0x40020000
 8001104:	20000120 	.word	0x20000120

08001108 <autocar>:

void autocar()
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0

	HC_SR04();
 800110c:	f7ff fd52 	bl	8000bb4 <HC_SR04>
	if(distance2 < 30){
 8001110:	4b19      	ldr	r3, [pc, #100]	@ (8001178 <autocar+0x70>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	2b1d      	cmp	r3, #29
 8001116:	d817      	bhi.n	8001148 <autocar+0x40>
		if(distance1<distance3){
 8001118:	4b18      	ldr	r3, [pc, #96]	@ (800117c <autocar+0x74>)
 800111a:	881a      	ldrh	r2, [r3, #0]
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <autocar+0x78>)
 800111e:	881b      	ldrh	r3, [r3, #0]
 8001120:	429a      	cmp	r2, r3
 8001122:	d205      	bcs.n	8001130 <autocar+0x28>
			right();
 8001124:	f7ff feda 	bl	8000edc <right>
			HAL_Delay(10);
 8001128:	200a      	movs	r0, #10
 800112a:	f000 fdc3 	bl	8001cb4 <HAL_Delay>
		}
	}
	else if (distance1 < 8) {right(); HAL_Delay(10);}
	else if (distance3 < 8) {left(); HAL_Delay(10);}
	else go();
}
 800112e:	e021      	b.n	8001174 <autocar+0x6c>
		else if(distance3<distance1){
 8001130:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <autocar+0x78>)
 8001132:	881a      	ldrh	r2, [r3, #0]
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <autocar+0x74>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	429a      	cmp	r2, r3
 800113a:	d21b      	bcs.n	8001174 <autocar+0x6c>
			left();
 800113c:	f7ff fe9e 	bl	8000e7c <left>
			HAL_Delay(10);
 8001140:	200a      	movs	r0, #10
 8001142:	f000 fdb7 	bl	8001cb4 <HAL_Delay>
}
 8001146:	e015      	b.n	8001174 <autocar+0x6c>
	else if (distance1 < 8) {right(); HAL_Delay(10);}
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <autocar+0x74>)
 800114a:	881b      	ldrh	r3, [r3, #0]
 800114c:	2b07      	cmp	r3, #7
 800114e:	d805      	bhi.n	800115c <autocar+0x54>
 8001150:	f7ff fec4 	bl	8000edc <right>
 8001154:	200a      	movs	r0, #10
 8001156:	f000 fdad 	bl	8001cb4 <HAL_Delay>
}
 800115a:	e00b      	b.n	8001174 <autocar+0x6c>
	else if (distance3 < 8) {left(); HAL_Delay(10);}
 800115c:	4b08      	ldr	r3, [pc, #32]	@ (8001180 <autocar+0x78>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	2b07      	cmp	r3, #7
 8001162:	d805      	bhi.n	8001170 <autocar+0x68>
 8001164:	f7ff fe8a 	bl	8000e7c <left>
 8001168:	200a      	movs	r0, #10
 800116a:	f000 fda3 	bl	8001cb4 <HAL_Delay>
}
 800116e:	e001      	b.n	8001174 <autocar+0x6c>
	else go();
 8001170:	f7ff fe24 	bl	8000dbc <go>
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000154 	.word	0x20000154
 800117c:	20000152 	.word	0x20000152
 8001180:	20000156 	.word	0x20000156

08001184 <backsong>:
						hNote, hNote, hNote, pNote, hNote, hNote, hNote, dNote};
uint16_t domisol[] = {Do, Mi, Sol};
uint16_t domisoltime[] = {pNote, pNote, pNote};

void backsong()
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
	while(backflag==1){
 800118a:	e026      	b.n	80011da <backsong+0x56>
		int i = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
		for(i = 0; i < 35; i++)
 8001190:	2300      	movs	r3, #0
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	e01e      	b.n	80011d4 <backsong+0x50>
		{
		TIM5->CCR2 = 500;
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <backsong+0x68>)
 8001198:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800119c:	639a      	str	r2, [r3, #56]	@ 0x38
		TIM5->PSC = elise[i];
 800119e:	4a14      	ldr	r2, [pc, #80]	@ (80011f0 <backsong+0x6c>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80011a6:	4b11      	ldr	r3, [pc, #68]	@ (80011ec <backsong+0x68>)
 80011a8:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_Delay(elisetime[i]);
 80011aa:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <backsong+0x70>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011b2:	4618      	mov	r0, r3
 80011b4:	f000 fd7e 	bl	8001cb4 <HAL_Delay>
		TIM5->CCR2 = 0;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	@ (80011ec <backsong+0x68>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_Delay(5);
 80011be:	2005      	movs	r0, #5
 80011c0:	f000 fd78 	bl	8001cb4 <HAL_Delay>
		if(backflag==0)break;
 80011c4:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <backsong+0x74>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d100      	bne.n	80011ce <backsong+0x4a>
 80011cc:	e005      	b.n	80011da <backsong+0x56>
		for(i = 0; i < 35; i++)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b22      	cmp	r3, #34	@ 0x22
 80011d8:	dddd      	ble.n	8001196 <backsong+0x12>
	while(backflag==1){
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <backsong+0x74>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d0d4      	beq.n	800118c <backsong+0x8>
		}
	}
};
 80011e2:	bf00      	nop
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40000c00 	.word	0x40000c00
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000048 	.word	0x20000048
 80011f8:	20000120 	.word	0x20000120

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <HAL_MspInit+0x54>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	4a11      	ldr	r2, [pc, #68]	@ (8001250 <HAL_MspInit+0x54>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001210:	6453      	str	r3, [r2, #68]	@ 0x44
 8001212:	4b0f      	ldr	r3, [pc, #60]	@ (8001250 <HAL_MspInit+0x54>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121a:	607b      	str	r3, [r7, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	4b0b      	ldr	r3, [pc, #44]	@ (8001250 <HAL_MspInit+0x54>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <HAL_MspInit+0x54>)
 8001228:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800122c:	6413      	str	r3, [r2, #64]	@ 0x40
 800122e:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <HAL_MspInit+0x54>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001236:	603b      	str	r3, [r7, #0]
 8001238:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	210f      	movs	r1, #15
 800123e:	f06f 0001 	mvn.w	r0, #1
 8001242:	f000 fe13 	bl	8001e6c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800

08001254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	@ 0x38
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	4b33      	ldr	r3, [pc, #204]	@ (8001338 <HAL_InitTick+0xe4>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126c:	4a32      	ldr	r2, [pc, #200]	@ (8001338 <HAL_InitTick+0xe4>)
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6413      	str	r3, [r2, #64]	@ 0x40
 8001274:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <HAL_InitTick+0xe4>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001278:	f003 0304 	and.w	r3, r3, #4
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001280:	f107 0210 	add.w	r2, r7, #16
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	4611      	mov	r1, r2
 800128a:	4618      	mov	r0, r3
 800128c:	f002 f86a 	bl	8003364 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001290:	6a3b      	ldr	r3, [r7, #32]
 8001292:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001296:	2b00      	cmp	r3, #0
 8001298:	d103      	bne.n	80012a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800129a:	f002 f83b 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 800129e:	6378      	str	r0, [r7, #52]	@ 0x34
 80012a0:	e004      	b.n	80012ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012a2:	f002 f837 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 80012a6:	4603      	mov	r3, r0
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012ae:	4a23      	ldr	r2, [pc, #140]	@ (800133c <HAL_InitTick+0xe8>)
 80012b0:	fba2 2303 	umull	r2, r3, r2, r3
 80012b4:	0c9b      	lsrs	r3, r3, #18
 80012b6:	3b01      	subs	r3, #1
 80012b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80012ba:	4b21      	ldr	r3, [pc, #132]	@ (8001340 <HAL_InitTick+0xec>)
 80012bc:	4a21      	ldr	r2, [pc, #132]	@ (8001344 <HAL_InitTick+0xf0>)
 80012be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <HAL_InitTick+0xec>)
 80012c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012c6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80012c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001340 <HAL_InitTick+0xec>)
 80012ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012cc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001340 <HAL_InitTick+0xec>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001340 <HAL_InitTick+0xec>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b19      	ldr	r3, [pc, #100]	@ (8001340 <HAL_InitTick+0xec>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80012e0:	4817      	ldr	r0, [pc, #92]	@ (8001340 <HAL_InitTick+0xec>)
 80012e2:	f002 f871 	bl	80033c8 <HAL_TIM_Base_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d11b      	bne.n	800132c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80012f4:	4812      	ldr	r0, [pc, #72]	@ (8001340 <HAL_InitTick+0xec>)
 80012f6:	f002 f911 	bl	800351c <HAL_TIM_Base_Start_IT>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001300:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001304:	2b00      	cmp	r3, #0
 8001306:	d111      	bne.n	800132c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001308:	201e      	movs	r0, #30
 800130a:	f000 fdcb 	bl	8001ea4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d808      	bhi.n	8001326 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	201e      	movs	r0, #30
 800131a:	f000 fda7 	bl	8001e6c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <HAL_InitTick+0xf4>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6013      	str	r3, [r2, #0]
 8001324:	e002      	b.n	800132c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800132c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001330:	4618      	mov	r0, r3
 8001332:	3738      	adds	r7, #56	@ 0x38
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40023800 	.word	0x40023800
 800133c:	431bde83 	.word	0x431bde83
 8001340:	20000158 	.word	0x20000158
 8001344:	40000800 	.word	0x40000800
 8001348:	20000094 	.word	0x20000094

0800134c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001350:	bf00      	nop
 8001352:	e7fd      	b.n	8001350 <NMI_Handler+0x4>

08001354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001358:	bf00      	nop
 800135a:	e7fd      	b.n	8001358 <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <MemManage_Handler+0x4>

08001364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <BusFault_Handler+0x4>

0800136c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <UsageFault_Handler+0x4>

08001374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
	...

08001384 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001388:	4802      	ldr	r0, [pc, #8]	@ (8001394 <TIM2_IRQHandler+0x10>)
 800138a:	f002 fba7 	bl	8003adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200001a0 	.word	0x200001a0

08001398 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <TIM4_IRQHandler+0x10>)
 800139e:	f002 fb9d 	bl	8003adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000158 	.word	0x20000158

080013ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <USART2_IRQHandler+0x10>)
 80013b2:	f003 fc1d 	bl	8004bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200002c0 	.word	0x200002c0

080013c0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <DMA2_Stream1_IRQHandler+0x10>)
 80013c6:	f000 ff13 	bl	80021f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000350 	.word	0x20000350

080013d4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <USART6_IRQHandler+0x10>)
 80013da:	f003 fc09 	bl	8004bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000308 	.word	0x20000308

080013e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <SystemInit+0x20>)
 80013ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <SystemInit+0x20>)
 80013f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim11;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08a      	sub	sp, #40	@ 0x28
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0318 	add.w	r3, r7, #24
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	f107 0310 	add.w	r3, r7, #16
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800142a:	463b      	mov	r3, r7
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001436:	4b37      	ldr	r3, [pc, #220]	@ (8001514 <MX_TIM2_Init+0x108>)
 8001438:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800143c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800143e:	4b35      	ldr	r3, [pc, #212]	@ (8001514 <MX_TIM2_Init+0x108>)
 8001440:	2263      	movs	r2, #99	@ 0x63
 8001442:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b33      	ldr	r3, [pc, #204]	@ (8001514 <MX_TIM2_Init+0x108>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800144a:	4b32      	ldr	r3, [pc, #200]	@ (8001514 <MX_TIM2_Init+0x108>)
 800144c:	f04f 32ff 	mov.w	r2, #4294967295
 8001450:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b30      	ldr	r3, [pc, #192]	@ (8001514 <MX_TIM2_Init+0x108>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b2e      	ldr	r3, [pc, #184]	@ (8001514 <MX_TIM2_Init+0x108>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145e:	482d      	ldr	r0, [pc, #180]	@ (8001514 <MX_TIM2_Init+0x108>)
 8001460:	f001 ffb2 	bl	80033c8 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800146a:	f7ff fca1 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001472:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0318 	add.w	r3, r7, #24
 8001478:	4619      	mov	r1, r3
 800147a:	4826      	ldr	r0, [pc, #152]	@ (8001514 <MX_TIM2_Init+0x108>)
 800147c:	f002 fd7c 	bl	8003f78 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001486:	f7ff fc93 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800148a:	4822      	ldr	r0, [pc, #136]	@ (8001514 <MX_TIM2_Init+0x108>)
 800148c:	f002 f9b2 	bl	80037f4 <HAL_TIM_IC_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001496:	f7ff fc8b 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014a2:	f107 0310 	add.w	r3, r7, #16
 80014a6:	4619      	mov	r1, r3
 80014a8:	481a      	ldr	r0, [pc, #104]	@ (8001514 <MX_TIM2_Init+0x108>)
 80014aa:	f003 fa85 	bl	80049b8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80014b4:	f7ff fc7c 	bl	8000db0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014b8:	2300      	movs	r3, #0
 80014ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014bc:	2301      	movs	r3, #1
 80014be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014c8:	463b      	mov	r3, r7
 80014ca:	2200      	movs	r2, #0
 80014cc:	4619      	mov	r1, r3
 80014ce:	4811      	ldr	r0, [pc, #68]	@ (8001514 <MX_TIM2_Init+0x108>)
 80014d0:	f002 fbf4 	bl	8003cbc <HAL_TIM_IC_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80014da:	f7ff fc69 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014de:	463b      	mov	r3, r7
 80014e0:	2204      	movs	r2, #4
 80014e2:	4619      	mov	r1, r3
 80014e4:	480b      	ldr	r0, [pc, #44]	@ (8001514 <MX_TIM2_Init+0x108>)
 80014e6:	f002 fbe9 	bl	8003cbc <HAL_TIM_IC_ConfigChannel>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80014f0:	f7ff fc5e 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	2208      	movs	r2, #8
 80014f8:	4619      	mov	r1, r3
 80014fa:	4806      	ldr	r0, [pc, #24]	@ (8001514 <MX_TIM2_Init+0x108>)
 80014fc:	f002 fbde 	bl	8003cbc <HAL_TIM_IC_ConfigChannel>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8001506:	f7ff fc53 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	3728      	adds	r7, #40	@ 0x28
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200001a0 	.word	0x200001a0

08001518 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08e      	sub	sp, #56	@ 0x38
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	f107 0320 	add.w	r3, r7, #32
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001536:	1d3b      	adds	r3, r7, #4
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
 800153c:	605a      	str	r2, [r3, #4]
 800153e:	609a      	str	r2, [r3, #8]
 8001540:	60da      	str	r2, [r3, #12]
 8001542:	611a      	str	r2, [r3, #16]
 8001544:	615a      	str	r2, [r3, #20]
 8001546:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001548:	4b32      	ldr	r3, [pc, #200]	@ (8001614 <MX_TIM3_Init+0xfc>)
 800154a:	4a33      	ldr	r2, [pc, #204]	@ (8001618 <MX_TIM3_Init+0x100>)
 800154c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 800154e:	4b31      	ldr	r3, [pc, #196]	@ (8001614 <MX_TIM3_Init+0xfc>)
 8001550:	2263      	movs	r2, #99	@ 0x63
 8001552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b2f      	ldr	r3, [pc, #188]	@ (8001614 <MX_TIM3_Init+0xfc>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024-1;
 800155a:	4b2e      	ldr	r3, [pc, #184]	@ (8001614 <MX_TIM3_Init+0xfc>)
 800155c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001560:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001562:	4b2c      	ldr	r3, [pc, #176]	@ (8001614 <MX_TIM3_Init+0xfc>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <MX_TIM3_Init+0xfc>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800156e:	4829      	ldr	r0, [pc, #164]	@ (8001614 <MX_TIM3_Init+0xfc>)
 8001570:	f001 ff2a 	bl	80033c8 <HAL_TIM_Base_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800157a:	f7ff fc19 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800157e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001584:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001588:	4619      	mov	r1, r3
 800158a:	4822      	ldr	r0, [pc, #136]	@ (8001614 <MX_TIM3_Init+0xfc>)
 800158c:	f002 fcf4 	bl	8003f78 <HAL_TIM_ConfigClockSource>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001596:	f7ff fc0b 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800159a:	481e      	ldr	r0, [pc, #120]	@ (8001614 <MX_TIM3_Init+0xfc>)
 800159c:	f002 f820 	bl	80035e0 <HAL_TIM_PWM_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015a6:	f7ff fc03 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b2:	f107 0320 	add.w	r3, r7, #32
 80015b6:	4619      	mov	r1, r3
 80015b8:	4816      	ldr	r0, [pc, #88]	@ (8001614 <MX_TIM3_Init+0xfc>)
 80015ba:	f003 f9fd 	bl	80049b8 <HAL_TIMEx_MasterConfigSynchronization>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015c4:	f7ff fbf4 	bl	8000db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015c8:	2360      	movs	r3, #96	@ 0x60
 80015ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d0:	2300      	movs	r3, #0
 80015d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015d8:	1d3b      	adds	r3, r7, #4
 80015da:	2200      	movs	r2, #0
 80015dc:	4619      	mov	r1, r3
 80015de:	480d      	ldr	r0, [pc, #52]	@ (8001614 <MX_TIM3_Init+0xfc>)
 80015e0:	f002 fc08 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80015ea:	f7ff fbe1 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2204      	movs	r2, #4
 80015f2:	4619      	mov	r1, r3
 80015f4:	4807      	ldr	r0, [pc, #28]	@ (8001614 <MX_TIM3_Init+0xfc>)
 80015f6:	f002 fbfd 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001600:	f7ff fbd6 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001604:	4803      	ldr	r0, [pc, #12]	@ (8001614 <MX_TIM3_Init+0xfc>)
 8001606:	f000 f955 	bl	80018b4 <HAL_TIM_MspPostInit>

}
 800160a:	bf00      	nop
 800160c:	3738      	adds	r7, #56	@ 0x38
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200001e8 	.word	0x200001e8
 8001618:	40000400 	.word	0x40000400

0800161c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	@ 0x38
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	615a      	str	r2, [r3, #20]
 800164a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800164c:	4b2d      	ldr	r3, [pc, #180]	@ (8001704 <MX_TIM5_Init+0xe8>)
 800164e:	4a2e      	ldr	r2, [pc, #184]	@ (8001708 <MX_TIM5_Init+0xec>)
 8001650:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 2000-1;
 8001652:	4b2c      	ldr	r3, [pc, #176]	@ (8001704 <MX_TIM5_Init+0xe8>)
 8001654:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001658:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b2a      	ldr	r3, [pc, #168]	@ (8001704 <MX_TIM5_Init+0xe8>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 8001660:	4b28      	ldr	r3, [pc, #160]	@ (8001704 <MX_TIM5_Init+0xe8>)
 8001662:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001666:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001668:	4b26      	ldr	r3, [pc, #152]	@ (8001704 <MX_TIM5_Init+0xe8>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166e:	4b25      	ldr	r3, [pc, #148]	@ (8001704 <MX_TIM5_Init+0xe8>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001674:	4823      	ldr	r0, [pc, #140]	@ (8001704 <MX_TIM5_Init+0xe8>)
 8001676:	f001 fea7 	bl	80033c8 <HAL_TIM_Base_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001680:	f7ff fb96 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001684:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001688:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800168a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800168e:	4619      	mov	r1, r3
 8001690:	481c      	ldr	r0, [pc, #112]	@ (8001704 <MX_TIM5_Init+0xe8>)
 8001692:	f002 fc71 	bl	8003f78 <HAL_TIM_ConfigClockSource>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 800169c:	f7ff fb88 	bl	8000db0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80016a0:	4818      	ldr	r0, [pc, #96]	@ (8001704 <MX_TIM5_Init+0xe8>)
 80016a2:	f001 ff9d 	bl	80035e0 <HAL_TIM_PWM_Init>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 80016ac:	f7ff fb80 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016b8:	f107 0320 	add.w	r3, r7, #32
 80016bc:	4619      	mov	r1, r3
 80016be:	4811      	ldr	r0, [pc, #68]	@ (8001704 <MX_TIM5_Init+0xe8>)
 80016c0:	f003 f97a 	bl	80049b8 <HAL_TIMEx_MasterConfigSynchronization>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80016ca:	f7ff fb71 	bl	8000db0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016ce:	2360      	movs	r3, #96	@ 0x60
 80016d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	2204      	movs	r2, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	4807      	ldr	r0, [pc, #28]	@ (8001704 <MX_TIM5_Init+0xe8>)
 80016e6:	f002 fb85 	bl	8003df4 <HAL_TIM_PWM_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 80016f0:	f7ff fb5e 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80016f4:	4803      	ldr	r0, [pc, #12]	@ (8001704 <MX_TIM5_Init+0xe8>)
 80016f6:	f000 f8dd 	bl	80018b4 <HAL_TIM_MspPostInit>

}
 80016fa:	bf00      	nop
 80016fc:	3738      	adds	r7, #56	@ 0x38
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000230 	.word	0x20000230
 8001708:	40000c00 	.word	0x40000c00

0800170c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001710:	4b0e      	ldr	r3, [pc, #56]	@ (800174c <MX_TIM11_Init+0x40>)
 8001712:	4a0f      	ldr	r2, [pc, #60]	@ (8001750 <MX_TIM11_Init+0x44>)
 8001714:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 100-1;
 8001716:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <MX_TIM11_Init+0x40>)
 8001718:	2263      	movs	r2, #99	@ 0x63
 800171a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <MX_TIM11_Init+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <MX_TIM11_Init+0x40>)
 8001724:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001728:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172a:	4b08      	ldr	r3, [pc, #32]	@ (800174c <MX_TIM11_Init+0x40>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b06      	ldr	r3, [pc, #24]	@ (800174c <MX_TIM11_Init+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	@ (800174c <MX_TIM11_Init+0x40>)
 8001738:	f001 fe46 	bl	80033c8 <HAL_TIM_Base_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001742:	f7ff fb35 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20000278 	.word	0x20000278
 8001750:	40014800 	.word	0x40014800

08001754 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	@ 0x38
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001774:	d153      	bne.n	800181e <HAL_TIM_Base_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
 800177a:	4b48      	ldr	r3, [pc, #288]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4a47      	ldr	r2, [pc, #284]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 8001780:	f043 0301 	orr.w	r3, r3, #1
 8001784:	6413      	str	r3, [r2, #64]	@ 0x40
 8001786:	4b45      	ldr	r3, [pc, #276]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	623b      	str	r3, [r7, #32]
 8001790:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	61fb      	str	r3, [r7, #28]
 8001796:	4b41      	ldr	r3, [pc, #260]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a40      	ldr	r2, [pc, #256]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b3e      	ldr	r3, [pc, #248]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	61fb      	str	r3, [r7, #28]
 80017ac:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	4b3a      	ldr	r3, [pc, #232]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b6:	4a39      	ldr	r2, [pc, #228]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017be:	4b37      	ldr	r3, [pc, #220]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	61bb      	str	r3, [r7, #24]
 80017c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017ca:	2301      	movs	r3, #1
 80017cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d6:	2300      	movs	r3, #0
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017da:	2301      	movs	r3, #1
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	482e      	ldr	r0, [pc, #184]	@ (80018a0 <HAL_TIM_Base_MspInit+0x14c>)
 80017e6:	f000 ff6d 	bl	80026c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 80017ea:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	2302      	movs	r3, #2
 80017f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017fc:	2301      	movs	r3, #1
 80017fe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001804:	4619      	mov	r1, r3
 8001806:	4827      	ldr	r0, [pc, #156]	@ (80018a4 <HAL_TIM_Base_MspInit+0x150>)
 8001808:	f000 ff5c 	bl	80026c4 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800180c:	2200      	movs	r2, #0
 800180e:	2105      	movs	r1, #5
 8001810:	201c      	movs	r0, #28
 8001812:	f000 fb2b 	bl	8001e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001816:	201c      	movs	r0, #28
 8001818:	f000 fb44 	bl	8001ea4 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 800181c:	e03a      	b.n	8001894 <HAL_TIM_Base_MspInit+0x140>
  else if(tim_baseHandle->Instance==TIM3)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a21      	ldr	r2, [pc, #132]	@ (80018a8 <HAL_TIM_Base_MspInit+0x154>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d10e      	bne.n	8001846 <HAL_TIM_Base_MspInit+0xf2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
 800182c:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	4a1a      	ldr	r2, [pc, #104]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 8001832:	f043 0302 	orr.w	r3, r3, #2
 8001836:	6413      	str	r3, [r2, #64]	@ 0x40
 8001838:	4b18      	ldr	r3, [pc, #96]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 800183a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	617b      	str	r3, [r7, #20]
 8001842:	697b      	ldr	r3, [r7, #20]
}
 8001844:	e026      	b.n	8001894 <HAL_TIM_Base_MspInit+0x140>
  else if(tim_baseHandle->Instance==TIM5)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a18      	ldr	r2, [pc, #96]	@ (80018ac <HAL_TIM_Base_MspInit+0x158>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d10e      	bne.n	800186e <HAL_TIM_Base_MspInit+0x11a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	4a10      	ldr	r2, [pc, #64]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001860:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 8001862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	613b      	str	r3, [r7, #16]
 800186a:	693b      	ldr	r3, [r7, #16]
}
 800186c:	e012      	b.n	8001894 <HAL_TIM_Base_MspInit+0x140>
  else if(tim_baseHandle->Instance==TIM11)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a0f      	ldr	r2, [pc, #60]	@ (80018b0 <HAL_TIM_Base_MspInit+0x15c>)
 8001874:	4293      	cmp	r3, r2
 8001876:	d10d      	bne.n	8001894 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	4b07      	ldr	r3, [pc, #28]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 800187e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001880:	4a06      	ldr	r2, [pc, #24]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 8001882:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001886:	6453      	str	r3, [r2, #68]	@ 0x44
 8001888:	4b04      	ldr	r3, [pc, #16]	@ (800189c <HAL_TIM_Base_MspInit+0x148>)
 800188a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	bf00      	nop
 8001896:	3738      	adds	r7, #56	@ 0x38
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40020000 	.word	0x40020000
 80018a4:	40020400 	.word	0x40020400
 80018a8:	40000400 	.word	0x40000400
 80018ac:	40000c00 	.word	0x40000c00
 80018b0:	40014800 	.word	0x40014800

080018b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	@ 0x28
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a24      	ldr	r2, [pc, #144]	@ (8001964 <HAL_TIM_MspPostInit+0xb0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d11e      	bne.n	8001914 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
 80018da:	4b23      	ldr	r3, [pc, #140]	@ (8001968 <HAL_TIM_MspPostInit+0xb4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a22      	ldr	r2, [pc, #136]	@ (8001968 <HAL_TIM_MspPostInit+0xb4>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b20      	ldr	r3, [pc, #128]	@ (8001968 <HAL_TIM_MspPostInit+0xb4>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	613b      	str	r3, [r7, #16]
 80018f0:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018f2:	23c0      	movs	r3, #192	@ 0xc0
 80018f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001902:	2302      	movs	r3, #2
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	4817      	ldr	r0, [pc, #92]	@ (800196c <HAL_TIM_MspPostInit+0xb8>)
 800190e:	f000 fed9 	bl	80026c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001912:	e022      	b.n	800195a <HAL_TIM_MspPostInit+0xa6>
  else if(timHandle->Instance==TIM5)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a15      	ldr	r2, [pc, #84]	@ (8001970 <HAL_TIM_MspPostInit+0xbc>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d11d      	bne.n	800195a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <HAL_TIM_MspPostInit+0xb4>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a10      	ldr	r2, [pc, #64]	@ (8001968 <HAL_TIM_MspPostInit+0xb4>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_TIM_MspPostInit+0xb4>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800193a:	2302      	movs	r3, #2
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800194a:	2302      	movs	r3, #2
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4805      	ldr	r0, [pc, #20]	@ (800196c <HAL_TIM_MspPostInit+0xb8>)
 8001956:	f000 feb5 	bl	80026c4 <HAL_GPIO_Init>
}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	@ 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40000400 	.word	0x40000400
 8001968:	40023800 	.word	0x40023800
 800196c:	40020000 	.word	0x40020000
 8001970:	40000c00 	.word	0x40000c00

08001974 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart6_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <MX_USART2_UART_Init+0x4c>)
 800197a:	4a12      	ldr	r2, [pc, #72]	@ (80019c4 <MX_USART2_UART_Init+0x50>)
 800197c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800197e:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <MX_USART2_UART_Init+0x4c>)
 8001980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001986:	4b0e      	ldr	r3, [pc, #56]	@ (80019c0 <MX_USART2_UART_Init+0x4c>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800198c:	4b0c      	ldr	r3, [pc, #48]	@ (80019c0 <MX_USART2_UART_Init+0x4c>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001992:	4b0b      	ldr	r3, [pc, #44]	@ (80019c0 <MX_USART2_UART_Init+0x4c>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001998:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <MX_USART2_UART_Init+0x4c>)
 800199a:	220c      	movs	r2, #12
 800199c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800199e:	4b08      	ldr	r3, [pc, #32]	@ (80019c0 <MX_USART2_UART_Init+0x4c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019a4:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <MX_USART2_UART_Init+0x4c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019aa:	4805      	ldr	r0, [pc, #20]	@ (80019c0 <MX_USART2_UART_Init+0x4c>)
 80019ac:	f003 f886 	bl	8004abc <HAL_UART_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019b6:	f7ff f9fb 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ba:	bf00      	nop
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	200002c0 	.word	0x200002c0
 80019c4:	40004400 	.word	0x40004400

080019c8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80019cc:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <MX_USART6_UART_Init+0x4c>)
 80019ce:	4a12      	ldr	r2, [pc, #72]	@ (8001a18 <MX_USART6_UART_Init+0x50>)
 80019d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <MX_USART6_UART_Init+0x4c>)
 80019d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80019d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <MX_USART6_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <MX_USART6_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <MX_USART6_UART_Init+0x4c>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <MX_USART6_UART_Init+0x4c>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <MX_USART6_UART_Init+0x4c>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <MX_USART6_UART_Init+0x4c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019fe:	4805      	ldr	r0, [pc, #20]	@ (8001a14 <MX_USART6_UART_Init+0x4c>)
 8001a00:	f003 f85c 	bl	8004abc <HAL_UART_Init>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a0a:	f7ff f9d1 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000308 	.word	0x20000308
 8001a18:	40011400 	.word	0x40011400

08001a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b08c      	sub	sp, #48	@ 0x30
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 031c 	add.w	r3, r7, #28
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a61      	ldr	r2, [pc, #388]	@ (8001bc0 <HAL_UART_MspInit+0x1a4>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d134      	bne.n	8001aa8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61bb      	str	r3, [r7, #24]
 8001a42:	4b60      	ldr	r3, [pc, #384]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	4a5f      	ldr	r2, [pc, #380]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a56:	61bb      	str	r3, [r7, #24]
 8001a58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	4b59      	ldr	r3, [pc, #356]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a62:	4a58      	ldr	r2, [pc, #352]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a6a:	4b56      	ldr	r3, [pc, #344]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a76:	230c      	movs	r3, #12
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a86:	2307      	movs	r3, #7
 8001a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	484d      	ldr	r0, [pc, #308]	@ (8001bc8 <HAL_UART_MspInit+0x1ac>)
 8001a92:	f000 fe17 	bl	80026c4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	2105      	movs	r1, #5
 8001a9a:	2026      	movs	r0, #38	@ 0x26
 8001a9c:	f000 f9e6 	bl	8001e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aa0:	2026      	movs	r0, #38	@ 0x26
 8001aa2:	f000 f9ff 	bl	8001ea4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8001aa6:	e086      	b.n	8001bb6 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART6)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a47      	ldr	r2, [pc, #284]	@ (8001bcc <HAL_UART_MspInit+0x1b0>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	f040 8081 	bne.w	8001bb6 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	613b      	str	r3, [r7, #16]
 8001ab8:	4b42      	ldr	r3, [pc, #264]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abc:	4a41      	ldr	r2, [pc, #260]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001abe:	f043 0320 	orr.w	r3, r3, #32
 8001ac2:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ac4:	4b3f      	ldr	r3, [pc, #252]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac8:	f003 0320 	and.w	r3, r3, #32
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60fb      	str	r3, [r7, #12]
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad8:	4a3a      	ldr	r2, [pc, #232]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001ada:	f043 0304 	orr.w	r3, r3, #4
 8001ade:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ae0:	4b38      	ldr	r3, [pc, #224]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
 8001af0:	4b34      	ldr	r3, [pc, #208]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af4:	4a33      	ldr	r2, [pc, #204]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afc:	4b31      	ldr	r3, [pc, #196]	@ (8001bc4 <HAL_UART_MspInit+0x1a8>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60bb      	str	r3, [r7, #8]
 8001b06:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b08:	2340      	movs	r3, #64	@ 0x40
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b18:	2308      	movs	r3, #8
 8001b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	482b      	ldr	r0, [pc, #172]	@ (8001bd0 <HAL_UART_MspInit+0x1b4>)
 8001b24:	f000 fdce 	bl	80026c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001b28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4820      	ldr	r0, [pc, #128]	@ (8001bc8 <HAL_UART_MspInit+0x1ac>)
 8001b46:	f000 fdbd 	bl	80026c4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001b4a:	4b22      	ldr	r3, [pc, #136]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b4c:	4a22      	ldr	r2, [pc, #136]	@ (8001bd8 <HAL_UART_MspInit+0x1bc>)
 8001b4e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001b50:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b52:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8001b56:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b58:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b64:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b66:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b6a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b72:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b7e:	4b15      	ldr	r3, [pc, #84]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b84:	4b13      	ldr	r3, [pc, #76]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001b8a:	4812      	ldr	r0, [pc, #72]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b8c:	f000 f998 	bl	8001ec0 <HAL_DMA_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8001b96:	f7ff f90b 	bl	8000db0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001b9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ba0:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd4 <HAL_UART_MspInit+0x1b8>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2105      	movs	r1, #5
 8001baa:	2047      	movs	r0, #71	@ 0x47
 8001bac:	f000 f95e 	bl	8001e6c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001bb0:	2047      	movs	r0, #71	@ 0x47
 8001bb2:	f000 f977 	bl	8001ea4 <HAL_NVIC_EnableIRQ>
}
 8001bb6:	bf00      	nop
 8001bb8:	3730      	adds	r7, #48	@ 0x30
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40004400 	.word	0x40004400
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020000 	.word	0x40020000
 8001bcc:	40011400 	.word	0x40011400
 8001bd0:	40020800 	.word	0x40020800
 8001bd4:	20000350 	.word	0x20000350
 8001bd8:	40026428 	.word	0x40026428

08001bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001be0:	f7ff fc02 	bl	80013e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be4:	480c      	ldr	r0, [pc, #48]	@ (8001c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001be6:	490d      	ldr	r1, [pc, #52]	@ (8001c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bec:	e002      	b.n	8001bf4 <LoopCopyDataInit>

08001bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf2:	3304      	adds	r3, #4

08001bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf8:	d3f9      	bcc.n	8001bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c00:	e001      	b.n	8001c06 <LoopFillZerobss>

08001c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c04:	3204      	adds	r2, #4

08001c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c08:	d3fb      	bcc.n	8001c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0a:	f006 ff0b 	bl	8008a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c0e:	f7ff f801 	bl	8000c14 <main>
  bx  lr    
 8001c12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c1c:	200000f0 	.word	0x200000f0
  ldr r2, =_sidata
 8001c20:	08008c88 	.word	0x08008c88
  ldr r2, =_sbss
 8001c24:	200000f0 	.word	0x200000f0
  ldr r4, =_ebss
 8001c28:	20004edc 	.word	0x20004edc

08001c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c2c:	e7fe      	b.n	8001c2c <ADC_IRQHandler>
	...

08001c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <HAL_Init+0x40>)
 8001c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_Init+0x40>)
 8001c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <HAL_Init+0x40>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a07      	ldr	r2, [pc, #28]	@ (8001c70 <HAL_Init+0x40>)
 8001c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c58:	2003      	movs	r0, #3
 8001c5a:	f000 f8fc 	bl	8001e56 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c5e:	200f      	movs	r0, #15
 8001c60:	f7ff faf8 	bl	8001254 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c64:	f7ff faca 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023c00 	.word	0x40023c00

08001c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_IncTick+0x20>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	20000098 	.word	0x20000098
 8001c98:	200003b0 	.word	0x200003b0

08001c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <HAL_GetTick+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	200003b0 	.word	0x200003b0

08001cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff ffee 	bl	8001c9c <HAL_GetTick>
 8001cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d005      	beq.n	8001cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <HAL_Delay+0x44>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cda:	bf00      	nop
 8001cdc:	f7ff ffde 	bl	8001c9c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8f7      	bhi.n	8001cdc <HAL_Delay+0x28>
  {
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000098 	.word	0x20000098

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db0b      	blt.n	8001d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4907      	ldr	r1, [pc, #28]	@ (8001d98 <__NVIC_EnableIRQ+0x38>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	@ (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	@ (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	@ 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	@ 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5e:	6878      	ldr	r0, [r7, #4]
 8001e60:	f7ff ff4c 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7e:	f7ff ff61 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001e82:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	68b9      	ldr	r1, [r7, #8]
 8001e88:	6978      	ldr	r0, [r7, #20]
 8001e8a:	f7ff ffb1 	bl	8001df0 <NVIC_EncodePriority>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ff80 	bl	8001d9c <__NVIC_SetPriority>
}
 8001e9c:	bf00      	nop
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff54 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001eb8:	bf00      	nop
 8001eba:	3708      	adds	r7, #8
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff fee6 	bl	8001c9c <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e099      	b.n	8002010 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efc:	e00f      	b.n	8001f1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001efe:	f7ff fecd 	bl	8001c9c <HAL_GetTick>
 8001f02:	4602      	mov	r2, r0
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	2b05      	cmp	r3, #5
 8001f0a:	d908      	bls.n	8001f1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2203      	movs	r2, #3
 8001f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e078      	b.n	8002010 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d1e8      	bne.n	8001efe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	4b38      	ldr	r3, [pc, #224]	@ (8002018 <HAL_DMA_Init+0x158>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685a      	ldr	r2, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f6a:	697a      	ldr	r2, [r7, #20]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d107      	bne.n	8001f88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f80:	4313      	orrs	r3, r2
 8001f82:	697a      	ldr	r2, [r7, #20]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	697a      	ldr	r2, [r7, #20]
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
 8001f96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f023 0307 	bic.w	r3, r3, #7
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa4:	697a      	ldr	r2, [r7, #20]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d117      	bne.n	8001fe2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00e      	beq.n	8001fe2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 fb01 	bl	80025cc <DMA_CheckFifoParam>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2240      	movs	r2, #64	@ 0x40
 8001fd4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e016      	b.n	8002010 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	697a      	ldr	r2, [r7, #20]
 8001fe8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 fab8 	bl	8002560 <DMA_CalcBaseAndBitshift>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ff8:	223f      	movs	r2, #63	@ 0x3f
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	f010803f 	.word	0xf010803f

0800201c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002032:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_DMA_Start_IT+0x26>
 800203e:	2302      	movs	r3, #2
 8002040:	e040      	b.n	80020c4 <HAL_DMA_Start_IT+0xa8>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b01      	cmp	r3, #1
 8002054:	d12f      	bne.n	80020b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2202      	movs	r2, #2
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	68b9      	ldr	r1, [r7, #8]
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f000 fa4a 	bl	8002504 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002074:	223f      	movs	r2, #63	@ 0x3f
 8002076:	409a      	lsls	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0216 	orr.w	r2, r2, #22
 800208a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002090:	2b00      	cmp	r3, #0
 8002092:	d007      	beq.n	80020a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0208 	orr.w	r2, r2, #8
 80020a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e005      	b.n	80020c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80020be:	2302      	movs	r3, #2
 80020c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80020da:	f7ff fddf 	bl	8001c9c <HAL_GetTick>
 80020de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d008      	beq.n	80020fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2280      	movs	r2, #128	@ 0x80
 80020f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e052      	b.n	80021a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f022 0216 	bic.w	r2, r2, #22
 800210c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	695a      	ldr	r2, [r3, #20]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800211c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002122:	2b00      	cmp	r3, #0
 8002124:	d103      	bne.n	800212e <HAL_DMA_Abort+0x62>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212a:	2b00      	cmp	r3, #0
 800212c:	d007      	beq.n	800213e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0208 	bic.w	r2, r2, #8
 800213c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800214e:	e013      	b.n	8002178 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002150:	f7ff fda4 	bl	8001c9c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b05      	cmp	r3, #5
 800215c:	d90c      	bls.n	8002178 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2220      	movs	r2, #32
 8002162:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2203      	movs	r2, #3
 8002168:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e015      	b.n	80021a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0301 	and.w	r3, r3, #1
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1e4      	bne.n	8002150 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800218a:	223f      	movs	r2, #63	@ 0x3f
 800218c:	409a      	lsls	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d004      	beq.n	80021ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2280      	movs	r2, #128	@ 0x80
 80021c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e00c      	b.n	80021e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2205      	movs	r2, #5
 80021ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0201 	bic.w	r2, r2, #1
 80021e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002438 <HAL_DMA_IRQHandler+0x248>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a8e      	ldr	r2, [pc, #568]	@ (800243c <HAL_DMA_IRQHandler+0x24c>)
 8002202:	fba2 2303 	umull	r2, r3, r2, r3
 8002206:	0a9b      	lsrs	r3, r3, #10
 8002208:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800221a:	2208      	movs	r2, #8
 800221c:	409a      	lsls	r2, r3
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4013      	ands	r3, r2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d01a      	beq.n	800225c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0304 	and.w	r3, r3, #4
 8002230:	2b00      	cmp	r3, #0
 8002232:	d013      	beq.n	800225c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f022 0204 	bic.w	r2, r2, #4
 8002242:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002248:	2208      	movs	r2, #8
 800224a:	409a      	lsls	r2, r3
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002260:	2201      	movs	r2, #1
 8002262:	409a      	lsls	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4013      	ands	r3, r2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d012      	beq.n	8002292 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00b      	beq.n	8002292 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800227e:	2201      	movs	r2, #1
 8002280:	409a      	lsls	r2, r3
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800228a:	f043 0202 	orr.w	r2, r3, #2
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002296:	2204      	movs	r2, #4
 8002298:	409a      	lsls	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d012      	beq.n	80022c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00b      	beq.n	80022c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b4:	2204      	movs	r2, #4
 80022b6:	409a      	lsls	r2, r3
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c0:	f043 0204 	orr.w	r2, r3, #4
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022cc:	2210      	movs	r2, #16
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d043      	beq.n	8002360 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d03c      	beq.n	8002360 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022ea:	2210      	movs	r2, #16
 80022ec:	409a      	lsls	r2, r3
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d018      	beq.n	8002332 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d108      	bne.n	8002320 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d024      	beq.n	8002360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	4798      	blx	r3
 800231e:	e01f      	b.n	8002360 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01b      	beq.n	8002360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800232c:	6878      	ldr	r0, [r7, #4]
 800232e:	4798      	blx	r3
 8002330:	e016      	b.n	8002360 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f022 0208 	bic.w	r2, r2, #8
 800234e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002364:	2220      	movs	r2, #32
 8002366:	409a      	lsls	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4013      	ands	r3, r2
 800236c:	2b00      	cmp	r3, #0
 800236e:	f000 808f 	beq.w	8002490 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0310 	and.w	r3, r3, #16
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 8087 	beq.w	8002490 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002386:	2220      	movs	r2, #32
 8002388:	409a      	lsls	r2, r3
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002394:	b2db      	uxtb	r3, r3
 8002396:	2b05      	cmp	r3, #5
 8002398:	d136      	bne.n	8002408 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f022 0216 	bic.w	r2, r2, #22
 80023a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	695a      	ldr	r2, [r3, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80023b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d103      	bne.n	80023ca <HAL_DMA_IRQHandler+0x1da>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d007      	beq.n	80023da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0208 	bic.w	r2, r2, #8
 80023d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023de:	223f      	movs	r2, #63	@ 0x3f
 80023e0:	409a      	lsls	r2, r3
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d07e      	beq.n	80024fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	4798      	blx	r3
        }
        return;
 8002406:	e079      	b.n	80024fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d01d      	beq.n	8002452 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10d      	bne.n	8002440 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002428:	2b00      	cmp	r3, #0
 800242a:	d031      	beq.n	8002490 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
 8002434:	e02c      	b.n	8002490 <HAL_DMA_IRQHandler+0x2a0>
 8002436:	bf00      	nop
 8002438:	20000090 	.word	0x20000090
 800243c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002444:	2b00      	cmp	r3, #0
 8002446:	d023      	beq.n	8002490 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	4798      	blx	r3
 8002450:	e01e      	b.n	8002490 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10f      	bne.n	8002480 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f022 0210 	bic.w	r2, r2, #16
 800246e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002494:	2b00      	cmp	r3, #0
 8002496:	d032      	beq.n	80024fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d022      	beq.n	80024ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2205      	movs	r2, #5
 80024a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	3301      	adds	r3, #1
 80024c0:	60bb      	str	r3, [r7, #8]
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d307      	bcc.n	80024d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f2      	bne.n	80024bc <HAL_DMA_IRQHandler+0x2cc>
 80024d6:	e000      	b.n	80024da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80024d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d005      	beq.n	80024fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	4798      	blx	r3
 80024fa:	e000      	b.n	80024fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80024fc:	bf00      	nop
    }
  }
}
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002520:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b40      	cmp	r3, #64	@ 0x40
 8002530:	d108      	bne.n	8002544 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002542:	e007      	b.n	8002554 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68ba      	ldr	r2, [r7, #8]
 800254a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	60da      	str	r2, [r3, #12]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	b2db      	uxtb	r3, r3
 800256e:	3b10      	subs	r3, #16
 8002570:	4a14      	ldr	r2, [pc, #80]	@ (80025c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002572:	fba2 2303 	umull	r2, r3, r2, r3
 8002576:	091b      	lsrs	r3, r3, #4
 8002578:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800257a:	4a13      	ldr	r2, [pc, #76]	@ (80025c8 <DMA_CalcBaseAndBitshift+0x68>)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4413      	add	r3, r2
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b03      	cmp	r3, #3
 800258c:	d909      	bls.n	80025a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002596:	f023 0303 	bic.w	r3, r3, #3
 800259a:	1d1a      	adds	r2, r3, #4
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	659a      	str	r2, [r3, #88]	@ 0x58
 80025a0:	e007      	b.n	80025b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	aaaaaaab 	.word	0xaaaaaaab
 80025c8:	08008c70 	.word	0x08008c70

080025cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d11f      	bne.n	8002626 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d856      	bhi.n	800269a <DMA_CheckFifoParam+0xce>
 80025ec:	a201      	add	r2, pc, #4	@ (adr r2, 80025f4 <DMA_CheckFifoParam+0x28>)
 80025ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f2:	bf00      	nop
 80025f4:	08002605 	.word	0x08002605
 80025f8:	08002617 	.word	0x08002617
 80025fc:	08002605 	.word	0x08002605
 8002600:	0800269b 	.word	0x0800269b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d046      	beq.n	800269e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002614:	e043      	b.n	800269e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800261a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800261e:	d140      	bne.n	80026a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002624:	e03d      	b.n	80026a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	699b      	ldr	r3, [r3, #24]
 800262a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800262e:	d121      	bne.n	8002674 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	2b03      	cmp	r3, #3
 8002634:	d837      	bhi.n	80026a6 <DMA_CheckFifoParam+0xda>
 8002636:	a201      	add	r2, pc, #4	@ (adr r2, 800263c <DMA_CheckFifoParam+0x70>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	0800264d 	.word	0x0800264d
 8002640:	08002653 	.word	0x08002653
 8002644:	0800264d 	.word	0x0800264d
 8002648:	08002665 	.word	0x08002665
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      break;
 8002650:	e030      	b.n	80026b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002656:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d025      	beq.n	80026aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002662:	e022      	b.n	80026aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002668:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800266c:	d11f      	bne.n	80026ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002672:	e01c      	b.n	80026ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d903      	bls.n	8002682 <DMA_CheckFifoParam+0xb6>
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	2b03      	cmp	r3, #3
 800267e:	d003      	beq.n	8002688 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002680:	e018      	b.n	80026b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	73fb      	strb	r3, [r7, #15]
      break;
 8002686:	e015      	b.n	80026b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d00e      	beq.n	80026b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      break;
 8002698:	e00b      	b.n	80026b2 <DMA_CheckFifoParam+0xe6>
      break;
 800269a:	bf00      	nop
 800269c:	e00a      	b.n	80026b4 <DMA_CheckFifoParam+0xe8>
      break;
 800269e:	bf00      	nop
 80026a0:	e008      	b.n	80026b4 <DMA_CheckFifoParam+0xe8>
      break;
 80026a2:	bf00      	nop
 80026a4:	e006      	b.n	80026b4 <DMA_CheckFifoParam+0xe8>
      break;
 80026a6:	bf00      	nop
 80026a8:	e004      	b.n	80026b4 <DMA_CheckFifoParam+0xe8>
      break;
 80026aa:	bf00      	nop
 80026ac:	e002      	b.n	80026b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80026ae:	bf00      	nop
 80026b0:	e000      	b.n	80026b4 <DMA_CheckFifoParam+0xe8>
      break;
 80026b2:	bf00      	nop
    }
  } 
  
  return status; 
 80026b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3714      	adds	r7, #20
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop

080026c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b089      	sub	sp, #36	@ 0x24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026da:	2300      	movs	r3, #0
 80026dc:	61fb      	str	r3, [r7, #28]
 80026de:	e159      	b.n	8002994 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026e0:	2201      	movs	r2, #1
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	fa02 f303 	lsl.w	r3, r2, r3
 80026e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4013      	ands	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026f4:	693a      	ldr	r2, [r7, #16]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	f040 8148 	bne.w	800298e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b01      	cmp	r3, #1
 8002708:	d005      	beq.n	8002716 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002712:	2b02      	cmp	r3, #2
 8002714:	d130      	bne.n	8002778 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	2203      	movs	r2, #3
 8002722:	fa02 f303 	lsl.w	r3, r2, r3
 8002726:	43db      	mvns	r3, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4013      	ands	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	68da      	ldr	r2, [r3, #12]
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800274c:	2201      	movs	r2, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	091b      	lsrs	r3, r3, #4
 8002762:	f003 0201 	and.w	r2, r3, #1
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f003 0303 	and.w	r3, r3, #3
 8002780:	2b03      	cmp	r3, #3
 8002782:	d017      	beq.n	80027b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	2203      	movs	r2, #3
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d123      	bne.n	8002808 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	08da      	lsrs	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3208      	adds	r2, #8
 80027c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	220f      	movs	r2, #15
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0307 	and.w	r3, r3, #7
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	fa02 f303 	lsl.w	r3, r2, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	08da      	lsrs	r2, r3, #3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3208      	adds	r2, #8
 8002802:	69b9      	ldr	r1, [r7, #24]
 8002804:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	2203      	movs	r2, #3
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f003 0203 	and.w	r2, r3, #3
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80a2 	beq.w	800298e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	4b57      	ldr	r3, [pc, #348]	@ (80029ac <HAL_GPIO_Init+0x2e8>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	4a56      	ldr	r2, [pc, #344]	@ (80029ac <HAL_GPIO_Init+0x2e8>)
 8002854:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002858:	6453      	str	r3, [r2, #68]	@ 0x44
 800285a:	4b54      	ldr	r3, [pc, #336]	@ (80029ac <HAL_GPIO_Init+0x2e8>)
 800285c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002866:	4a52      	ldr	r2, [pc, #328]	@ (80029b0 <HAL_GPIO_Init+0x2ec>)
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	089b      	lsrs	r3, r3, #2
 800286c:	3302      	adds	r3, #2
 800286e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f003 0303 	and.w	r3, r3, #3
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	220f      	movs	r2, #15
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43db      	mvns	r3, r3
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	4013      	ands	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a49      	ldr	r2, [pc, #292]	@ (80029b4 <HAL_GPIO_Init+0x2f0>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d019      	beq.n	80028c6 <HAL_GPIO_Init+0x202>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a48      	ldr	r2, [pc, #288]	@ (80029b8 <HAL_GPIO_Init+0x2f4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_GPIO_Init+0x1fe>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a47      	ldr	r2, [pc, #284]	@ (80029bc <HAL_GPIO_Init+0x2f8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00d      	beq.n	80028be <HAL_GPIO_Init+0x1fa>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a46      	ldr	r2, [pc, #280]	@ (80029c0 <HAL_GPIO_Init+0x2fc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <HAL_GPIO_Init+0x1f6>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a45      	ldr	r2, [pc, #276]	@ (80029c4 <HAL_GPIO_Init+0x300>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d101      	bne.n	80028b6 <HAL_GPIO_Init+0x1f2>
 80028b2:	2304      	movs	r3, #4
 80028b4:	e008      	b.n	80028c8 <HAL_GPIO_Init+0x204>
 80028b6:	2307      	movs	r3, #7
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_Init+0x204>
 80028ba:	2303      	movs	r3, #3
 80028bc:	e004      	b.n	80028c8 <HAL_GPIO_Init+0x204>
 80028be:	2302      	movs	r3, #2
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_Init+0x204>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_GPIO_Init+0x204>
 80028c6:	2300      	movs	r3, #0
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	f002 0203 	and.w	r2, r2, #3
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	4093      	lsls	r3, r2
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d8:	4935      	ldr	r1, [pc, #212]	@ (80029b0 <HAL_GPIO_Init+0x2ec>)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	3302      	adds	r3, #2
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028e6:	4b38      	ldr	r3, [pc, #224]	@ (80029c8 <HAL_GPIO_Init+0x304>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800290a:	4a2f      	ldr	r2, [pc, #188]	@ (80029c8 <HAL_GPIO_Init+0x304>)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002910:	4b2d      	ldr	r3, [pc, #180]	@ (80029c8 <HAL_GPIO_Init+0x304>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002934:	4a24      	ldr	r2, [pc, #144]	@ (80029c8 <HAL_GPIO_Init+0x304>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800293a:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <HAL_GPIO_Init+0x304>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800295e:	4a1a      	ldr	r2, [pc, #104]	@ (80029c8 <HAL_GPIO_Init+0x304>)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002964:	4b18      	ldr	r3, [pc, #96]	@ (80029c8 <HAL_GPIO_Init+0x304>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002988:	4a0f      	ldr	r2, [pc, #60]	@ (80029c8 <HAL_GPIO_Init+0x304>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3301      	adds	r3, #1
 8002992:	61fb      	str	r3, [r7, #28]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	2b0f      	cmp	r3, #15
 8002998:	f67f aea2 	bls.w	80026e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3724      	adds	r7, #36	@ 0x24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40013800 	.word	0x40013800
 80029b4:	40020000 	.word	0x40020000
 80029b8:	40020400 	.word	0x40020400
 80029bc:	40020800 	.word	0x40020800
 80029c0:	40020c00 	.word	0x40020c00
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40013c00 	.word	0x40013c00

080029cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	460b      	mov	r3, r1
 80029d6:	807b      	strh	r3, [r7, #2]
 80029d8:	4613      	mov	r3, r2
 80029da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029dc:	787b      	ldrb	r3, [r7, #1]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029e2:	887a      	ldrh	r2, [r7, #2]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029e8:	e003      	b.n	80029f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029ea:	887b      	ldrh	r3, [r7, #2]
 80029ec:	041a      	lsls	r2, r3, #16
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	619a      	str	r2, [r3, #24]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b085      	sub	sp, #20
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
 8002a06:	460b      	mov	r3, r1
 8002a08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002a10:	887a      	ldrh	r2, [r7, #2]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4013      	ands	r3, r2
 8002a16:	041a      	lsls	r2, r3, #16
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	887b      	ldrh	r3, [r7, #2]
 8002a1e:	400b      	ands	r3, r1
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	619a      	str	r2, [r3, #24]
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
	...

08002a34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b086      	sub	sp, #24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e267      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d075      	beq.n	8002b3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a52:	4b88      	ldr	r3, [pc, #544]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d00c      	beq.n	8002a78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5e:	4b85      	ldr	r3, [pc, #532]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d112      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a6a:	4b82      	ldr	r3, [pc, #520]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a76:	d10b      	bne.n	8002a90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a78:	4b7e      	ldr	r3, [pc, #504]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d05b      	beq.n	8002b3c <HAL_RCC_OscConfig+0x108>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d157      	bne.n	8002b3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e242      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a98:	d106      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x74>
 8002a9a:	4b76      	ldr	r3, [pc, #472]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a75      	ldr	r2, [pc, #468]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e01d      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0x98>
 8002ab2:	4b70      	ldr	r3, [pc, #448]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6f      	ldr	r2, [pc, #444]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b6d      	ldr	r3, [pc, #436]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6c      	ldr	r2, [pc, #432]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0xb0>
 8002acc:	4b69      	ldr	r3, [pc, #420]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a68      	ldr	r2, [pc, #416]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b66      	ldr	r3, [pc, #408]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a65      	ldr	r2, [pc, #404]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff f8d6 	bl	8001c9c <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002af4:	f7ff f8d2 	bl	8001c9c <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	@ 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e207      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b5b      	ldr	r3, [pc, #364]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0xc0>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff f8c2 	bl	8001c9c <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff f8be 	bl	8001c9c <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	@ 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1f3      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	4b51      	ldr	r3, [pc, #324]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0xe8>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b56:	4b47      	ldr	r3, [pc, #284]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d11c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b62:	4b44      	ldr	r3, [pc, #272]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	4b41      	ldr	r3, [pc, #260]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1c7      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b3b      	ldr	r3, [pc, #236]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4937      	ldr	r1, [pc, #220]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	e03a      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba4:	4b34      	ldr	r3, [pc, #208]	@ (8002c78 <HAL_RCC_OscConfig+0x244>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002baa:	f7ff f877 	bl	8001c9c <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7ff f873 	bl	8001c9c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1a8      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b28      	ldr	r3, [pc, #160]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691b      	ldr	r3, [r3, #16]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4925      	ldr	r1, [pc, #148]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	4b24      	ldr	r3, [pc, #144]	@ (8002c78 <HAL_RCC_OscConfig+0x244>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7ff f856 	bl	8001c9c <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7ff f852 	bl	8001c9c <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e187      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	4b1b      	ldr	r3, [pc, #108]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d036      	beq.n	8002c8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d016      	beq.n	8002c54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <HAL_RCC_OscConfig+0x248>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2c:	f7ff f836 	bl	8001c9c <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c34:	f7ff f832 	bl	8001c9c <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e167      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <HAL_RCC_OscConfig+0x240>)
 8002c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x200>
 8002c52:	e01b      	b.n	8002c8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c54:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_RCC_OscConfig+0x248>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c5a:	f7ff f81f 	bl	8001c9c <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c60:	e00e      	b.n	8002c80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002c62:	f7ff f81b 	bl	8001c9c <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d907      	bls.n	8002c80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e150      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
 8002c74:	40023800 	.word	0x40023800
 8002c78:	42470000 	.word	0x42470000
 8002c7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c80:	4b88      	ldr	r3, [pc, #544]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1ea      	bne.n	8002c62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0304 	and.w	r3, r3, #4
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8097 	beq.w	8002dc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c9e:	4b81      	ldr	r3, [pc, #516]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10f      	bne.n	8002cca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002caa:	2300      	movs	r3, #0
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	4b7d      	ldr	r3, [pc, #500]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002cba:	4b7a      	ldr	r3, [pc, #488]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	60bb      	str	r3, [r7, #8]
 8002cc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cca:	4b77      	ldr	r3, [pc, #476]	@ (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d118      	bne.n	8002d08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cd6:	4b74      	ldr	r3, [pc, #464]	@ (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a73      	ldr	r2, [pc, #460]	@ (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce2:	f7fe ffdb 	bl	8001c9c <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cea:	f7fe ffd7 	bl	8001c9c <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e10c      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfc:	4b6a      	ldr	r3, [pc, #424]	@ (8002ea8 <HAL_RCC_OscConfig+0x474>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d0f0      	beq.n	8002cea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d106      	bne.n	8002d1e <HAL_RCC_OscConfig+0x2ea>
 8002d10:	4b64      	ldr	r3, [pc, #400]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d14:	4a63      	ldr	r2, [pc, #396]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d1c:	e01c      	b.n	8002d58 <HAL_RCC_OscConfig+0x324>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d10c      	bne.n	8002d40 <HAL_RCC_OscConfig+0x30c>
 8002d26:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2a:	4a5e      	ldr	r2, [pc, #376]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d2c:	f043 0304 	orr.w	r3, r3, #4
 8002d30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d32:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d36:	4a5b      	ldr	r2, [pc, #364]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d3e:	e00b      	b.n	8002d58 <HAL_RCC_OscConfig+0x324>
 8002d40:	4b58      	ldr	r3, [pc, #352]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d44:	4a57      	ldr	r2, [pc, #348]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d46:	f023 0301 	bic.w	r3, r3, #1
 8002d4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d4c:	4b55      	ldr	r3, [pc, #340]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d50:	4a54      	ldr	r2, [pc, #336]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d52:	f023 0304 	bic.w	r3, r3, #4
 8002d56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d015      	beq.n	8002d8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe ff9c 	bl	8001c9c <HAL_GetTick>
 8002d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d66:	e00a      	b.n	8002d7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d68:	f7fe ff98 	bl	8001c9c <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d901      	bls.n	8002d7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d7a:	2303      	movs	r3, #3
 8002d7c:	e0cb      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7e:	4b49      	ldr	r3, [pc, #292]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d82:	f003 0302 	and.w	r3, r3, #2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d0ee      	beq.n	8002d68 <HAL_RCC_OscConfig+0x334>
 8002d8a:	e014      	b.n	8002db6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d8c:	f7fe ff86 	bl	8001c9c <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d92:	e00a      	b.n	8002daa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d94:	f7fe ff82 	bl	8001c9c <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d901      	bls.n	8002daa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002da6:	2303      	movs	r3, #3
 8002da8:	e0b5      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002daa:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	f003 0302 	and.w	r3, r3, #2
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1ee      	bne.n	8002d94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002db6:	7dfb      	ldrb	r3, [r7, #23]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d105      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dbc:	4b39      	ldr	r3, [pc, #228]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dc0:	4a38      	ldr	r2, [pc, #224]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80a1 	beq.w	8002f14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002dd2:	4b34      	ldr	r3, [pc, #208]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
 8002dda:	2b08      	cmp	r3, #8
 8002ddc:	d05c      	beq.n	8002e98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d141      	bne.n	8002e6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002de6:	4b31      	ldr	r3, [pc, #196]	@ (8002eac <HAL_RCC_OscConfig+0x478>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dec:	f7fe ff56 	bl	8001c9c <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fe ff52 	bl	8001c9c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e087      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e06:	4b27      	ldr	r3, [pc, #156]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1f0      	bne.n	8002df4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69da      	ldr	r2, [r3, #28]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	019b      	lsls	r3, r3, #6
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	041b      	lsls	r3, r3, #16
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	061b      	lsls	r3, r3, #24
 8002e36:	491b      	ldr	r1, [pc, #108]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002eac <HAL_RCC_OscConfig+0x478>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e42:	f7fe ff2b 	bl	8001c9c <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e4a:	f7fe ff27 	bl	8001c9c <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e05c      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e5c:	4b11      	ldr	r3, [pc, #68]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x416>
 8002e68:	e054      	b.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e6a:	4b10      	ldr	r3, [pc, #64]	@ (8002eac <HAL_RCC_OscConfig+0x478>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e70:	f7fe ff14 	bl	8001c9c <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e76:	e008      	b.n	8002e8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e78:	f7fe ff10 	bl	8001c9c <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d901      	bls.n	8002e8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e045      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ea4 <HAL_RCC_OscConfig+0x470>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f0      	bne.n	8002e78 <HAL_RCC_OscConfig+0x444>
 8002e96:	e03d      	b.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d107      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e038      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
 8002ea4:	40023800 	.word	0x40023800
 8002ea8:	40007000 	.word	0x40007000
 8002eac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_RCC_OscConfig+0x4ec>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d028      	beq.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d121      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d11a      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ee6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d111      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d107      	bne.n	8002f10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40023800 	.word	0x40023800

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0cc      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b68      	ldr	r3, [pc, #416]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d90c      	bls.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b65      	ldr	r3, [pc, #404]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4e:	4b63      	ldr	r3, [pc, #396]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	683a      	ldr	r2, [r7, #0]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d001      	beq.n	8002f60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0b8      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d020      	beq.n	8002fae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f78:	4b59      	ldr	r3, [pc, #356]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0308 	and.w	r3, r3, #8
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d005      	beq.n	8002f9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f90:	4b53      	ldr	r3, [pc, #332]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	4a52      	ldr	r2, [pc, #328]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f9c:	4b50      	ldr	r3, [pc, #320]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	494d      	ldr	r1, [pc, #308]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d044      	beq.n	8003044 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	4b47      	ldr	r3, [pc, #284]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d119      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e07f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d003      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d107      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe2:	4b3f      	ldr	r3, [pc, #252]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e067      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003002:	4b37      	ldr	r3, [pc, #220]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	f023 0203 	bic.w	r2, r3, #3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	4934      	ldr	r1, [pc, #208]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003010:	4313      	orrs	r3, r2
 8003012:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003014:	f7fe fe42 	bl	8001c9c <HAL_GetTick>
 8003018:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301a:	e00a      	b.n	8003032 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301c:	f7fe fe3e 	bl	8001c9c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302a:	4293      	cmp	r3, r2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e04f      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003032:	4b2b      	ldr	r3, [pc, #172]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 020c 	and.w	r2, r3, #12
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	429a      	cmp	r2, r3
 8003042:	d1eb      	bne.n	800301c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003044:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d20c      	bcs.n	800306c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b22      	ldr	r3, [pc, #136]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800305a:	4b20      	ldr	r3, [pc, #128]	@ (80030dc <HAL_RCC_ClockConfig+0x1b8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	683a      	ldr	r2, [r7, #0]
 8003064:	429a      	cmp	r2, r3
 8003066:	d001      	beq.n	800306c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e032      	b.n	80030d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0304 	and.w	r3, r3, #4
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003078:	4b19      	ldr	r3, [pc, #100]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	4916      	ldr	r1, [pc, #88]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003086:	4313      	orrs	r3, r2
 8003088:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0308 	and.w	r3, r3, #8
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003096:	4b12      	ldr	r3, [pc, #72]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	490e      	ldr	r1, [pc, #56]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030aa:	f000 f821 	bl	80030f0 <HAL_RCC_GetSysClockFreq>
 80030ae:	4602      	mov	r2, r0
 80030b0:	4b0b      	ldr	r3, [pc, #44]	@ (80030e0 <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	490a      	ldr	r1, [pc, #40]	@ (80030e4 <HAL_RCC_ClockConfig+0x1c0>)
 80030bc:	5ccb      	ldrb	r3, [r1, r3]
 80030be:	fa22 f303 	lsr.w	r3, r2, r3
 80030c2:	4a09      	ldr	r2, [pc, #36]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80030c6:	4b09      	ldr	r3, [pc, #36]	@ (80030ec <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fe f8c2 	bl	8001254 <HAL_InitTick>

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40023c00 	.word	0x40023c00
 80030e0:	40023800 	.word	0x40023800
 80030e4:	08008c58 	.word	0x08008c58
 80030e8:	20000090 	.word	0x20000090
 80030ec:	20000094 	.word	0x20000094

080030f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030f4:	b094      	sub	sp, #80	@ 0x50
 80030f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80030f8:	2300      	movs	r3, #0
 80030fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80030fc:	2300      	movs	r3, #0
 80030fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003100:	2300      	movs	r3, #0
 8003102:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003104:	2300      	movs	r3, #0
 8003106:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003108:	4b79      	ldr	r3, [pc, #484]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 030c 	and.w	r3, r3, #12
 8003110:	2b08      	cmp	r3, #8
 8003112:	d00d      	beq.n	8003130 <HAL_RCC_GetSysClockFreq+0x40>
 8003114:	2b08      	cmp	r3, #8
 8003116:	f200 80e1 	bhi.w	80032dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <HAL_RCC_GetSysClockFreq+0x34>
 800311e:	2b04      	cmp	r3, #4
 8003120:	d003      	beq.n	800312a <HAL_RCC_GetSysClockFreq+0x3a>
 8003122:	e0db      	b.n	80032dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003124:	4b73      	ldr	r3, [pc, #460]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003126:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003128:	e0db      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800312a:	4b73      	ldr	r3, [pc, #460]	@ (80032f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800312c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800312e:	e0d8      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003130:	4b6f      	ldr	r3, [pc, #444]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003138:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800313a:	4b6d      	ldr	r3, [pc, #436]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d063      	beq.n	800320e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003146:	4b6a      	ldr	r3, [pc, #424]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	099b      	lsrs	r3, r3, #6
 800314c:	2200      	movs	r2, #0
 800314e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003150:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003158:	633b      	str	r3, [r7, #48]	@ 0x30
 800315a:	2300      	movs	r3, #0
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
 800315e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003162:	4622      	mov	r2, r4
 8003164:	462b      	mov	r3, r5
 8003166:	f04f 0000 	mov.w	r0, #0
 800316a:	f04f 0100 	mov.w	r1, #0
 800316e:	0159      	lsls	r1, r3, #5
 8003170:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003174:	0150      	lsls	r0, r2, #5
 8003176:	4602      	mov	r2, r0
 8003178:	460b      	mov	r3, r1
 800317a:	4621      	mov	r1, r4
 800317c:	1a51      	subs	r1, r2, r1
 800317e:	6139      	str	r1, [r7, #16]
 8003180:	4629      	mov	r1, r5
 8003182:	eb63 0301 	sbc.w	r3, r3, r1
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	f04f 0200 	mov.w	r2, #0
 800318c:	f04f 0300 	mov.w	r3, #0
 8003190:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003194:	4659      	mov	r1, fp
 8003196:	018b      	lsls	r3, r1, #6
 8003198:	4651      	mov	r1, sl
 800319a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800319e:	4651      	mov	r1, sl
 80031a0:	018a      	lsls	r2, r1, #6
 80031a2:	4651      	mov	r1, sl
 80031a4:	ebb2 0801 	subs.w	r8, r2, r1
 80031a8:	4659      	mov	r1, fp
 80031aa:	eb63 0901 	sbc.w	r9, r3, r1
 80031ae:	f04f 0200 	mov.w	r2, #0
 80031b2:	f04f 0300 	mov.w	r3, #0
 80031b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80031ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80031be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80031c2:	4690      	mov	r8, r2
 80031c4:	4699      	mov	r9, r3
 80031c6:	4623      	mov	r3, r4
 80031c8:	eb18 0303 	adds.w	r3, r8, r3
 80031cc:	60bb      	str	r3, [r7, #8]
 80031ce:	462b      	mov	r3, r5
 80031d0:	eb49 0303 	adc.w	r3, r9, r3
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	f04f 0200 	mov.w	r2, #0
 80031da:	f04f 0300 	mov.w	r3, #0
 80031de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80031e2:	4629      	mov	r1, r5
 80031e4:	024b      	lsls	r3, r1, #9
 80031e6:	4621      	mov	r1, r4
 80031e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80031ec:	4621      	mov	r1, r4
 80031ee:	024a      	lsls	r2, r1, #9
 80031f0:	4610      	mov	r0, r2
 80031f2:	4619      	mov	r1, r3
 80031f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031f6:	2200      	movs	r2, #0
 80031f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80031fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003200:	f7fc ffee 	bl	80001e0 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4613      	mov	r3, r2
 800320a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800320c:	e058      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320e:	4b38      	ldr	r3, [pc, #224]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	099b      	lsrs	r3, r3, #6
 8003214:	2200      	movs	r2, #0
 8003216:	4618      	mov	r0, r3
 8003218:	4611      	mov	r1, r2
 800321a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800321e:	623b      	str	r3, [r7, #32]
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
 8003224:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003228:	4642      	mov	r2, r8
 800322a:	464b      	mov	r3, r9
 800322c:	f04f 0000 	mov.w	r0, #0
 8003230:	f04f 0100 	mov.w	r1, #0
 8003234:	0159      	lsls	r1, r3, #5
 8003236:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800323a:	0150      	lsls	r0, r2, #5
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4641      	mov	r1, r8
 8003242:	ebb2 0a01 	subs.w	sl, r2, r1
 8003246:	4649      	mov	r1, r9
 8003248:	eb63 0b01 	sbc.w	fp, r3, r1
 800324c:	f04f 0200 	mov.w	r2, #0
 8003250:	f04f 0300 	mov.w	r3, #0
 8003254:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003258:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800325c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003260:	ebb2 040a 	subs.w	r4, r2, sl
 8003264:	eb63 050b 	sbc.w	r5, r3, fp
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	f04f 0300 	mov.w	r3, #0
 8003270:	00eb      	lsls	r3, r5, #3
 8003272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003276:	00e2      	lsls	r2, r4, #3
 8003278:	4614      	mov	r4, r2
 800327a:	461d      	mov	r5, r3
 800327c:	4643      	mov	r3, r8
 800327e:	18e3      	adds	r3, r4, r3
 8003280:	603b      	str	r3, [r7, #0]
 8003282:	464b      	mov	r3, r9
 8003284:	eb45 0303 	adc.w	r3, r5, r3
 8003288:	607b      	str	r3, [r7, #4]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003296:	4629      	mov	r1, r5
 8003298:	028b      	lsls	r3, r1, #10
 800329a:	4621      	mov	r1, r4
 800329c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032a0:	4621      	mov	r1, r4
 80032a2:	028a      	lsls	r2, r1, #10
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032aa:	2200      	movs	r2, #0
 80032ac:	61bb      	str	r3, [r7, #24]
 80032ae:	61fa      	str	r2, [r7, #28]
 80032b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032b4:	f7fc ff94 	bl	80001e0 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4613      	mov	r3, r2
 80032be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	0c1b      	lsrs	r3, r3, #16
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	3301      	adds	r3, #1
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80032d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80032d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032da:	e002      	b.n	80032e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80032de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3750      	adds	r7, #80	@ 0x50
 80032e8:	46bd      	mov	sp, r7
 80032ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ee:	bf00      	nop
 80032f0:	40023800 	.word	0x40023800
 80032f4:	00f42400 	.word	0x00f42400
 80032f8:	007a1200 	.word	0x007a1200

080032fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032fc:	b480      	push	{r7}
 80032fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003300:	4b03      	ldr	r3, [pc, #12]	@ (8003310 <HAL_RCC_GetHCLKFreq+0x14>)
 8003302:	681b      	ldr	r3, [r3, #0]
}
 8003304:	4618      	mov	r0, r3
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000090 	.word	0x20000090

08003314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003318:	f7ff fff0 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 800331c:	4602      	mov	r2, r0
 800331e:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	0a9b      	lsrs	r3, r3, #10
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	4903      	ldr	r1, [pc, #12]	@ (8003338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800332a:	5ccb      	ldrb	r3, [r1, r3]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003330:	4618      	mov	r0, r3
 8003332:	bd80      	pop	{r7, pc}
 8003334:	40023800 	.word	0x40023800
 8003338:	08008c68 	.word	0x08008c68

0800333c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003340:	f7ff ffdc 	bl	80032fc <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b05      	ldr	r3, [pc, #20]	@ (800335c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	0b5b      	lsrs	r3, r3, #13
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4903      	ldr	r1, [pc, #12]	@ (8003360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003358:	4618      	mov	r0, r3
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40023800 	.word	0x40023800
 8003360:	08008c68 	.word	0x08008c68

08003364 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	220f      	movs	r2, #15
 8003372:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003374:	4b12      	ldr	r3, [pc, #72]	@ (80033c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 0203 	and.w	r2, r3, #3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003380:	4b0f      	ldr	r3, [pc, #60]	@ (80033c0 <HAL_RCC_GetClockConfig+0x5c>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800338c:	4b0c      	ldr	r3, [pc, #48]	@ (80033c0 <HAL_RCC_GetClockConfig+0x5c>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003398:	4b09      	ldr	r3, [pc, #36]	@ (80033c0 <HAL_RCC_GetClockConfig+0x5c>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	08db      	lsrs	r3, r3, #3
 800339e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80033a6:	4b07      	ldr	r3, [pc, #28]	@ (80033c4 <HAL_RCC_GetClockConfig+0x60>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0207 	and.w	r2, r3, #7
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	601a      	str	r2, [r3, #0]
}
 80033b2:	bf00      	nop
 80033b4:	370c      	adds	r7, #12
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40023c00 	.word	0x40023c00

080033c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e041      	b.n	800345e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe f9b0 	bl	8001754 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f000 fee0 	bl	80041cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b01      	cmp	r3, #1
 800347a:	d001      	beq.n	8003480 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e03c      	b.n	80034fa <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a1e      	ldr	r2, [pc, #120]	@ (8003508 <HAL_TIM_Base_Start+0xa0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d018      	beq.n	80034c4 <HAL_TIM_Base_Start+0x5c>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800349a:	d013      	beq.n	80034c4 <HAL_TIM_Base_Start+0x5c>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a1a      	ldr	r2, [pc, #104]	@ (800350c <HAL_TIM_Base_Start+0xa4>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00e      	beq.n	80034c4 <HAL_TIM_Base_Start+0x5c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a19      	ldr	r2, [pc, #100]	@ (8003510 <HAL_TIM_Base_Start+0xa8>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d009      	beq.n	80034c4 <HAL_TIM_Base_Start+0x5c>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a17      	ldr	r2, [pc, #92]	@ (8003514 <HAL_TIM_Base_Start+0xac>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d004      	beq.n	80034c4 <HAL_TIM_Base_Start+0x5c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a16      	ldr	r2, [pc, #88]	@ (8003518 <HAL_TIM_Base_Start+0xb0>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d111      	bne.n	80034e8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d010      	beq.n	80034f8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0201 	orr.w	r2, r2, #1
 80034e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034e6:	e007      	b.n	80034f8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f042 0201 	orr.w	r2, r2, #1
 80034f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3714      	adds	r7, #20
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	40010000 	.word	0x40010000
 800350c:	40000400 	.word	0x40000400
 8003510:	40000800 	.word	0x40000800
 8003514:	40000c00 	.word	0x40000c00
 8003518:	40014000 	.word	0x40014000

0800351c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d001      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e044      	b.n	80035be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1e      	ldr	r2, [pc, #120]	@ (80035cc <HAL_TIM_Base_Start_IT+0xb0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d018      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x6c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800355e:	d013      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x6c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1a      	ldr	r2, [pc, #104]	@ (80035d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x6c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a19      	ldr	r2, [pc, #100]	@ (80035d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x6c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a17      	ldr	r2, [pc, #92]	@ (80035d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x6c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a16      	ldr	r2, [pc, #88]	@ (80035dc <HAL_TIM_Base_Start_IT+0xc0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d111      	bne.n	80035ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b06      	cmp	r3, #6
 8003598:	d010      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	e007      	b.n	80035bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40014000 	.word	0x40014000

080035e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e041      	b.n	8003676 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d106      	bne.n	800360c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f839 	bl	800367e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3304      	adds	r3, #4
 800361c:	4619      	mov	r1, r3
 800361e:	4610      	mov	r0, r2
 8003620:	f000 fdd4 	bl	80041cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800367e:	b480      	push	{r7}
 8003680:	b083      	sub	sp, #12
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003686:	bf00      	nop
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <HAL_TIM_PWM_Start+0x24>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	bf14      	ite	ne
 80036b0:	2301      	movne	r3, #1
 80036b2:	2300      	moveq	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	e022      	b.n	80036fe <HAL_TIM_PWM_Start+0x6a>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b04      	cmp	r3, #4
 80036bc:	d109      	bne.n	80036d2 <HAL_TIM_PWM_Start+0x3e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	bf14      	ite	ne
 80036ca:	2301      	movne	r3, #1
 80036cc:	2300      	moveq	r3, #0
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	e015      	b.n	80036fe <HAL_TIM_PWM_Start+0x6a>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d109      	bne.n	80036ec <HAL_TIM_PWM_Start+0x58>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	bf14      	ite	ne
 80036e4:	2301      	movne	r3, #1
 80036e6:	2300      	moveq	r3, #0
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	e008      	b.n	80036fe <HAL_TIM_PWM_Start+0x6a>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	bf14      	ite	ne
 80036f8:	2301      	movne	r3, #1
 80036fa:	2300      	moveq	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e068      	b.n	80037d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <HAL_TIM_PWM_Start+0x82>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2202      	movs	r2, #2
 8003710:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003714:	e013      	b.n	800373e <HAL_TIM_PWM_Start+0xaa>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d104      	bne.n	8003726 <HAL_TIM_PWM_Start+0x92>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2202      	movs	r2, #2
 8003720:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003724:	e00b      	b.n	800373e <HAL_TIM_PWM_Start+0xaa>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b08      	cmp	r3, #8
 800372a:	d104      	bne.n	8003736 <HAL_TIM_PWM_Start+0xa2>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003734:	e003      	b.n	800373e <HAL_TIM_PWM_Start+0xaa>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2201      	movs	r2, #1
 8003744:	6839      	ldr	r1, [r7, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f001 f910 	bl	800496c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a23      	ldr	r2, [pc, #140]	@ (80037e0 <HAL_TIM_PWM_Start+0x14c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d107      	bne.n	8003766 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003764:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a1d      	ldr	r2, [pc, #116]	@ (80037e0 <HAL_TIM_PWM_Start+0x14c>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d018      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x10e>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003778:	d013      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x10e>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a19      	ldr	r2, [pc, #100]	@ (80037e4 <HAL_TIM_PWM_Start+0x150>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d00e      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x10e>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a17      	ldr	r2, [pc, #92]	@ (80037e8 <HAL_TIM_PWM_Start+0x154>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x10e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a16      	ldr	r2, [pc, #88]	@ (80037ec <HAL_TIM_PWM_Start+0x158>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d004      	beq.n	80037a2 <HAL_TIM_PWM_Start+0x10e>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a14      	ldr	r2, [pc, #80]	@ (80037f0 <HAL_TIM_PWM_Start+0x15c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d111      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2b06      	cmp	r3, #6
 80037b2:	d010      	beq.n	80037d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037c4:	e007      	b.n	80037d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40000c00 	.word	0x40000c00
 80037f0:	40014000 	.word	0x40014000

080037f4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e041      	b.n	800388a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d106      	bne.n	8003820 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f839 	bl	8003892 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	4619      	mov	r1, r3
 8003832:	4610      	mov	r0, r2
 8003834:	f000 fcca 	bl	80041cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3708      	adds	r7, #8
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003892:	b480      	push	{r7}
 8003894:	b083      	sub	sp, #12
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800389a:	bf00      	nop
 800389c:	370c      	adds	r7, #12
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
	...

080038a8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d104      	bne.n	80038c6 <HAL_TIM_IC_Start_IT+0x1e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	e013      	b.n	80038ee <HAL_TIM_IC_Start_IT+0x46>
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b04      	cmp	r3, #4
 80038ca:	d104      	bne.n	80038d6 <HAL_TIM_IC_Start_IT+0x2e>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	e00b      	b.n	80038ee <HAL_TIM_IC_Start_IT+0x46>
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b08      	cmp	r3, #8
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_IC_Start_IT+0x3e>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e003      	b.n	80038ee <HAL_TIM_IC_Start_IT+0x46>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d104      	bne.n	8003900 <HAL_TIM_IC_Start_IT+0x58>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e013      	b.n	8003928 <HAL_TIM_IC_Start_IT+0x80>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	2b04      	cmp	r3, #4
 8003904:	d104      	bne.n	8003910 <HAL_TIM_IC_Start_IT+0x68>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800390c:	b2db      	uxtb	r3, r3
 800390e:	e00b      	b.n	8003928 <HAL_TIM_IC_Start_IT+0x80>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b08      	cmp	r3, #8
 8003914:	d104      	bne.n	8003920 <HAL_TIM_IC_Start_IT+0x78>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e003      	b.n	8003928 <HAL_TIM_IC_Start_IT+0x80>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003926:	b2db      	uxtb	r3, r3
 8003928:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800392a:	7bbb      	ldrb	r3, [r7, #14]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d102      	bne.n	8003936 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003930:	7b7b      	ldrb	r3, [r7, #13]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d001      	beq.n	800393a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e0c2      	b.n	8003ac0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d104      	bne.n	800394a <HAL_TIM_IC_Start_IT+0xa2>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003948:	e013      	b.n	8003972 <HAL_TIM_IC_Start_IT+0xca>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	2b04      	cmp	r3, #4
 800394e:	d104      	bne.n	800395a <HAL_TIM_IC_Start_IT+0xb2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2202      	movs	r2, #2
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003958:	e00b      	b.n	8003972 <HAL_TIM_IC_Start_IT+0xca>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d104      	bne.n	800396a <HAL_TIM_IC_Start_IT+0xc2>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003968:	e003      	b.n	8003972 <HAL_TIM_IC_Start_IT+0xca>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2202      	movs	r2, #2
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d104      	bne.n	8003982 <HAL_TIM_IC_Start_IT+0xda>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2202      	movs	r2, #2
 800397c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003980:	e013      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x102>
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2b04      	cmp	r3, #4
 8003986:	d104      	bne.n	8003992 <HAL_TIM_IC_Start_IT+0xea>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2202      	movs	r2, #2
 800398c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003990:	e00b      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x102>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b08      	cmp	r3, #8
 8003996:	d104      	bne.n	80039a2 <HAL_TIM_IC_Start_IT+0xfa>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039a0:	e003      	b.n	80039aa <HAL_TIM_IC_Start_IT+0x102>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2202      	movs	r2, #2
 80039a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  switch (Channel)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d841      	bhi.n	8003a34 <HAL_TIM_IC_Start_IT+0x18c>
 80039b0:	a201      	add	r2, pc, #4	@ (adr r2, 80039b8 <HAL_TIM_IC_Start_IT+0x110>)
 80039b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b6:	bf00      	nop
 80039b8:	080039ed 	.word	0x080039ed
 80039bc:	08003a35 	.word	0x08003a35
 80039c0:	08003a35 	.word	0x08003a35
 80039c4:	08003a35 	.word	0x08003a35
 80039c8:	080039ff 	.word	0x080039ff
 80039cc:	08003a35 	.word	0x08003a35
 80039d0:	08003a35 	.word	0x08003a35
 80039d4:	08003a35 	.word	0x08003a35
 80039d8:	08003a11 	.word	0x08003a11
 80039dc:	08003a35 	.word	0x08003a35
 80039e0:	08003a35 	.word	0x08003a35
 80039e4:	08003a35 	.word	0x08003a35
 80039e8:	08003a23 	.word	0x08003a23
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0202 	orr.w	r2, r2, #2
 80039fa:	60da      	str	r2, [r3, #12]
      break;
 80039fc:	e01d      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68da      	ldr	r2, [r3, #12]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0204 	orr.w	r2, r2, #4
 8003a0c:	60da      	str	r2, [r3, #12]
      break;
 8003a0e:	e014      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	68da      	ldr	r2, [r3, #12]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0208 	orr.w	r2, r2, #8
 8003a1e:	60da      	str	r2, [r3, #12]
      break;
 8003a20:	e00b      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68da      	ldr	r2, [r3, #12]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0210 	orr.w	r2, r2, #16
 8003a30:	60da      	str	r2, [r3, #12]
      break;
 8003a32:	e002      	b.n	8003a3a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	73fb      	strb	r3, [r7, #15]
      break;
 8003a38:	bf00      	nop
  }

  if (status == HAL_OK)
 8003a3a:	7bfb      	ldrb	r3, [r7, #15]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d13e      	bne.n	8003abe <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2201      	movs	r2, #1
 8003a46:	6839      	ldr	r1, [r7, #0]
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f000 ff8f 	bl	800496c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac8 <HAL_TIM_IC_Start_IT+0x220>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d018      	beq.n	8003a8a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a60:	d013      	beq.n	8003a8a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a19      	ldr	r2, [pc, #100]	@ (8003acc <HAL_TIM_IC_Start_IT+0x224>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00e      	beq.n	8003a8a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a17      	ldr	r2, [pc, #92]	@ (8003ad0 <HAL_TIM_IC_Start_IT+0x228>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d009      	beq.n	8003a8a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a16      	ldr	r2, [pc, #88]	@ (8003ad4 <HAL_TIM_IC_Start_IT+0x22c>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d004      	beq.n	8003a8a <HAL_TIM_IC_Start_IT+0x1e2>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a14      	ldr	r2, [pc, #80]	@ (8003ad8 <HAL_TIM_IC_Start_IT+0x230>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d111      	bne.n	8003aae <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2b06      	cmp	r3, #6
 8003a9a:	d010      	beq.n	8003abe <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0201 	orr.w	r2, r2, #1
 8003aaa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aac:	e007      	b.n	8003abe <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40010000 	.word	0x40010000
 8003acc:	40000400 	.word	0x40000400
 8003ad0:	40000800 	.word	0x40000800
 8003ad4:	40000c00 	.word	0x40000c00
 8003ad8:	40014000 	.word	0x40014000

08003adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d020      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d01b      	beq.n	8003b40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f06f 0202 	mvn.w	r2, #2
 8003b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2201      	movs	r2, #1
 8003b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fc fec8 	bl	80008bc <HAL_TIM_IC_CaptureCallback>
 8003b2c:	e005      	b.n	8003b3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fb2e 	bl	8004190 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 fb35 	bl	80041a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f003 0304 	and.w	r3, r3, #4
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d020      	beq.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01b      	beq.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0204 	mvn.w	r2, #4
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fc fea2 	bl	80008bc <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fb08 	bl	8004190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fb0f 	bl	80041a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f003 0308 	and.w	r3, r3, #8
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d020      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01b      	beq.n	8003bd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0208 	mvn.w	r2, #8
 8003ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2204      	movs	r2, #4
 8003bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f003 0303 	and.w	r3, r3, #3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d003      	beq.n	8003bc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7fc fe7c 	bl	80008bc <HAL_TIM_IC_CaptureCallback>
 8003bc4:	e005      	b.n	8003bd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fae2 	bl	8004190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fae9 	bl	80041a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d020      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01b      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f06f 0210 	mvn.w	r2, #16
 8003bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f7fc fe56 	bl	80008bc <HAL_TIM_IC_CaptureCallback>
 8003c10:	e005      	b.n	8003c1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fabc 	bl	8004190 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fac3 	bl	80041a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00c      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0201 	mvn.w	r2, #1
 8003c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fd f8a2 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00c      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 ff1e 	bl	8004aa8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00c      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fa94 	bl	80041b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	f003 0320 	and.w	r3, r3, #32
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00c      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f003 0320 	and.w	r3, r3, #32
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d007      	beq.n	8003cb4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f06f 0220 	mvn.w	r2, #32
 8003cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 fef0 	bl	8004a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	3710      	adds	r7, #16
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b086      	sub	sp, #24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d101      	bne.n	8003cda <HAL_TIM_IC_ConfigChannel+0x1e>
 8003cd6:	2302      	movs	r3, #2
 8003cd8:	e088      	b.n	8003dec <HAL_TIM_IC_ConfigChannel+0x130>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d11b      	bne.n	8003d20 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003cf8:	f000 fc80 	bl	80045fc <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	699a      	ldr	r2, [r3, #24]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f022 020c 	bic.w	r2, r2, #12
 8003d0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6999      	ldr	r1, [r3, #24]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	619a      	str	r2, [r3, #24]
 8003d1e:	e060      	b.n	8003de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d11c      	bne.n	8003d60 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003d36:	f000 fcf8 	bl	800472a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	699a      	ldr	r2, [r3, #24]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6999      	ldr	r1, [r3, #24]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	021a      	lsls	r2, r3, #8
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	619a      	str	r2, [r3, #24]
 8003d5e:	e040      	b.n	8003de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d11b      	bne.n	8003d9e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003d76:	f000 fd45 	bl	8004804 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 020c 	bic.w	r2, r2, #12
 8003d88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69d9      	ldr	r1, [r3, #28]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	61da      	str	r2, [r3, #28]
 8003d9c:	e021      	b.n	8003de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b0c      	cmp	r3, #12
 8003da2:	d11c      	bne.n	8003dde <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003db4:	f000 fd62 	bl	800487c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003dc6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69d9      	ldr	r1, [r3, #28]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	021a      	lsls	r2, r3, #8
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	430a      	orrs	r2, r1
 8003dda:	61da      	str	r2, [r3, #28]
 8003ddc:	e001      	b.n	8003de2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d101      	bne.n	8003e12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e0e:	2302      	movs	r3, #2
 8003e10:	e0ae      	b.n	8003f70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	f200 809f 	bhi.w	8003f60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e22:	a201      	add	r2, pc, #4	@ (adr r2, 8003e28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e28:	08003e5d 	.word	0x08003e5d
 8003e2c:	08003f61 	.word	0x08003f61
 8003e30:	08003f61 	.word	0x08003f61
 8003e34:	08003f61 	.word	0x08003f61
 8003e38:	08003e9d 	.word	0x08003e9d
 8003e3c:	08003f61 	.word	0x08003f61
 8003e40:	08003f61 	.word	0x08003f61
 8003e44:	08003f61 	.word	0x08003f61
 8003e48:	08003edf 	.word	0x08003edf
 8003e4c:	08003f61 	.word	0x08003f61
 8003e50:	08003f61 	.word	0x08003f61
 8003e54:	08003f61 	.word	0x08003f61
 8003e58:	08003f1f 	.word	0x08003f1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	68b9      	ldr	r1, [r7, #8]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 fa3e 	bl	80042e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	699a      	ldr	r2, [r3, #24]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f042 0208 	orr.w	r2, r2, #8
 8003e76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	699a      	ldr	r2, [r3, #24]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f022 0204 	bic.w	r2, r2, #4
 8003e86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	6999      	ldr	r1, [r3, #24]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	691a      	ldr	r2, [r3, #16]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	430a      	orrs	r2, r1
 8003e98:	619a      	str	r2, [r3, #24]
      break;
 8003e9a:	e064      	b.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f000 fa84 	bl	80043b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	699a      	ldr	r2, [r3, #24]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6999      	ldr	r1, [r3, #24]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	021a      	lsls	r2, r3, #8
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	619a      	str	r2, [r3, #24]
      break;
 8003edc:	e043      	b.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 facf 	bl	8004488 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f042 0208 	orr.w	r2, r2, #8
 8003ef8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	69da      	ldr	r2, [r3, #28]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 0204 	bic.w	r2, r2, #4
 8003f08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69d9      	ldr	r1, [r3, #28]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	691a      	ldr	r2, [r3, #16]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	61da      	str	r2, [r3, #28]
      break;
 8003f1c:	e023      	b.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	68b9      	ldr	r1, [r7, #8]
 8003f24:	4618      	mov	r0, r3
 8003f26:	f000 fb19 	bl	800455c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69da      	ldr	r2, [r3, #28]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69d9      	ldr	r1, [r3, #28]
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	021a      	lsls	r2, r3, #8
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	61da      	str	r2, [r3, #28]
      break;
 8003f5e:	e002      	b.n	8003f66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	75fb      	strb	r3, [r7, #23]
      break;
 8003f64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIM_ConfigClockSource+0x1c>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e0b4      	b.n	80040fe <HAL_TIM_ConfigClockSource+0x186>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68ba      	ldr	r2, [r7, #8]
 8003fc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fcc:	d03e      	beq.n	800404c <HAL_TIM_ConfigClockSource+0xd4>
 8003fce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fd2:	f200 8087 	bhi.w	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fda:	f000 8086 	beq.w	80040ea <HAL_TIM_ConfigClockSource+0x172>
 8003fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe2:	d87f      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b70      	cmp	r3, #112	@ 0x70
 8003fe6:	d01a      	beq.n	800401e <HAL_TIM_ConfigClockSource+0xa6>
 8003fe8:	2b70      	cmp	r3, #112	@ 0x70
 8003fea:	d87b      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b60      	cmp	r3, #96	@ 0x60
 8003fee:	d050      	beq.n	8004092 <HAL_TIM_ConfigClockSource+0x11a>
 8003ff0:	2b60      	cmp	r3, #96	@ 0x60
 8003ff2:	d877      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b50      	cmp	r3, #80	@ 0x50
 8003ff6:	d03c      	beq.n	8004072 <HAL_TIM_ConfigClockSource+0xfa>
 8003ff8:	2b50      	cmp	r3, #80	@ 0x50
 8003ffa:	d873      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b40      	cmp	r3, #64	@ 0x40
 8003ffe:	d058      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0x13a>
 8004000:	2b40      	cmp	r3, #64	@ 0x40
 8004002:	d86f      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b30      	cmp	r3, #48	@ 0x30
 8004006:	d064      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004008:	2b30      	cmp	r3, #48	@ 0x30
 800400a:	d86b      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b20      	cmp	r3, #32
 800400e:	d060      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004010:	2b20      	cmp	r3, #32
 8004012:	d867      	bhi.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b00      	cmp	r3, #0
 8004016:	d05c      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 8004018:	2b10      	cmp	r3, #16
 800401a:	d05a      	beq.n	80040d2 <HAL_TIM_ConfigClockSource+0x15a>
 800401c:	e062      	b.n	80040e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800402e:	f000 fc7d 	bl	800492c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004040:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	609a      	str	r2, [r3, #8]
      break;
 800404a:	e04f      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800405c:	f000 fc66 	bl	800492c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800406e:	609a      	str	r2, [r3, #8]
      break;
 8004070:	e03c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407e:	461a      	mov	r2, r3
 8004080:	f000 fb24 	bl	80046cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2150      	movs	r1, #80	@ 0x50
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fc33 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 8004090:	e02c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800409e:	461a      	mov	r2, r3
 80040a0:	f000 fb80 	bl	80047a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2160      	movs	r1, #96	@ 0x60
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fc23 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80040b0:	e01c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040be:	461a      	mov	r2, r3
 80040c0:	f000 fb04 	bl	80046cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2140      	movs	r1, #64	@ 0x40
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fc13 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80040d0:	e00c      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4619      	mov	r1, r3
 80040dc:	4610      	mov	r0, r2
 80040de:	f000 fc0a 	bl	80048f6 <TIM_ITRx_SetConfig>
      break;
 80040e2:	e003      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
      break;
 80040e8:	e000      	b.n	80040ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
	...

08004108 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b0c      	cmp	r3, #12
 800411a:	d831      	bhi.n	8004180 <HAL_TIM_ReadCapturedValue+0x78>
 800411c:	a201      	add	r2, pc, #4	@ (adr r2, 8004124 <HAL_TIM_ReadCapturedValue+0x1c>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004159 	.word	0x08004159
 8004128:	08004181 	.word	0x08004181
 800412c:	08004181 	.word	0x08004181
 8004130:	08004181 	.word	0x08004181
 8004134:	08004163 	.word	0x08004163
 8004138:	08004181 	.word	0x08004181
 800413c:	08004181 	.word	0x08004181
 8004140:	08004181 	.word	0x08004181
 8004144:	0800416d 	.word	0x0800416d
 8004148:	08004181 	.word	0x08004181
 800414c:	08004181 	.word	0x08004181
 8004150:	08004181 	.word	0x08004181
 8004154:	08004177 	.word	0x08004177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800415e:	60fb      	str	r3, [r7, #12]

      break;
 8004160:	e00f      	b.n	8004182 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	60fb      	str	r3, [r7, #12]

      break;
 800416a:	e00a      	b.n	8004182 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004172:	60fb      	str	r3, [r7, #12]

      break;
 8004174:	e005      	b.n	8004182 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417c:	60fb      	str	r3, [r7, #12]

      break;
 800417e:	e000      	b.n	8004182 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004180:	bf00      	nop
  }

  return tmpreg;
 8004182:	68fb      	ldr	r3, [r7, #12]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3714      	adds	r7, #20
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3a      	ldr	r2, [pc, #232]	@ (80042c8 <TIM_Base_SetConfig+0xfc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00f      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ea:	d00b      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a37      	ldr	r2, [pc, #220]	@ (80042cc <TIM_Base_SetConfig+0x100>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d007      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a36      	ldr	r2, [pc, #216]	@ (80042d0 <TIM_Base_SetConfig+0x104>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d003      	beq.n	8004204 <TIM_Base_SetConfig+0x38>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a35      	ldr	r2, [pc, #212]	@ (80042d4 <TIM_Base_SetConfig+0x108>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d108      	bne.n	8004216 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2b      	ldr	r2, [pc, #172]	@ (80042c8 <TIM_Base_SetConfig+0xfc>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01b      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004224:	d017      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a28      	ldr	r2, [pc, #160]	@ (80042cc <TIM_Base_SetConfig+0x100>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d013      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a27      	ldr	r2, [pc, #156]	@ (80042d0 <TIM_Base_SetConfig+0x104>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d00f      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a26      	ldr	r2, [pc, #152]	@ (80042d4 <TIM_Base_SetConfig+0x108>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00b      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a25      	ldr	r2, [pc, #148]	@ (80042d8 <TIM_Base_SetConfig+0x10c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d007      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a24      	ldr	r2, [pc, #144]	@ (80042dc <TIM_Base_SetConfig+0x110>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a23      	ldr	r2, [pc, #140]	@ (80042e0 <TIM_Base_SetConfig+0x114>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d108      	bne.n	8004268 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800425c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a0e      	ldr	r2, [pc, #56]	@ (80042c8 <TIM_Base_SetConfig+0xfc>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d103      	bne.n	800429c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d105      	bne.n	80042ba <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f023 0201 	bic.w	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	611a      	str	r2, [r3, #16]
  }
}
 80042ba:	bf00      	nop
 80042bc:	3714      	adds	r7, #20
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
 80042c6:	bf00      	nop
 80042c8:	40010000 	.word	0x40010000
 80042cc:	40000400 	.word	0x40000400
 80042d0:	40000800 	.word	0x40000800
 80042d4:	40000c00 	.word	0x40000c00
 80042d8:	40014000 	.word	0x40014000
 80042dc:	40014400 	.word	0x40014400
 80042e0:	40014800 	.word	0x40014800

080042e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	f023 0201 	bic.w	r2, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0303 	bic.w	r3, r3, #3
 800431a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f023 0302 	bic.w	r3, r3, #2
 800432c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	4313      	orrs	r3, r2
 8004336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a1c      	ldr	r2, [pc, #112]	@ (80043ac <TIM_OC1_SetConfig+0xc8>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d10c      	bne.n	800435a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0308 	bic.w	r3, r3, #8
 8004346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	4313      	orrs	r3, r2
 8004350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f023 0304 	bic.w	r3, r3, #4
 8004358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a13      	ldr	r2, [pc, #76]	@ (80043ac <TIM_OC1_SetConfig+0xc8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d111      	bne.n	8004386 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	4313      	orrs	r3, r2
 800437a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	621a      	str	r2, [r3, #32]
}
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40010000 	.word	0x40010000

080043b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b087      	sub	sp, #28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f023 0210 	bic.w	r2, r3, #16
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	021b      	lsls	r3, r3, #8
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f023 0320 	bic.w	r3, r3, #32
 80043fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	697a      	ldr	r2, [r7, #20]
 8004404:	4313      	orrs	r3, r2
 8004406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a1e      	ldr	r2, [pc, #120]	@ (8004484 <TIM_OC2_SetConfig+0xd4>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d10d      	bne.n	800442c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	011b      	lsls	r3, r3, #4
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800442a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a15      	ldr	r2, [pc, #84]	@ (8004484 <TIM_OC2_SetConfig+0xd4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d113      	bne.n	800445c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800443a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004442:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685a      	ldr	r2, [r3, #4]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	621a      	str	r2, [r3, #32]
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40010000 	.word	0x40010000

08004488 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a1b      	ldr	r3, [r3, #32]
 8004496:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a1b      	ldr	r3, [r3, #32]
 800449c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0303 	bic.w	r3, r3, #3
 80044be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4313      	orrs	r3, r2
 80044dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004558 <TIM_OC3_SetConfig+0xd0>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10d      	bne.n	8004502 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80044ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	021b      	lsls	r3, r3, #8
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a14      	ldr	r2, [pc, #80]	@ (8004558 <TIM_OC3_SetConfig+0xd0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d113      	bne.n	8004532 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	693a      	ldr	r2, [r7, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68fa      	ldr	r2, [r7, #12]
 800453c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	621a      	str	r2, [r3, #32]
}
 800454c:	bf00      	nop
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	40010000 	.word	0x40010000

0800455c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800458a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004592:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80045a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	031b      	lsls	r3, r3, #12
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a10      	ldr	r2, [pc, #64]	@ (80045f8 <TIM_OC4_SetConfig+0x9c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d109      	bne.n	80045d0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80045c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	019b      	lsls	r3, r3, #6
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	621a      	str	r2, [r3, #32]
}
 80045ea:	bf00      	nop
 80045ec:	371c      	adds	r7, #28
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40010000 	.word	0x40010000

080045fc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]
 8004608:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f023 0201 	bic.w	r2, r3, #1
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	4a24      	ldr	r2, [pc, #144]	@ (80046b8 <TIM_TI1_SetConfig+0xbc>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d013      	beq.n	8004652 <TIM_TI1_SetConfig+0x56>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004630:	d00f      	beq.n	8004652 <TIM_TI1_SetConfig+0x56>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	4a21      	ldr	r2, [pc, #132]	@ (80046bc <TIM_TI1_SetConfig+0xc0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00b      	beq.n	8004652 <TIM_TI1_SetConfig+0x56>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	4a20      	ldr	r2, [pc, #128]	@ (80046c0 <TIM_TI1_SetConfig+0xc4>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d007      	beq.n	8004652 <TIM_TI1_SetConfig+0x56>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4a1f      	ldr	r2, [pc, #124]	@ (80046c4 <TIM_TI1_SetConfig+0xc8>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d003      	beq.n	8004652 <TIM_TI1_SetConfig+0x56>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	4a1e      	ldr	r2, [pc, #120]	@ (80046c8 <TIM_TI1_SetConfig+0xcc>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d101      	bne.n	8004656 <TIM_TI1_SetConfig+0x5a>
 8004652:	2301      	movs	r3, #1
 8004654:	e000      	b.n	8004658 <TIM_TI1_SetConfig+0x5c>
 8004656:	2300      	movs	r3, #0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	f023 0303 	bic.w	r3, r3, #3
 8004662:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004664:	697a      	ldr	r2, [r7, #20]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	e003      	b.n	8004676 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800467c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	b2db      	uxtb	r3, r3
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f023 030a 	bic.w	r3, r3, #10
 8004690:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f003 030a 	and.w	r3, r3, #10
 8004698:	693a      	ldr	r2, [r7, #16]
 800469a:	4313      	orrs	r3, r2
 800469c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	621a      	str	r2, [r3, #32]
}
 80046aa:	bf00      	nop
 80046ac:	371c      	adds	r7, #28
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	40010000 	.word	0x40010000
 80046bc:	40000400 	.word	0x40000400
 80046c0:	40000800 	.word	0x40000800
 80046c4:	40000c00 	.word	0x40000c00
 80046c8:	40014000 	.word	0x40014000

080046cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	f023 0201 	bic.w	r2, r3, #1
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80046f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	4313      	orrs	r3, r2
 8004700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f023 030a 	bic.w	r3, r3, #10
 8004708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr

0800472a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800472a:	b480      	push	{r7}
 800472c:	b087      	sub	sp, #28
 800472e:	af00      	add	r7, sp, #0
 8004730:	60f8      	str	r0, [r7, #12]
 8004732:	60b9      	str	r1, [r7, #8]
 8004734:	607a      	str	r2, [r7, #4]
 8004736:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	f023 0210 	bic.w	r2, r3, #16
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	031b      	lsls	r3, r3, #12
 800476e:	b29b      	uxth	r3, r3
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800477c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	011b      	lsls	r3, r3, #4
 8004782:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4313      	orrs	r3, r2
 800478a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	621a      	str	r2, [r3, #32]
}
 8004798:	bf00      	nop
 800479a:	371c      	adds	r7, #28
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	f023 0210 	bic.w	r2, r3, #16
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	031b      	lsls	r3, r3, #12
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047e0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	621a      	str	r2, [r3, #32]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
 8004810:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6a1b      	ldr	r3, [r3, #32]
 8004816:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	69db      	ldr	r3, [r3, #28]
 8004828:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f023 0303 	bic.w	r3, r3, #3
 8004830:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4313      	orrs	r3, r2
 8004838:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004840:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	b2db      	uxtb	r3, r3
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004854:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	021b      	lsls	r3, r3, #8
 800485a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	697a      	ldr	r2, [r7, #20]
 800486e:	621a      	str	r2, [r3, #32]
}
 8004870:	bf00      	nop
 8004872:	371c      	adds	r7, #28
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
 8004888:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6a1b      	ldr	r3, [r3, #32]
 8004894:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048a8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	021b      	lsls	r3, r3, #8
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048ba:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	031b      	lsls	r3, r3, #12
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80048ce:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	031b      	lsls	r3, r3, #12
 80048d4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	4313      	orrs	r3, r2
 80048dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	621a      	str	r2, [r3, #32]
}
 80048ea:	bf00      	nop
 80048ec:	371c      	adds	r7, #28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr

080048f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048f6:	b480      	push	{r7}
 80048f8:	b085      	sub	sp, #20
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800490c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4313      	orrs	r3, r2
 8004914:	f043 0307 	orr.w	r3, r3, #7
 8004918:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	609a      	str	r2, [r3, #8]
}
 8004920:	bf00      	nop
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004946:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	021a      	lsls	r2, r3, #8
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	431a      	orrs	r2, r3
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	4313      	orrs	r3, r2
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	609a      	str	r2, [r3, #8]
}
 8004960:	bf00      	nop
 8004962:	371c      	adds	r7, #28
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800496c:	b480      	push	{r7}
 800496e:	b087      	sub	sp, #28
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	f003 031f 	and.w	r3, r3, #31
 800497e:	2201      	movs	r2, #1
 8004980:	fa02 f303 	lsl.w	r3, r2, r3
 8004984:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a1a      	ldr	r2, [r3, #32]
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	43db      	mvns	r3, r3
 800498e:	401a      	ands	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a1a      	ldr	r2, [r3, #32]
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	f003 031f 	and.w	r3, r3, #31
 800499e:	6879      	ldr	r1, [r7, #4]
 80049a0:	fa01 f303 	lsl.w	r3, r1, r3
 80049a4:	431a      	orrs	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	621a      	str	r2, [r3, #32]
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
	...

080049b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049c8:	2b01      	cmp	r3, #1
 80049ca:	d101      	bne.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049cc:	2302      	movs	r3, #2
 80049ce:	e050      	b.n	8004a72 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	68fa      	ldr	r2, [r7, #12]
 8004a08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004a80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d018      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a1c:	d013      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a18      	ldr	r2, [pc, #96]	@ (8004a84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d00e      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a16      	ldr	r2, [pc, #88]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d009      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a15      	ldr	r2, [pc, #84]	@ (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d004      	beq.n	8004a46 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a13      	ldr	r2, [pc, #76]	@ (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d10c      	bne.n	8004a60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	68ba      	ldr	r2, [r7, #8]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40010000 	.word	0x40010000
 8004a84:	40000400 	.word	0x40000400
 8004a88:	40000800 	.word	0x40000800
 8004a8c:	40000c00 	.word	0x40000c00
 8004a90:	40014000 	.word	0x40014000

08004a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b082      	sub	sp, #8
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e042      	b.n	8004b54 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7fc ff9a 	bl	8001a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2224      	movs	r2, #36	@ 0x24
 8004aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004afe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 fec9 	bl	8005898 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	695a      	ldr	r2, [r3, #20]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68da      	ldr	r2, [r3, #12]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2220      	movs	r2, #32
 8004b40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	4613      	mov	r3, r2
 8004b68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d112      	bne.n	8004b9c <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_UART_Receive_IT+0x26>
 8004b7c:	88fb      	ldrh	r3, [r7, #6]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e00b      	b.n	8004b9e <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004b8c:	88fb      	ldrh	r3, [r7, #6]
 8004b8e:	461a      	mov	r2, r3
 8004b90:	68b9      	ldr	r1, [r7, #8]
 8004b92:	68f8      	ldr	r0, [r7, #12]
 8004b94:	f000 fbe6 	bl	8005364 <UART_Start_Receive_IT>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	e000      	b.n	8004b9e <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d112      	bne.n	8004be6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Receive_DMA+0x26>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e00b      	b.n	8004be8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fbfb 	bl	80053d8 <UART_Start_Receive_DMA>
 8004be2:	4603      	mov	r3, r0
 8004be4:	e000      	b.n	8004be8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004be6:	2302      	movs	r3, #2
  }
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3710      	adds	r7, #16
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b0ba      	sub	sp, #232	@ 0xe8
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c16:	2300      	movs	r3, #0
 8004c18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c26:	f003 030f 	and.w	r3, r3, #15
 8004c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10f      	bne.n	8004c56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c3a:	f003 0320 	and.w	r3, r3, #32
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <HAL_UART_IRQHandler+0x66>
 8004c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fd63 	bl	800571a <UART_Receive_IT>
      return;
 8004c54:	e25b      	b.n	800510e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 80de 	beq.w	8004e1c <HAL_UART_IRQHandler+0x22c>
 8004c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d106      	bne.n	8004c7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 80d1 	beq.w	8004e1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00b      	beq.n	8004c9e <HAL_UART_IRQHandler+0xae>
 8004c86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d005      	beq.n	8004c9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c96:	f043 0201 	orr.w	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ca2:	f003 0304 	and.w	r3, r3, #4
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_UART_IRQHandler+0xd2>
 8004caa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cae:	f003 0301 	and.w	r3, r3, #1
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d005      	beq.n	8004cc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cba:	f043 0202 	orr.w	r2, r3, #2
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00b      	beq.n	8004ce6 <HAL_UART_IRQHandler+0xf6>
 8004cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d005      	beq.n	8004ce6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cde:	f043 0204 	orr.w	r2, r3, #4
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cea:	f003 0308 	and.w	r3, r3, #8
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d011      	beq.n	8004d16 <HAL_UART_IRQHandler+0x126>
 8004cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf6:	f003 0320 	and.w	r3, r3, #32
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d105      	bne.n	8004d0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d0e:	f043 0208 	orr.w	r2, r3, #8
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 81f2 	beq.w	8005104 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_UART_IRQHandler+0x14e>
 8004d2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d30:	f003 0320 	and.w	r3, r3, #32
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fcee 	bl	800571a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d48:	2b40      	cmp	r3, #64	@ 0x40
 8004d4a:	bf0c      	ite	eq
 8004d4c:	2301      	moveq	r3, #1
 8004d4e:	2300      	movne	r3, #0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d5a:	f003 0308 	and.w	r3, r3, #8
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d103      	bne.n	8004d6a <HAL_UART_IRQHandler+0x17a>
 8004d62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d04f      	beq.n	8004e0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fbf6 	bl	800555c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d7a:	2b40      	cmp	r3, #64	@ 0x40
 8004d7c:	d141      	bne.n	8004e02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3314      	adds	r3, #20
 8004d84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d8c:	e853 3f00 	ldrex	r3, [r3]
 8004d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3314      	adds	r3, #20
 8004da6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004daa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004dae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004db6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004dba:	e841 2300 	strex	r3, r2, [r1]
 8004dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004dc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1d9      	bne.n	8004d7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d013      	beq.n	8004dfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd6:	4a7e      	ldr	r2, [pc, #504]	@ (8004fd0 <HAL_UART_IRQHandler+0x3e0>)
 8004dd8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd f9e4 	bl	80021ac <HAL_DMA_Abort_IT>
 8004de4:	4603      	mov	r3, r0
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d016      	beq.n	8004e18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004df4:	4610      	mov	r0, r2
 8004df6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df8:	e00e      	b.n	8004e18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f99e 	bl	800513c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e00:	e00a      	b.n	8004e18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f99a 	bl	800513c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	e006      	b.n	8004e18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f996 	bl	800513c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e16:	e175      	b.n	8005104 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e18:	bf00      	nop
    return;
 8004e1a:	e173      	b.n	8005104 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	f040 814f 	bne.w	80050c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8148 	beq.w	80050c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 8141 	beq.w	80050c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e42:	2300      	movs	r3, #0
 8004e44:	60bb      	str	r3, [r7, #8]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	60bb      	str	r3, [r7, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e62:	2b40      	cmp	r3, #64	@ 0x40
 8004e64:	f040 80b6 	bne.w	8004fd4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	f000 8145 	beq.w	8005108 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e86:	429a      	cmp	r2, r3
 8004e88:	f080 813e 	bcs.w	8005108 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e92:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e9e:	f000 8088 	beq.w	8004fb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004eb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ec0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	330c      	adds	r3, #12
 8004eca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ece:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ed2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004eda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ee6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1d9      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3314      	adds	r3, #20
 8004ef4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004efe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	3314      	adds	r3, #20
 8004f0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f1e:	e841 2300 	strex	r3, r2, [r1]
 8004f22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1e1      	bne.n	8004eee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	3314      	adds	r3, #20
 8004f30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f34:	e853 3f00 	ldrex	r3, [r3]
 8004f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3314      	adds	r3, #20
 8004f4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f56:	e841 2300 	strex	r3, r2, [r1]
 8004f5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1e3      	bne.n	8004f2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2220      	movs	r2, #32
 8004f66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f7a:	e853 3f00 	ldrex	r3, [r3]
 8004f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f82:	f023 0310 	bic.w	r3, r3, #16
 8004f86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	330c      	adds	r3, #12
 8004f90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004f94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004fa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e3      	bne.n	8004f70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7fd f88d 	bl	80020cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2202      	movs	r2, #2
 8004fb6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f8c1 	bl	8005150 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fce:	e09b      	b.n	8005108 <HAL_UART_IRQHandler+0x518>
 8004fd0:	08005623 	.word	0x08005623
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 808e 	beq.w	800510c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ff0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8089 	beq.w	800510c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	330c      	adds	r3, #12
 8005000:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005004:	e853 3f00 	ldrex	r3, [r3]
 8005008:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800500a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005010:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	330c      	adds	r3, #12
 800501a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800501e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005020:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005022:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005024:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005026:	e841 2300 	strex	r3, r2, [r1]
 800502a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800502c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1e3      	bne.n	8004ffa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3314      	adds	r3, #20
 8005038:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503c:	e853 3f00 	ldrex	r3, [r3]
 8005040:	623b      	str	r3, [r7, #32]
   return(result);
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	f023 0301 	bic.w	r3, r3, #1
 8005048:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3314      	adds	r3, #20
 8005052:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005056:	633a      	str	r2, [r7, #48]	@ 0x30
 8005058:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800505c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800505e:	e841 2300 	strex	r3, r2, [r1]
 8005062:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005066:	2b00      	cmp	r3, #0
 8005068:	d1e3      	bne.n	8005032 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2220      	movs	r2, #32
 800506e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	330c      	adds	r3, #12
 800507e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	e853 3f00 	ldrex	r3, [r3]
 8005086:	60fb      	str	r3, [r7, #12]
   return(result);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0310 	bic.w	r3, r3, #16
 800508e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	330c      	adds	r3, #12
 8005098:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800509c:	61fa      	str	r2, [r7, #28]
 800509e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a0:	69b9      	ldr	r1, [r7, #24]
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	e841 2300 	strex	r3, r2, [r1]
 80050a8:	617b      	str	r3, [r7, #20]
   return(result);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1e3      	bne.n	8005078 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2202      	movs	r2, #2
 80050b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050ba:	4619      	mov	r1, r3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f847 	bl	8005150 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050c2:	e023      	b.n	800510c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d009      	beq.n	80050e4 <HAL_UART_IRQHandler+0x4f4>
 80050d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d003      	beq.n	80050e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fab4 	bl	800564a <UART_Transmit_IT>
    return;
 80050e2:	e014      	b.n	800510e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00e      	beq.n	800510e <HAL_UART_IRQHandler+0x51e>
 80050f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d008      	beq.n	800510e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 faf4 	bl	80056ea <UART_EndTransmit_IT>
    return;
 8005102:	e004      	b.n	800510e <HAL_UART_IRQHandler+0x51e>
    return;
 8005104:	bf00      	nop
 8005106:	e002      	b.n	800510e <HAL_UART_IRQHandler+0x51e>
      return;
 8005108:	bf00      	nop
 800510a:	e000      	b.n	800510e <HAL_UART_IRQHandler+0x51e>
      return;
 800510c:	bf00      	nop
  }
}
 800510e:	37e8      	adds	r7, #232	@ 0xe8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005130:	bf00      	nop
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005144:	bf00      	nop
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800515c:	bf00      	nop
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b09c      	sub	sp, #112	@ 0x70
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005174:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d172      	bne.n	800526a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005184:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005186:	2200      	movs	r2, #0
 8005188:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800518a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	330c      	adds	r3, #12
 8005190:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005192:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005194:	e853 3f00 	ldrex	r3, [r3]
 8005198:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800519a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800519c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80051a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	330c      	adds	r3, #12
 80051a8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80051aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80051ac:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80051b0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80051b2:	e841 2300 	strex	r3, r2, [r1]
 80051b6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80051b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d1e5      	bne.n	800518a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3314      	adds	r3, #20
 80051c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d0:	f023 0301 	bic.w	r3, r3, #1
 80051d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80051d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	3314      	adds	r3, #20
 80051dc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80051de:	647a      	str	r2, [r7, #68]	@ 0x44
 80051e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80051e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e5      	bne.n	80051be <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3314      	adds	r3, #20
 80051f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	623b      	str	r3, [r7, #32]
   return(result);
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005208:	663b      	str	r3, [r7, #96]	@ 0x60
 800520a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3314      	adds	r3, #20
 8005210:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005212:	633a      	str	r2, [r7, #48]	@ 0x30
 8005214:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e5      	bne.n	80051f2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005228:	2220      	movs	r2, #32
 800522a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800522e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005232:	2b01      	cmp	r3, #1
 8005234:	d119      	bne.n	800526a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005236:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	330c      	adds	r3, #12
 800523c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	e853 3f00 	ldrex	r3, [r3]
 8005244:	60fb      	str	r3, [r7, #12]
   return(result);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f023 0310 	bic.w	r3, r3, #16
 800524c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800524e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	330c      	adds	r3, #12
 8005254:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005256:	61fa      	str	r2, [r7, #28]
 8005258:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800525a:	69b9      	ldr	r1, [r7, #24]
 800525c:	69fa      	ldr	r2, [r7, #28]
 800525e:	e841 2300 	strex	r3, r2, [r1]
 8005262:	617b      	str	r3, [r7, #20]
   return(result);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1e5      	bne.n	8005236 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800526a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800526c:	2200      	movs	r2, #0
 800526e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005274:	2b01      	cmp	r3, #1
 8005276:	d106      	bne.n	8005286 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800527a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800527c:	4619      	mov	r1, r3
 800527e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005280:	f7ff ff66 	bl	8005150 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005284:	e002      	b.n	800528c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005286:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005288:	f7fb fb00 	bl	800088c <HAL_UART_RxCpltCallback>
}
 800528c:	bf00      	nop
 800528e:	3770      	adds	r7, #112	@ 0x70
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d108      	bne.n	80052c2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052b4:	085b      	lsrs	r3, r3, #1
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	4619      	mov	r1, r3
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7ff ff48 	bl	8005150 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052c0:	e002      	b.n	80052c8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f7ff ff30 	bl	8005128 <HAL_UART_RxHalfCpltCallback>
}
 80052c8:	bf00      	nop
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80052d8:	2300      	movs	r3, #0
 80052da:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ec:	2b80      	cmp	r3, #128	@ 0x80
 80052ee:	bf0c      	ite	eq
 80052f0:	2301      	moveq	r3, #1
 80052f2:	2300      	movne	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b21      	cmp	r3, #33	@ 0x21
 8005302:	d108      	bne.n	8005316 <UART_DMAError+0x46>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d005      	beq.n	8005316 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2200      	movs	r2, #0
 800530e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005310:	68b8      	ldr	r0, [r7, #8]
 8005312:	f000 f8fb 	bl	800550c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	695b      	ldr	r3, [r3, #20]
 800531c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005320:	2b40      	cmp	r3, #64	@ 0x40
 8005322:	bf0c      	ite	eq
 8005324:	2301      	moveq	r3, #1
 8005326:	2300      	movne	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005332:	b2db      	uxtb	r3, r3
 8005334:	2b22      	cmp	r3, #34	@ 0x22
 8005336:	d108      	bne.n	800534a <UART_DMAError+0x7a>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d005      	beq.n	800534a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2200      	movs	r2, #0
 8005342:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005344:	68b8      	ldr	r0, [r7, #8]
 8005346:	f000 f909 	bl	800555c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800534e:	f043 0210 	orr.w	r2, r3, #16
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005356:	68b8      	ldr	r0, [r7, #8]
 8005358:	f7ff fef0 	bl	800513c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800535c:	bf00      	nop
 800535e:	3710      	adds	r7, #16
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005364:	b480      	push	{r7}
 8005366:	b085      	sub	sp, #20
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	4613      	mov	r3, r2
 8005370:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	88fa      	ldrh	r2, [r7, #6]
 800537c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	88fa      	ldrh	r2, [r7, #6]
 8005382:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2222      	movs	r2, #34	@ 0x22
 800538e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d007      	beq.n	80053aa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0201 	orr.w	r2, r2, #1
 80053b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0220 	orr.w	r2, r2, #32
 80053c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b098      	sub	sp, #96	@ 0x60
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	4613      	mov	r3, r2
 80053e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	88fa      	ldrh	r2, [r7, #6]
 80053f0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2222      	movs	r2, #34	@ 0x22
 80053fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005404:	4a3e      	ldr	r2, [pc, #248]	@ (8005500 <UART_Start_Receive_DMA+0x128>)
 8005406:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800540c:	4a3d      	ldr	r2, [pc, #244]	@ (8005504 <UART_Start_Receive_DMA+0x12c>)
 800540e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005414:	4a3c      	ldr	r2, [pc, #240]	@ (8005508 <UART_Start_Receive_DMA+0x130>)
 8005416:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541c:	2200      	movs	r2, #0
 800541e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005420:	f107 0308 	add.w	r3, r7, #8
 8005424:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3304      	adds	r3, #4
 8005430:	4619      	mov	r1, r3
 8005432:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	f7fc fdf0 	bl	800201c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800543c:	2300      	movs	r3, #0
 800543e:	613b      	str	r3, [r7, #16]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	613b      	str	r3, [r7, #16]
 8005450:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d019      	beq.n	800548e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005464:	e853 3f00 	ldrex	r3, [r3]
 8005468:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800546a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800546c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005470:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	330c      	adds	r3, #12
 8005478:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800547a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800547c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005480:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005482:	e841 2300 	strex	r3, r2, [r1]
 8005486:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e5      	bne.n	800545a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3314      	adds	r3, #20
 8005494:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800549e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3314      	adds	r3, #20
 80054ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80054ae:	63ba      	str	r2, [r7, #56]	@ 0x38
 80054b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80054b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054b6:	e841 2300 	strex	r3, r2, [r1]
 80054ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1e5      	bne.n	800548e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	3314      	adds	r3, #20
 80054c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	e853 3f00 	ldrex	r3, [r3]
 80054d0:	617b      	str	r3, [r7, #20]
   return(result);
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3314      	adds	r3, #20
 80054e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80054e2:	627a      	str	r2, [r7, #36]	@ 0x24
 80054e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e6:	6a39      	ldr	r1, [r7, #32]
 80054e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1e5      	bne.n	80054c2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80054f6:	2300      	movs	r3, #0
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3760      	adds	r7, #96	@ 0x60
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	08005169 	.word	0x08005169
 8005504:	08005295 	.word	0x08005295
 8005508:	080052d1 	.word	0x080052d1

0800550c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800550c:	b480      	push	{r7}
 800550e:	b089      	sub	sp, #36	@ 0x24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	330c      	adds	r3, #12
 800551a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	e853 3f00 	ldrex	r3, [r3]
 8005522:	60bb      	str	r3, [r7, #8]
   return(result);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800552a:	61fb      	str	r3, [r7, #28]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	330c      	adds	r3, #12
 8005532:	69fa      	ldr	r2, [r7, #28]
 8005534:	61ba      	str	r2, [r7, #24]
 8005536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005538:	6979      	ldr	r1, [r7, #20]
 800553a:	69ba      	ldr	r2, [r7, #24]
 800553c:	e841 2300 	strex	r3, r2, [r1]
 8005540:	613b      	str	r3, [r7, #16]
   return(result);
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d1e5      	bne.n	8005514 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2220      	movs	r2, #32
 800554c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005550:	bf00      	nop
 8005552:	3724      	adds	r7, #36	@ 0x24
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800555c:	b480      	push	{r7}
 800555e:	b095      	sub	sp, #84	@ 0x54
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	330c      	adds	r3, #12
 800556a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556e:	e853 3f00 	ldrex	r3, [r3]
 8005572:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800557a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	330c      	adds	r3, #12
 8005582:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005584:	643a      	str	r2, [r7, #64]	@ 0x40
 8005586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800558a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800558c:	e841 2300 	strex	r3, r2, [r1]
 8005590:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005594:	2b00      	cmp	r3, #0
 8005596:	d1e5      	bne.n	8005564 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	3314      	adds	r3, #20
 800559e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	e853 3f00 	ldrex	r3, [r3]
 80055a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f023 0301 	bic.w	r3, r3, #1
 80055ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3314      	adds	r3, #20
 80055b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055c0:	e841 2300 	strex	r3, r2, [r1]
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d1e5      	bne.n	8005598 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d119      	bne.n	8005608 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	330c      	adds	r3, #12
 80055da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	f023 0310 	bic.w	r3, r3, #16
 80055ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	330c      	adds	r3, #12
 80055f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055f4:	61ba      	str	r2, [r7, #24]
 80055f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6979      	ldr	r1, [r7, #20]
 80055fa:	69ba      	ldr	r2, [r7, #24]
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	613b      	str	r3, [r7, #16]
   return(result);
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e5      	bne.n	80055d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005616:	bf00      	nop
 8005618:	3754      	adds	r7, #84	@ 0x54
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005622:	b580      	push	{r7, lr}
 8005624:	b084      	sub	sp, #16
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800562e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2200      	movs	r2, #0
 8005634:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f7ff fd7d 	bl	800513c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005642:	bf00      	nop
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}

0800564a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800564a:	b480      	push	{r7}
 800564c:	b085      	sub	sp, #20
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b21      	cmp	r3, #33	@ 0x21
 800565c:	d13e      	bne.n	80056dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005666:	d114      	bne.n	8005692 <UART_Transmit_IT+0x48>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d110      	bne.n	8005692 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a1b      	ldr	r3, [r3, #32]
 8005674:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	881b      	ldrh	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005684:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	1c9a      	adds	r2, r3, #2
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	621a      	str	r2, [r3, #32]
 8005690:	e008      	b.n	80056a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	1c59      	adds	r1, r3, #1
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	6211      	str	r1, [r2, #32]
 800569c:	781a      	ldrb	r2, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	4619      	mov	r1, r3
 80056b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10f      	bne.n	80056d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68da      	ldr	r2, [r3, #12]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80056c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056ea:	b580      	push	{r7, lr}
 80056ec:	b082      	sub	sp, #8
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005700:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7ff fd02 	bl	8005114 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3708      	adds	r7, #8
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}

0800571a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800571a:	b580      	push	{r7, lr}
 800571c:	b08c      	sub	sp, #48	@ 0x30
 800571e:	af00      	add	r7, sp, #0
 8005720:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b22      	cmp	r3, #34	@ 0x22
 800572c:	f040 80ae 	bne.w	800588c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005738:	d117      	bne.n	800576a <UART_Receive_IT+0x50>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d113      	bne.n	800576a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005742:	2300      	movs	r3, #0
 8005744:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	b29b      	uxth	r3, r3
 8005754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005758:	b29a      	uxth	r2, r3
 800575a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	1c9a      	adds	r2, r3, #2
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	629a      	str	r2, [r3, #40]	@ 0x28
 8005768:	e026      	b.n	80057b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005770:	2300      	movs	r3, #0
 8005772:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800577c:	d007      	beq.n	800578e <UART_Receive_IT+0x74>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <UART_Receive_IT+0x82>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d106      	bne.n	800579c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	b2da      	uxtb	r2, r3
 8005796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	e008      	b.n	80057ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	3b01      	subs	r3, #1
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	4619      	mov	r1, r3
 80057c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d15d      	bne.n	8005888 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f022 0220 	bic.w	r2, r2, #32
 80057da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68da      	ldr	r2, [r3, #12]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0201 	bic.w	r2, r2, #1
 80057fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800580e:	2b01      	cmp	r3, #1
 8005810:	d135      	bne.n	800587e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	330c      	adds	r3, #12
 800581e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	e853 3f00 	ldrex	r3, [r3]
 8005826:	613b      	str	r3, [r7, #16]
   return(result);
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	f023 0310 	bic.w	r3, r3, #16
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	330c      	adds	r3, #12
 8005836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005838:	623a      	str	r2, [r7, #32]
 800583a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583c:	69f9      	ldr	r1, [r7, #28]
 800583e:	6a3a      	ldr	r2, [r7, #32]
 8005840:	e841 2300 	strex	r3, r2, [r1]
 8005844:	61bb      	str	r3, [r7, #24]
   return(result);
 8005846:	69bb      	ldr	r3, [r7, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e5      	bne.n	8005818 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0310 	and.w	r3, r3, #16
 8005856:	2b10      	cmp	r3, #16
 8005858:	d10a      	bne.n	8005870 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7ff fc6a 	bl	8005150 <HAL_UARTEx_RxEventCallback>
 800587c:	e002      	b.n	8005884 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7fb f804 	bl	800088c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005884:	2300      	movs	r3, #0
 8005886:	e002      	b.n	800588e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005888:	2300      	movs	r3, #0
 800588a:	e000      	b.n	800588e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800588c:	2302      	movs	r3, #2
  }
}
 800588e:	4618      	mov	r0, r3
 8005890:	3730      	adds	r7, #48	@ 0x30
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005898:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800589c:	b0c0      	sub	sp, #256	@ 0x100
 800589e:	af00      	add	r7, sp, #0
 80058a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80058b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058b4:	68d9      	ldr	r1, [r3, #12]
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	ea40 0301 	orr.w	r3, r0, r1
 80058c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80058c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	431a      	orrs	r2, r3
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80058e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80058f0:	f021 010c 	bic.w	r1, r1, #12
 80058f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80058fe:	430b      	orrs	r3, r1
 8005900:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800590e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005912:	6999      	ldr	r1, [r3, #24]
 8005914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	ea40 0301 	orr.w	r3, r0, r1
 800591e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	4b8f      	ldr	r3, [pc, #572]	@ (8005b64 <UART_SetConfig+0x2cc>)
 8005928:	429a      	cmp	r2, r3
 800592a:	d005      	beq.n	8005938 <UART_SetConfig+0xa0>
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	4b8d      	ldr	r3, [pc, #564]	@ (8005b68 <UART_SetConfig+0x2d0>)
 8005934:	429a      	cmp	r2, r3
 8005936:	d104      	bne.n	8005942 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005938:	f7fd fd00 	bl	800333c <HAL_RCC_GetPCLK2Freq>
 800593c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005940:	e003      	b.n	800594a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005942:	f7fd fce7 	bl	8003314 <HAL_RCC_GetPCLK1Freq>
 8005946:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800594a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800594e:	69db      	ldr	r3, [r3, #28]
 8005950:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005954:	f040 810c 	bne.w	8005b70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800595c:	2200      	movs	r2, #0
 800595e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005962:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005966:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800596a:	4622      	mov	r2, r4
 800596c:	462b      	mov	r3, r5
 800596e:	1891      	adds	r1, r2, r2
 8005970:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005972:	415b      	adcs	r3, r3
 8005974:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005976:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800597a:	4621      	mov	r1, r4
 800597c:	eb12 0801 	adds.w	r8, r2, r1
 8005980:	4629      	mov	r1, r5
 8005982:	eb43 0901 	adc.w	r9, r3, r1
 8005986:	f04f 0200 	mov.w	r2, #0
 800598a:	f04f 0300 	mov.w	r3, #0
 800598e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800599a:	4690      	mov	r8, r2
 800599c:	4699      	mov	r9, r3
 800599e:	4623      	mov	r3, r4
 80059a0:	eb18 0303 	adds.w	r3, r8, r3
 80059a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80059a8:	462b      	mov	r3, r5
 80059aa:	eb49 0303 	adc.w	r3, r9, r3
 80059ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80059b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80059be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80059c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80059c6:	460b      	mov	r3, r1
 80059c8:	18db      	adds	r3, r3, r3
 80059ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80059cc:	4613      	mov	r3, r2
 80059ce:	eb42 0303 	adc.w	r3, r2, r3
 80059d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80059d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80059d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80059dc:	f7fa fc00 	bl	80001e0 <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	4b61      	ldr	r3, [pc, #388]	@ (8005b6c <UART_SetConfig+0x2d4>)
 80059e6:	fba3 2302 	umull	r2, r3, r3, r2
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	011c      	lsls	r4, r3, #4
 80059ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80059fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005a00:	4642      	mov	r2, r8
 8005a02:	464b      	mov	r3, r9
 8005a04:	1891      	adds	r1, r2, r2
 8005a06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005a08:	415b      	adcs	r3, r3
 8005a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005a10:	4641      	mov	r1, r8
 8005a12:	eb12 0a01 	adds.w	sl, r2, r1
 8005a16:	4649      	mov	r1, r9
 8005a18:	eb43 0b01 	adc.w	fp, r3, r1
 8005a1c:	f04f 0200 	mov.w	r2, #0
 8005a20:	f04f 0300 	mov.w	r3, #0
 8005a24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005a28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a30:	4692      	mov	sl, r2
 8005a32:	469b      	mov	fp, r3
 8005a34:	4643      	mov	r3, r8
 8005a36:	eb1a 0303 	adds.w	r3, sl, r3
 8005a3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a3e:	464b      	mov	r3, r9
 8005a40:	eb4b 0303 	adc.w	r3, fp, r3
 8005a44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005a58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	18db      	adds	r3, r3, r3
 8005a60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a62:	4613      	mov	r3, r2
 8005a64:	eb42 0303 	adc.w	r3, r2, r3
 8005a68:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005a6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005a72:	f7fa fbb5 	bl	80001e0 <__aeabi_uldivmod>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4611      	mov	r1, r2
 8005a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8005b6c <UART_SetConfig+0x2d4>)
 8005a7e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	2264      	movs	r2, #100	@ 0x64
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	1acb      	subs	r3, r1, r3
 8005a8c:	00db      	lsls	r3, r3, #3
 8005a8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005a92:	4b36      	ldr	r3, [pc, #216]	@ (8005b6c <UART_SetConfig+0x2d4>)
 8005a94:	fba3 2302 	umull	r2, r3, r3, r2
 8005a98:	095b      	lsrs	r3, r3, #5
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005aa0:	441c      	add	r4, r3
 8005aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005aac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ab0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	464b      	mov	r3, r9
 8005ab8:	1891      	adds	r1, r2, r2
 8005aba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005abc:	415b      	adcs	r3, r3
 8005abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ac0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ac4:	4641      	mov	r1, r8
 8005ac6:	1851      	adds	r1, r2, r1
 8005ac8:	6339      	str	r1, [r7, #48]	@ 0x30
 8005aca:	4649      	mov	r1, r9
 8005acc:	414b      	adcs	r3, r1
 8005ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad0:	f04f 0200 	mov.w	r2, #0
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005adc:	4659      	mov	r1, fp
 8005ade:	00cb      	lsls	r3, r1, #3
 8005ae0:	4651      	mov	r1, sl
 8005ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ae6:	4651      	mov	r1, sl
 8005ae8:	00ca      	lsls	r2, r1, #3
 8005aea:	4610      	mov	r0, r2
 8005aec:	4619      	mov	r1, r3
 8005aee:	4603      	mov	r3, r0
 8005af0:	4642      	mov	r2, r8
 8005af2:	189b      	adds	r3, r3, r2
 8005af4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005af8:	464b      	mov	r3, r9
 8005afa:	460a      	mov	r2, r1
 8005afc:	eb42 0303 	adc.w	r3, r2, r3
 8005b00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005b10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005b14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005b18:	460b      	mov	r3, r1
 8005b1a:	18db      	adds	r3, r3, r3
 8005b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b1e:	4613      	mov	r3, r2
 8005b20:	eb42 0303 	adc.w	r3, r2, r3
 8005b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005b2e:	f7fa fb57 	bl	80001e0 <__aeabi_uldivmod>
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4b0d      	ldr	r3, [pc, #52]	@ (8005b6c <UART_SetConfig+0x2d4>)
 8005b38:	fba3 1302 	umull	r1, r3, r3, r2
 8005b3c:	095b      	lsrs	r3, r3, #5
 8005b3e:	2164      	movs	r1, #100	@ 0x64
 8005b40:	fb01 f303 	mul.w	r3, r1, r3
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	00db      	lsls	r3, r3, #3
 8005b48:	3332      	adds	r3, #50	@ 0x32
 8005b4a:	4a08      	ldr	r2, [pc, #32]	@ (8005b6c <UART_SetConfig+0x2d4>)
 8005b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b50:	095b      	lsrs	r3, r3, #5
 8005b52:	f003 0207 	and.w	r2, r3, #7
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4422      	add	r2, r4
 8005b5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005b60:	e106      	b.n	8005d70 <UART_SetConfig+0x4d8>
 8005b62:	bf00      	nop
 8005b64:	40011000 	.word	0x40011000
 8005b68:	40011400 	.word	0x40011400
 8005b6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b74:	2200      	movs	r2, #0
 8005b76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005b82:	4642      	mov	r2, r8
 8005b84:	464b      	mov	r3, r9
 8005b86:	1891      	adds	r1, r2, r2
 8005b88:	6239      	str	r1, [r7, #32]
 8005b8a:	415b      	adcs	r3, r3
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b92:	4641      	mov	r1, r8
 8005b94:	1854      	adds	r4, r2, r1
 8005b96:	4649      	mov	r1, r9
 8005b98:	eb43 0501 	adc.w	r5, r3, r1
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	00eb      	lsls	r3, r5, #3
 8005ba6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005baa:	00e2      	lsls	r2, r4, #3
 8005bac:	4614      	mov	r4, r2
 8005bae:	461d      	mov	r5, r3
 8005bb0:	4643      	mov	r3, r8
 8005bb2:	18e3      	adds	r3, r4, r3
 8005bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005bb8:	464b      	mov	r3, r9
 8005bba:	eb45 0303 	adc.w	r3, r5, r3
 8005bbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005bce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bd2:	f04f 0200 	mov.w	r2, #0
 8005bd6:	f04f 0300 	mov.w	r3, #0
 8005bda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005bde:	4629      	mov	r1, r5
 8005be0:	008b      	lsls	r3, r1, #2
 8005be2:	4621      	mov	r1, r4
 8005be4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005be8:	4621      	mov	r1, r4
 8005bea:	008a      	lsls	r2, r1, #2
 8005bec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005bf0:	f7fa faf6 	bl	80001e0 <__aeabi_uldivmod>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4b60      	ldr	r3, [pc, #384]	@ (8005d7c <UART_SetConfig+0x4e4>)
 8005bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	011c      	lsls	r4, r3, #4
 8005c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c06:	2200      	movs	r2, #0
 8005c08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005c0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005c10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005c14:	4642      	mov	r2, r8
 8005c16:	464b      	mov	r3, r9
 8005c18:	1891      	adds	r1, r2, r2
 8005c1a:	61b9      	str	r1, [r7, #24]
 8005c1c:	415b      	adcs	r3, r3
 8005c1e:	61fb      	str	r3, [r7, #28]
 8005c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c24:	4641      	mov	r1, r8
 8005c26:	1851      	adds	r1, r2, r1
 8005c28:	6139      	str	r1, [r7, #16]
 8005c2a:	4649      	mov	r1, r9
 8005c2c:	414b      	adcs	r3, r1
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	f04f 0200 	mov.w	r2, #0
 8005c34:	f04f 0300 	mov.w	r3, #0
 8005c38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c3c:	4659      	mov	r1, fp
 8005c3e:	00cb      	lsls	r3, r1, #3
 8005c40:	4651      	mov	r1, sl
 8005c42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c46:	4651      	mov	r1, sl
 8005c48:	00ca      	lsls	r2, r1, #3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	4603      	mov	r3, r0
 8005c50:	4642      	mov	r2, r8
 8005c52:	189b      	adds	r3, r3, r2
 8005c54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c58:	464b      	mov	r3, r9
 8005c5a:	460a      	mov	r2, r1
 8005c5c:	eb42 0303 	adc.w	r3, r2, r3
 8005c60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005c7c:	4649      	mov	r1, r9
 8005c7e:	008b      	lsls	r3, r1, #2
 8005c80:	4641      	mov	r1, r8
 8005c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c86:	4641      	mov	r1, r8
 8005c88:	008a      	lsls	r2, r1, #2
 8005c8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005c8e:	f7fa faa7 	bl	80001e0 <__aeabi_uldivmod>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4611      	mov	r1, r2
 8005c98:	4b38      	ldr	r3, [pc, #224]	@ (8005d7c <UART_SetConfig+0x4e4>)
 8005c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	2264      	movs	r2, #100	@ 0x64
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	1acb      	subs	r3, r1, r3
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	3332      	adds	r3, #50	@ 0x32
 8005cac:	4a33      	ldr	r2, [pc, #204]	@ (8005d7c <UART_SetConfig+0x4e4>)
 8005cae:	fba2 2303 	umull	r2, r3, r2, r3
 8005cb2:	095b      	lsrs	r3, r3, #5
 8005cb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005cb8:	441c      	add	r4, r3
 8005cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8005cc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8005cc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005cc8:	4642      	mov	r2, r8
 8005cca:	464b      	mov	r3, r9
 8005ccc:	1891      	adds	r1, r2, r2
 8005cce:	60b9      	str	r1, [r7, #8]
 8005cd0:	415b      	adcs	r3, r3
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cd8:	4641      	mov	r1, r8
 8005cda:	1851      	adds	r1, r2, r1
 8005cdc:	6039      	str	r1, [r7, #0]
 8005cde:	4649      	mov	r1, r9
 8005ce0:	414b      	adcs	r3, r1
 8005ce2:	607b      	str	r3, [r7, #4]
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005cf0:	4659      	mov	r1, fp
 8005cf2:	00cb      	lsls	r3, r1, #3
 8005cf4:	4651      	mov	r1, sl
 8005cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cfa:	4651      	mov	r1, sl
 8005cfc:	00ca      	lsls	r2, r1, #3
 8005cfe:	4610      	mov	r0, r2
 8005d00:	4619      	mov	r1, r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	4642      	mov	r2, r8
 8005d06:	189b      	adds	r3, r3, r2
 8005d08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d0a:	464b      	mov	r3, r9
 8005d0c:	460a      	mov	r2, r1
 8005d0e:	eb42 0303 	adc.w	r3, r2, r3
 8005d12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005d2c:	4649      	mov	r1, r9
 8005d2e:	008b      	lsls	r3, r1, #2
 8005d30:	4641      	mov	r1, r8
 8005d32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d36:	4641      	mov	r1, r8
 8005d38:	008a      	lsls	r2, r1, #2
 8005d3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005d3e:	f7fa fa4f 	bl	80001e0 <__aeabi_uldivmod>
 8005d42:	4602      	mov	r2, r0
 8005d44:	460b      	mov	r3, r1
 8005d46:	4b0d      	ldr	r3, [pc, #52]	@ (8005d7c <UART_SetConfig+0x4e4>)
 8005d48:	fba3 1302 	umull	r1, r3, r3, r2
 8005d4c:	095b      	lsrs	r3, r3, #5
 8005d4e:	2164      	movs	r1, #100	@ 0x64
 8005d50:	fb01 f303 	mul.w	r3, r1, r3
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	3332      	adds	r3, #50	@ 0x32
 8005d5a:	4a08      	ldr	r2, [pc, #32]	@ (8005d7c <UART_SetConfig+0x4e4>)
 8005d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	f003 020f 	and.w	r2, r3, #15
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4422      	add	r2, r4
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005d76:	46bd      	mov	sp, r7
 8005d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d7c:	51eb851f 	.word	0x51eb851f

08005d80 <__NVIC_SetPriority>:
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	4603      	mov	r3, r0
 8005d88:	6039      	str	r1, [r7, #0]
 8005d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db0a      	blt.n	8005daa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	490c      	ldr	r1, [pc, #48]	@ (8005dcc <__NVIC_SetPriority+0x4c>)
 8005d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d9e:	0112      	lsls	r2, r2, #4
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	440b      	add	r3, r1
 8005da4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005da8:	e00a      	b.n	8005dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	4908      	ldr	r1, [pc, #32]	@ (8005dd0 <__NVIC_SetPriority+0x50>)
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	f003 030f 	and.w	r3, r3, #15
 8005db6:	3b04      	subs	r3, #4
 8005db8:	0112      	lsls	r2, r2, #4
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	761a      	strb	r2, [r3, #24]
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	e000e100 	.word	0xe000e100
 8005dd0:	e000ed00 	.word	0xe000ed00

08005dd4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005dd8:	4b05      	ldr	r3, [pc, #20]	@ (8005df0 <SysTick_Handler+0x1c>)
 8005dda:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005ddc:	f001 fd46 	bl	800786c <xTaskGetSchedulerState>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d001      	beq.n	8005dea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005de6:	f002 fb3f 	bl	8008468 <xPortSysTickHandler>
  }
}
 8005dea:	bf00      	nop
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	e000e010 	.word	0xe000e010

08005df4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005df8:	2100      	movs	r1, #0
 8005dfa:	f06f 0004 	mvn.w	r0, #4
 8005dfe:	f7ff ffbf 	bl	8005d80 <__NVIC_SetPriority>
#endif
}
 8005e02:	bf00      	nop
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e0e:	f3ef 8305 	mrs	r3, IPSR
 8005e12:	603b      	str	r3, [r7, #0]
  return(result);
 8005e14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005e1a:	f06f 0305 	mvn.w	r3, #5
 8005e1e:	607b      	str	r3, [r7, #4]
 8005e20:	e00c      	b.n	8005e3c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005e22:	4b0a      	ldr	r3, [pc, #40]	@ (8005e4c <osKernelInitialize+0x44>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d105      	bne.n	8005e36 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005e2a:	4b08      	ldr	r3, [pc, #32]	@ (8005e4c <osKernelInitialize+0x44>)
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005e30:	2300      	movs	r3, #0
 8005e32:	607b      	str	r3, [r7, #4]
 8005e34:	e002      	b.n	8005e3c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005e36:	f04f 33ff 	mov.w	r3, #4294967295
 8005e3a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e3c:	687b      	ldr	r3, [r7, #4]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
 8005e4a:	bf00      	nop
 8005e4c:	200003b4 	.word	0x200003b4

08005e50 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e56:	f3ef 8305 	mrs	r3, IPSR
 8005e5a:	603b      	str	r3, [r7, #0]
  return(result);
 8005e5c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d003      	beq.n	8005e6a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005e62:	f06f 0305 	mvn.w	r3, #5
 8005e66:	607b      	str	r3, [r7, #4]
 8005e68:	e010      	b.n	8005e8c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005e6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005e98 <osKernelStart+0x48>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d109      	bne.n	8005e86 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005e72:	f7ff ffbf 	bl	8005df4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005e76:	4b08      	ldr	r3, [pc, #32]	@ (8005e98 <osKernelStart+0x48>)
 8005e78:	2202      	movs	r2, #2
 8005e7a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005e7c:	f001 f892 	bl	8006fa4 <vTaskStartScheduler>
      stat = osOK;
 8005e80:	2300      	movs	r3, #0
 8005e82:	607b      	str	r3, [r7, #4]
 8005e84:	e002      	b.n	8005e8c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005e86:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005e8c:	687b      	ldr	r3, [r7, #4]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200003b4 	.word	0x200003b4

08005e9c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08e      	sub	sp, #56	@ 0x38
 8005ea0:	af04      	add	r7, sp, #16
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eac:	f3ef 8305 	mrs	r3, IPSR
 8005eb0:	617b      	str	r3, [r7, #20]
  return(result);
 8005eb2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d17e      	bne.n	8005fb6 <osThreadNew+0x11a>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d07b      	beq.n	8005fb6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005ebe:	2380      	movs	r3, #128	@ 0x80
 8005ec0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005ec2:	2318      	movs	r3, #24
 8005ec4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005eca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ece:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d045      	beq.n	8005f62 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d002      	beq.n	8005ee4 <osThreadNew+0x48>
        name = attr->name;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d008      	beq.n	8005f0a <osThreadNew+0x6e>
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	2b38      	cmp	r3, #56	@ 0x38
 8005efc:	d805      	bhi.n	8005f0a <osThreadNew+0x6e>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d001      	beq.n	8005f0e <osThreadNew+0x72>
        return (NULL);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	e054      	b.n	8005fb8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d003      	beq.n	8005f1e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	089b      	lsrs	r3, r3, #2
 8005f1c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00e      	beq.n	8005f44 <osThreadNew+0xa8>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	2ba7      	cmp	r3, #167	@ 0xa7
 8005f2c:	d90a      	bls.n	8005f44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d006      	beq.n	8005f44 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d002      	beq.n	8005f44 <osThreadNew+0xa8>
        mem = 1;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	e010      	b.n	8005f66 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10c      	bne.n	8005f66 <osThreadNew+0xca>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d108      	bne.n	8005f66 <osThreadNew+0xca>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d104      	bne.n	8005f66 <osThreadNew+0xca>
          mem = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	61bb      	str	r3, [r7, #24]
 8005f60:	e001      	b.n	8005f66 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005f66:	69bb      	ldr	r3, [r7, #24]
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d110      	bne.n	8005f8e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005f74:	9202      	str	r2, [sp, #8]
 8005f76:	9301      	str	r3, [sp, #4]
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	6a3a      	ldr	r2, [r7, #32]
 8005f80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 fe1a 	bl	8006bbc <xTaskCreateStatic>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	613b      	str	r3, [r7, #16]
 8005f8c:	e013      	b.n	8005fb6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d110      	bne.n	8005fb6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	b29a      	uxth	r2, r3
 8005f98:	f107 0310 	add.w	r3, r7, #16
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fe68 	bl	8006c7c <xTaskCreate>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d001      	beq.n	8005fb6 <osThreadNew+0x11a>
            hTask = NULL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005fb6:	693b      	ldr	r3, [r7, #16]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3728      	adds	r7, #40	@ 0x28
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005fc8:	f3ef 8305 	mrs	r3, IPSR
 8005fcc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005fce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d003      	beq.n	8005fdc <osDelay+0x1c>
    stat = osErrorISR;
 8005fd4:	f06f 0305 	mvn.w	r3, #5
 8005fd8:	60fb      	str	r3, [r7, #12]
 8005fda:	e007      	b.n	8005fec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d002      	beq.n	8005fec <osDelay+0x2c>
      vTaskDelay(ticks);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 ffa6 	bl	8006f38 <vTaskDelay>
    }
  }

  return (stat);
 8005fec:	68fb      	ldr	r3, [r7, #12]
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
	...

08005ff8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4a07      	ldr	r2, [pc, #28]	@ (8006024 <vApplicationGetIdleTaskMemory+0x2c>)
 8006008:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	4a06      	ldr	r2, [pc, #24]	@ (8006028 <vApplicationGetIdleTaskMemory+0x30>)
 800600e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2280      	movs	r2, #128	@ 0x80
 8006014:	601a      	str	r2, [r3, #0]
}
 8006016:	bf00      	nop
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	200003b8 	.word	0x200003b8
 8006028:	20000460 	.word	0x20000460

0800602c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800602c:	b480      	push	{r7}
 800602e:	b085      	sub	sp, #20
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4a07      	ldr	r2, [pc, #28]	@ (8006058 <vApplicationGetTimerTaskMemory+0x2c>)
 800603c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	4a06      	ldr	r2, [pc, #24]	@ (800605c <vApplicationGetTimerTaskMemory+0x30>)
 8006042:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800604a:	601a      	str	r2, [r3, #0]
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	20000660 	.word	0x20000660
 800605c:	20000708 	.word	0x20000708

08006060 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f103 0208 	add.w	r2, r3, #8
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f04f 32ff 	mov.w	r2, #4294967295
 8006078:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f103 0208 	add.w	r2, r3, #8
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f103 0208 	add.w	r2, r3, #8
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006094:	bf00      	nop
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80060ae:	bf00      	nop
 80060b0:	370c      	adds	r7, #12
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr

080060ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80060ba:	b480      	push	{r7}
 80060bc:	b085      	sub	sp, #20
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689a      	ldr	r2, [r3, #8]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	1c5a      	adds	r2, r3, #1
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	601a      	str	r2, [r3, #0]
}
 80060f6:	bf00      	nop
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006102:	b480      	push	{r7}
 8006104:	b085      	sub	sp, #20
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
 800610a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006118:	d103      	bne.n	8006122 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e00c      	b.n	800613c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	3308      	adds	r3, #8
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	e002      	b.n	8006130 <vListInsert+0x2e>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	429a      	cmp	r2, r3
 800613a:	d2f6      	bcs.n	800612a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	685a      	ldr	r2, [r3, #4]
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	683a      	ldr	r2, [r7, #0]
 800614a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	601a      	str	r2, [r3, #0]
}
 8006168:	bf00      	nop
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006174:	b480      	push	{r7}
 8006176:	b085      	sub	sp, #20
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	6892      	ldr	r2, [r2, #8]
 800618a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6852      	ldr	r2, [r2, #4]
 8006194:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	429a      	cmp	r2, r3
 800619e:	d103      	bne.n	80061a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	1e5a      	subs	r2, r3, #1
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3714      	adds	r7, #20
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10b      	bne.n	80061f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e0:	f383 8811 	msr	BASEPRI, r3
 80061e4:	f3bf 8f6f 	isb	sy
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80061ee:	bf00      	nop
 80061f0:	bf00      	nop
 80061f2:	e7fd      	b.n	80061f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80061f4:	f002 f8a8 	bl	8008348 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006200:	68f9      	ldr	r1, [r7, #12]
 8006202:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006204:	fb01 f303 	mul.w	r3, r1, r3
 8006208:	441a      	add	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2200      	movs	r2, #0
 8006212:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006224:	3b01      	subs	r3, #1
 8006226:	68f9      	ldr	r1, [r7, #12]
 8006228:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800622a:	fb01 f303 	mul.w	r3, r1, r3
 800622e:	441a      	add	r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	22ff      	movs	r2, #255	@ 0xff
 8006238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	22ff      	movs	r2, #255	@ 0xff
 8006240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d114      	bne.n	8006274 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d01a      	beq.n	8006288 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	3310      	adds	r3, #16
 8006256:	4618      	mov	r0, r3
 8006258:	f001 f942 	bl	80074e0 <xTaskRemoveFromEventList>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d012      	beq.n	8006288 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006262:	4b0d      	ldr	r3, [pc, #52]	@ (8006298 <xQueueGenericReset+0xd0>)
 8006264:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006268:	601a      	str	r2, [r3, #0]
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	f3bf 8f6f 	isb	sy
 8006272:	e009      	b.n	8006288 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3310      	adds	r3, #16
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fef1 	bl	8006060 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3324      	adds	r3, #36	@ 0x24
 8006282:	4618      	mov	r0, r3
 8006284:	f7ff feec 	bl	8006060 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006288:	f002 f890 	bl	80083ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800628c:	2301      	movs	r3, #1
}
 800628e:	4618      	mov	r0, r3
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08e      	sub	sp, #56	@ 0x38
 80062a0:	af02      	add	r7, sp, #8
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10b      	bne.n	80062c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	e7fd      	b.n	80062e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d002      	beq.n	80062f2 <xQueueGenericCreateStatic+0x56>
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <xQueueGenericCreateStatic+0x5a>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <xQueueGenericCreateStatic+0x5c>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10b      	bne.n	8006314 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	623b      	str	r3, [r7, #32]
}
 800630e:	bf00      	nop
 8006310:	bf00      	nop
 8006312:	e7fd      	b.n	8006310 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <xQueueGenericCreateStatic+0x84>
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d101      	bne.n	8006324 <xQueueGenericCreateStatic+0x88>
 8006320:	2301      	movs	r3, #1
 8006322:	e000      	b.n	8006326 <xQueueGenericCreateStatic+0x8a>
 8006324:	2300      	movs	r3, #0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	61fb      	str	r3, [r7, #28]
}
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006342:	2350      	movs	r3, #80	@ 0x50
 8006344:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	2b50      	cmp	r3, #80	@ 0x50
 800634a:	d00b      	beq.n	8006364 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800634c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	61bb      	str	r3, [r7, #24]
}
 800635e:	bf00      	nop
 8006360:	bf00      	nop
 8006362:	e7fd      	b.n	8006360 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006364:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800636a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00d      	beq.n	800638c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006378:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800637c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800637e:	9300      	str	r3, [sp, #0]
 8006380:	4613      	mov	r3, r2
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68b9      	ldr	r1, [r7, #8]
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f805 	bl	8006396 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800638c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800638e:	4618      	mov	r0, r3
 8006390:	3730      	adds	r7, #48	@ 0x30
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}

08006396 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	60f8      	str	r0, [r7, #12]
 800639e:	60b9      	str	r1, [r7, #8]
 80063a0:	607a      	str	r2, [r7, #4]
 80063a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d103      	bne.n	80063b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	e002      	b.n	80063b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	68ba      	ldr	r2, [r7, #8]
 80063c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063c4:	2101      	movs	r1, #1
 80063c6:	69b8      	ldr	r0, [r7, #24]
 80063c8:	f7ff fefe 	bl	80061c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	78fa      	ldrb	r2, [r7, #3]
 80063d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063d4:	bf00      	nop
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08e      	sub	sp, #56	@ 0x38
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
 80063e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063ea:	2300      	movs	r3, #0
 80063ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80063f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10b      	bne.n	8006410 <xQueueGenericSend+0x34>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	e7fd      	b.n	800640c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d103      	bne.n	800641e <xQueueGenericSend+0x42>
 8006416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d101      	bne.n	8006422 <xQueueGenericSend+0x46>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueGenericSend+0x48>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10b      	bne.n	8006440 <xQueueGenericSend+0x64>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800642c:	f383 8811 	msr	BASEPRI, r3
 8006430:	f3bf 8f6f 	isb	sy
 8006434:	f3bf 8f4f 	dsb	sy
 8006438:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800643a:	bf00      	nop
 800643c:	bf00      	nop
 800643e:	e7fd      	b.n	800643c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b02      	cmp	r3, #2
 8006444:	d103      	bne.n	800644e <xQueueGenericSend+0x72>
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800644a:	2b01      	cmp	r3, #1
 800644c:	d101      	bne.n	8006452 <xQueueGenericSend+0x76>
 800644e:	2301      	movs	r3, #1
 8006450:	e000      	b.n	8006454 <xQueueGenericSend+0x78>
 8006452:	2300      	movs	r3, #0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10b      	bne.n	8006470 <xQueueGenericSend+0x94>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	623b      	str	r3, [r7, #32]
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	e7fd      	b.n	800646c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006470:	f001 f9fc 	bl	800786c <xTaskGetSchedulerState>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d102      	bne.n	8006480 <xQueueGenericSend+0xa4>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <xQueueGenericSend+0xa8>
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <xQueueGenericSend+0xaa>
 8006484:	2300      	movs	r3, #0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d10b      	bne.n	80064a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800648a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	61fb      	str	r3, [r7, #28]
}
 800649c:	bf00      	nop
 800649e:	bf00      	nop
 80064a0:	e7fd      	b.n	800649e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064a2:	f001 ff51 	bl	8008348 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d302      	bcc.n	80064b8 <xQueueGenericSend+0xdc>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b02      	cmp	r3, #2
 80064b6:	d129      	bne.n	800650c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064b8:	683a      	ldr	r2, [r7, #0]
 80064ba:	68b9      	ldr	r1, [r7, #8]
 80064bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064be:	f000 fa0f 	bl	80068e0 <prvCopyDataToQueue>
 80064c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d010      	beq.n	80064ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	3324      	adds	r3, #36	@ 0x24
 80064d0:	4618      	mov	r0, r3
 80064d2:	f001 f805 	bl	80074e0 <xTaskRemoveFromEventList>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d013      	beq.n	8006504 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064dc:	4b3f      	ldr	r3, [pc, #252]	@ (80065dc <xQueueGenericSend+0x200>)
 80064de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064e2:	601a      	str	r2, [r3, #0]
 80064e4:	f3bf 8f4f 	dsb	sy
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	e00a      	b.n	8006504 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d007      	beq.n	8006504 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064f4:	4b39      	ldr	r3, [pc, #228]	@ (80065dc <xQueueGenericSend+0x200>)
 80064f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006504:	f001 ff52 	bl	80083ac <vPortExitCritical>
				return pdPASS;
 8006508:	2301      	movs	r3, #1
 800650a:	e063      	b.n	80065d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d103      	bne.n	800651a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006512:	f001 ff4b 	bl	80083ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006516:	2300      	movs	r3, #0
 8006518:	e05c      	b.n	80065d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800651a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800651c:	2b00      	cmp	r3, #0
 800651e:	d106      	bne.n	800652e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006520:	f107 0314 	add.w	r3, r7, #20
 8006524:	4618      	mov	r0, r3
 8006526:	f001 f83f 	bl	80075a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800652a:	2301      	movs	r3, #1
 800652c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800652e:	f001 ff3d 	bl	80083ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006532:	f000 fda7 	bl	8007084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006536:	f001 ff07 	bl	8008348 <vPortEnterCritical>
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006540:	b25b      	sxtb	r3, r3
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	d103      	bne.n	8006550 <xQueueGenericSend+0x174>
 8006548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654a:	2200      	movs	r2, #0
 800654c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006552:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006556:	b25b      	sxtb	r3, r3
 8006558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800655c:	d103      	bne.n	8006566 <xQueueGenericSend+0x18a>
 800655e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006560:	2200      	movs	r2, #0
 8006562:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006566:	f001 ff21 	bl	80083ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800656a:	1d3a      	adds	r2, r7, #4
 800656c:	f107 0314 	add.w	r3, r7, #20
 8006570:	4611      	mov	r1, r2
 8006572:	4618      	mov	r0, r3
 8006574:	f001 f82e 	bl	80075d4 <xTaskCheckForTimeOut>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d124      	bne.n	80065c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800657e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006580:	f000 faa6 	bl	8006ad0 <prvIsQueueFull>
 8006584:	4603      	mov	r3, r0
 8006586:	2b00      	cmp	r3, #0
 8006588:	d018      	beq.n	80065bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800658a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658c:	3310      	adds	r3, #16
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4611      	mov	r1, r2
 8006592:	4618      	mov	r0, r3
 8006594:	f000 ff52 	bl	800743c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800659a:	f000 fa31 	bl	8006a00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800659e:	f000 fd7f 	bl	80070a0 <xTaskResumeAll>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f47f af7c 	bne.w	80064a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80065aa:	4b0c      	ldr	r3, [pc, #48]	@ (80065dc <xQueueGenericSend+0x200>)
 80065ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	e772      	b.n	80064a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065be:	f000 fa1f 	bl	8006a00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065c2:	f000 fd6d 	bl	80070a0 <xTaskResumeAll>
 80065c6:	e76c      	b.n	80064a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80065c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065ca:	f000 fa19 	bl	8006a00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065ce:	f000 fd67 	bl	80070a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	3738      	adds	r7, #56	@ 0x38
 80065d8:	46bd      	mov	sp, r7
 80065da:	bd80      	pop	{r7, pc}
 80065dc:	e000ed04 	.word	0xe000ed04

080065e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b090      	sub	sp, #64	@ 0x40
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	60f8      	str	r0, [r7, #12]
 80065e8:	60b9      	str	r1, [r7, #8]
 80065ea:	607a      	str	r2, [r7, #4]
 80065ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80065f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10b      	bne.n	8006610 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80065f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800660a:	bf00      	nop
 800660c:	bf00      	nop
 800660e:	e7fd      	b.n	800660c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d103      	bne.n	800661e <xQueueGenericSendFromISR+0x3e>
 8006616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <xQueueGenericSendFromISR+0x42>
 800661e:	2301      	movs	r3, #1
 8006620:	e000      	b.n	8006624 <xQueueGenericSendFromISR+0x44>
 8006622:	2300      	movs	r3, #0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	2b02      	cmp	r3, #2
 8006644:	d103      	bne.n	800664e <xQueueGenericSendFromISR+0x6e>
 8006646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664a:	2b01      	cmp	r3, #1
 800664c:	d101      	bne.n	8006652 <xQueueGenericSendFromISR+0x72>
 800664e:	2301      	movs	r3, #1
 8006650:	e000      	b.n	8006654 <xQueueGenericSendFromISR+0x74>
 8006652:	2300      	movs	r3, #0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10b      	bne.n	8006670 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	623b      	str	r3, [r7, #32]
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	e7fd      	b.n	800666c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006670:	f001 ff4a 	bl	8008508 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006674:	f3ef 8211 	mrs	r2, BASEPRI
 8006678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667c:	f383 8811 	msr	BASEPRI, r3
 8006680:	f3bf 8f6f 	isb	sy
 8006684:	f3bf 8f4f 	dsb	sy
 8006688:	61fa      	str	r2, [r7, #28]
 800668a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800668c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800668e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006690:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006692:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006698:	429a      	cmp	r2, r3
 800669a:	d302      	bcc.n	80066a2 <xQueueGenericSendFromISR+0xc2>
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2b02      	cmp	r3, #2
 80066a0:	d12f      	bne.n	8006702 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	68b9      	ldr	r1, [r7, #8]
 80066b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80066b8:	f000 f912 	bl	80068e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80066c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066c4:	d112      	bne.n	80066ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80066c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d016      	beq.n	80066fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d0:	3324      	adds	r3, #36	@ 0x24
 80066d2:	4618      	mov	r0, r3
 80066d4:	f000 ff04 	bl	80074e0 <xTaskRemoveFromEventList>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00e      	beq.n	80066fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00b      	beq.n	80066fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	e007      	b.n	80066fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80066f0:	3301      	adds	r3, #1
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	b25a      	sxtb	r2, r3
 80066f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80066fc:	2301      	movs	r3, #1
 80066fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006700:	e001      	b.n	8006706 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006702:	2300      	movs	r3, #0
 8006704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006708:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006710:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006714:	4618      	mov	r0, r3
 8006716:	3740      	adds	r7, #64	@ 0x40
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b08c      	sub	sp, #48	@ 0x30
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006728:	2300      	movs	r3, #0
 800672a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006732:	2b00      	cmp	r3, #0
 8006734:	d10b      	bne.n	800674e <xQueueReceive+0x32>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	623b      	str	r3, [r7, #32]
}
 8006748:	bf00      	nop
 800674a:	bf00      	nop
 800674c:	e7fd      	b.n	800674a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d103      	bne.n	800675c <xQueueReceive+0x40>
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <xQueueReceive+0x44>
 800675c:	2301      	movs	r3, #1
 800675e:	e000      	b.n	8006762 <xQueueReceive+0x46>
 8006760:	2300      	movs	r3, #0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10b      	bne.n	800677e <xQueueReceive+0x62>
	__asm volatile
 8006766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676a:	f383 8811 	msr	BASEPRI, r3
 800676e:	f3bf 8f6f 	isb	sy
 8006772:	f3bf 8f4f 	dsb	sy
 8006776:	61fb      	str	r3, [r7, #28]
}
 8006778:	bf00      	nop
 800677a:	bf00      	nop
 800677c:	e7fd      	b.n	800677a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800677e:	f001 f875 	bl	800786c <xTaskGetSchedulerState>
 8006782:	4603      	mov	r3, r0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d102      	bne.n	800678e <xQueueReceive+0x72>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d101      	bne.n	8006792 <xQueueReceive+0x76>
 800678e:	2301      	movs	r3, #1
 8006790:	e000      	b.n	8006794 <xQueueReceive+0x78>
 8006792:	2300      	movs	r3, #0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <xQueueReceive+0x94>
	__asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	61bb      	str	r3, [r7, #24]
}
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	e7fd      	b.n	80067ac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067b0:	f001 fdca 	bl	8008348 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80067b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067b8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01f      	beq.n	8006800 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80067c0:	68b9      	ldr	r1, [r7, #8]
 80067c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067c4:	f000 f8f6 	bl	80069b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80067c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ca:	1e5a      	subs	r2, r3, #1
 80067cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ce:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067d2:	691b      	ldr	r3, [r3, #16]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00f      	beq.n	80067f8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067da:	3310      	adds	r3, #16
 80067dc:	4618      	mov	r0, r3
 80067de:	f000 fe7f 	bl	80074e0 <xTaskRemoveFromEventList>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d007      	beq.n	80067f8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80067e8:	4b3c      	ldr	r3, [pc, #240]	@ (80068dc <xQueueReceive+0x1c0>)
 80067ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067ee:	601a      	str	r2, [r3, #0]
 80067f0:	f3bf 8f4f 	dsb	sy
 80067f4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80067f8:	f001 fdd8 	bl	80083ac <vPortExitCritical>
				return pdPASS;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e069      	b.n	80068d4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d103      	bne.n	800680e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006806:	f001 fdd1 	bl	80083ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800680a:	2300      	movs	r3, #0
 800680c:	e062      	b.n	80068d4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800680e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006810:	2b00      	cmp	r3, #0
 8006812:	d106      	bne.n	8006822 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006814:	f107 0310 	add.w	r3, r7, #16
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fec5 	bl	80075a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800681e:	2301      	movs	r3, #1
 8006820:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006822:	f001 fdc3 	bl	80083ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006826:	f000 fc2d 	bl	8007084 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800682a:	f001 fd8d 	bl	8008348 <vPortEnterCritical>
 800682e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006830:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006834:	b25b      	sxtb	r3, r3
 8006836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800683a:	d103      	bne.n	8006844 <xQueueReceive+0x128>
 800683c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800684a:	b25b      	sxtb	r3, r3
 800684c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006850:	d103      	bne.n	800685a <xQueueReceive+0x13e>
 8006852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006854:	2200      	movs	r2, #0
 8006856:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800685a:	f001 fda7 	bl	80083ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800685e:	1d3a      	adds	r2, r7, #4
 8006860:	f107 0310 	add.w	r3, r7, #16
 8006864:	4611      	mov	r1, r2
 8006866:	4618      	mov	r0, r3
 8006868:	f000 feb4 	bl	80075d4 <xTaskCheckForTimeOut>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d123      	bne.n	80068ba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006874:	f000 f916 	bl	8006aa4 <prvIsQueueEmpty>
 8006878:	4603      	mov	r3, r0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d017      	beq.n	80068ae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006880:	3324      	adds	r3, #36	@ 0x24
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	4611      	mov	r1, r2
 8006886:	4618      	mov	r0, r3
 8006888:	f000 fdd8 	bl	800743c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800688c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800688e:	f000 f8b7 	bl	8006a00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006892:	f000 fc05 	bl	80070a0 <xTaskResumeAll>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d189      	bne.n	80067b0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800689c:	4b0f      	ldr	r3, [pc, #60]	@ (80068dc <xQueueReceive+0x1c0>)
 800689e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	e780      	b.n	80067b0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068b0:	f000 f8a6 	bl	8006a00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068b4:	f000 fbf4 	bl	80070a0 <xTaskResumeAll>
 80068b8:	e77a      	b.n	80067b0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80068ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068bc:	f000 f8a0 	bl	8006a00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068c0:	f000 fbee 	bl	80070a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068c6:	f000 f8ed 	bl	8006aa4 <prvIsQueueEmpty>
 80068ca:	4603      	mov	r3, r0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f43f af6f 	beq.w	80067b0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80068d2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3730      	adds	r7, #48	@ 0x30
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	e000ed04 	.word	0xe000ed04

080068e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b086      	sub	sp, #24
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10d      	bne.n	800691a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d14d      	bne.n	80069a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	4618      	mov	r0, r3
 800690c:	f000 ffcc 	bl	80078a8 <xTaskPriorityDisinherit>
 8006910:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	609a      	str	r2, [r3, #8]
 8006918:	e043      	b.n	80069a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d119      	bne.n	8006954 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6858      	ldr	r0, [r3, #4]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006928:	461a      	mov	r2, r3
 800692a:	68b9      	ldr	r1, [r7, #8]
 800692c:	f002 f8a0 	bl	8008a70 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006938:	441a      	add	r2, r3
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	429a      	cmp	r2, r3
 8006948:	d32b      	bcc.n	80069a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	605a      	str	r2, [r3, #4]
 8006952:	e026      	b.n	80069a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	68d8      	ldr	r0, [r3, #12]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800695c:	461a      	mov	r2, r3
 800695e:	68b9      	ldr	r1, [r7, #8]
 8006960:	f002 f886 	bl	8008a70 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696c:	425b      	negs	r3, r3
 800696e:	441a      	add	r2, r3
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	68da      	ldr	r2, [r3, #12]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	429a      	cmp	r2, r3
 800697e:	d207      	bcs.n	8006990 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006988:	425b      	negs	r3, r3
 800698a:	441a      	add	r2, r3
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d105      	bne.n	80069a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d002      	beq.n	80069a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	3b01      	subs	r3, #1
 80069a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80069aa:	697b      	ldr	r3, [r7, #20]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b082      	sub	sp, #8
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d018      	beq.n	80069f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68da      	ldr	r2, [r3, #12]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ce:	441a      	add	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d303      	bcc.n	80069e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68d9      	ldr	r1, [r3, #12]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f0:	461a      	mov	r2, r3
 80069f2:	6838      	ldr	r0, [r7, #0]
 80069f4:	f002 f83c 	bl	8008a70 <memcpy>
	}
}
 80069f8:	bf00      	nop
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a08:	f001 fc9e 	bl	8008348 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a14:	e011      	b.n	8006a3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d012      	beq.n	8006a44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3324      	adds	r3, #36	@ 0x24
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 fd5c 	bl	80074e0 <xTaskRemoveFromEventList>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a2e:	f000 fe35 	bl	800769c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
 8006a34:	3b01      	subs	r3, #1
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	dce9      	bgt.n	8006a16 <prvUnlockQueue+0x16>
 8006a42:	e000      	b.n	8006a46 <prvUnlockQueue+0x46>
					break;
 8006a44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	22ff      	movs	r2, #255	@ 0xff
 8006a4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006a4e:	f001 fcad 	bl	80083ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a52:	f001 fc79 	bl	8008348 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a5e:	e011      	b.n	8006a84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	691b      	ldr	r3, [r3, #16]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d012      	beq.n	8006a8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	3310      	adds	r3, #16
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fd37 	bl	80074e0 <xTaskRemoveFromEventList>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a78:	f000 fe10 	bl	800769c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	dce9      	bgt.n	8006a60 <prvUnlockQueue+0x60>
 8006a8c:	e000      	b.n	8006a90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	22ff      	movs	r2, #255	@ 0xff
 8006a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006a98:	f001 fc88 	bl	80083ac <vPortExitCritical>
}
 8006a9c:	bf00      	nop
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}

08006aa4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006aac:	f001 fc4c 	bl	8008348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d102      	bne.n	8006abe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	e001      	b.n	8006ac2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006ac2:	f001 fc73 	bl	80083ac <vPortExitCritical>

	return xReturn;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad8:	f001 fc36 	bl	8008348 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d102      	bne.n	8006aee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e001      	b.n	8006af2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006aee:	2300      	movs	r3, #0
 8006af0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006af2:	f001 fc5b 	bl	80083ac <vPortExitCritical>

	return xReturn;
 8006af6:	68fb      	ldr	r3, [r7, #12]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	e014      	b.n	8006b3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b10:	4a0f      	ldr	r2, [pc, #60]	@ (8006b50 <vQueueAddToRegistry+0x50>)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d10b      	bne.n	8006b34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b1c:	490c      	ldr	r1, [pc, #48]	@ (8006b50 <vQueueAddToRegistry+0x50>)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b26:	4a0a      	ldr	r2, [pc, #40]	@ (8006b50 <vQueueAddToRegistry+0x50>)
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	00db      	lsls	r3, r3, #3
 8006b2c:	4413      	add	r3, r2
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b32:	e006      	b.n	8006b42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	3301      	adds	r3, #1
 8006b38:	60fb      	str	r3, [r7, #12]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2b07      	cmp	r3, #7
 8006b3e:	d9e7      	bls.n	8006b10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b40:	bf00      	nop
 8006b42:	bf00      	nop
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20000b08 	.word	0x20000b08

08006b54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006b64:	f001 fbf0 	bl	8008348 <vPortEnterCritical>
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b6e:	b25b      	sxtb	r3, r3
 8006b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b74:	d103      	bne.n	8006b7e <vQueueWaitForMessageRestricted+0x2a>
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b84:	b25b      	sxtb	r3, r3
 8006b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b8a:	d103      	bne.n	8006b94 <vQueueWaitForMessageRestricted+0x40>
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b94:	f001 fc0a 	bl	80083ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d106      	bne.n	8006bae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	3324      	adds	r3, #36	@ 0x24
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	68b9      	ldr	r1, [r7, #8]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 fc6d 	bl	8007488 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bae:	6978      	ldr	r0, [r7, #20]
 8006bb0:	f7ff ff26 	bl	8006a00 <prvUnlockQueue>
	}
 8006bb4:	bf00      	nop
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b08e      	sub	sp, #56	@ 0x38
 8006bc0:	af04      	add	r7, sp, #16
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10b      	bne.n	8006be8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	623b      	str	r3, [r7, #32]
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	e7fd      	b.n	8006be4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	61fb      	str	r3, [r7, #28]
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c06:	23a8      	movs	r3, #168	@ 0xa8
 8006c08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	2ba8      	cmp	r3, #168	@ 0xa8
 8006c0e:	d00b      	beq.n	8006c28 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	61bb      	str	r3, [r7, #24]
}
 8006c22:	bf00      	nop
 8006c24:	bf00      	nop
 8006c26:	e7fd      	b.n	8006c24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01e      	beq.n	8006c6e <xTaskCreateStatic+0xb2>
 8006c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d01b      	beq.n	8006c6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	2202      	movs	r2, #2
 8006c44:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9303      	str	r3, [sp, #12]
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	9302      	str	r3, [sp, #8]
 8006c50:	f107 0314 	add.w	r3, r7, #20
 8006c54:	9301      	str	r3, [sp, #4]
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	9300      	str	r3, [sp, #0]
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	68b9      	ldr	r1, [r7, #8]
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 f851 	bl	8006d08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006c68:	f000 f8f6 	bl	8006e58 <prvAddNewTaskToReadyList>
 8006c6c:	e001      	b.n	8006c72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006c72:	697b      	ldr	r3, [r7, #20]
	}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3728      	adds	r7, #40	@ 0x28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08c      	sub	sp, #48	@ 0x30
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006c8c:	88fb      	ldrh	r3, [r7, #6]
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f001 fc7b 	bl	800858c <pvPortMalloc>
 8006c96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d00e      	beq.n	8006cbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006c9e:	20a8      	movs	r0, #168	@ 0xa8
 8006ca0:	f001 fc74 	bl	800858c <pvPortMalloc>
 8006ca4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8006cb2:	e005      	b.n	8006cc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006cb4:	6978      	ldr	r0, [r7, #20]
 8006cb6:	f001 fd37 	bl	8008728 <vPortFree>
 8006cba:	e001      	b.n	8006cc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d017      	beq.n	8006cf6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006cc6:	69fb      	ldr	r3, [r7, #28]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006cce:	88fa      	ldrh	r2, [r7, #6]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	9303      	str	r3, [sp, #12]
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	9302      	str	r3, [sp, #8]
 8006cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cda:	9301      	str	r3, [sp, #4]
 8006cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 f80f 	bl	8006d08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cea:	69f8      	ldr	r0, [r7, #28]
 8006cec:	f000 f8b4 	bl	8006e58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	e002      	b.n	8006cfc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006cfc:	69bb      	ldr	r3, [r7, #24]
	}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3720      	adds	r7, #32
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
	...

08006d08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b088      	sub	sp, #32
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
 8006d14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d18:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	461a      	mov	r2, r3
 8006d20:	21a5      	movs	r1, #165	@ 0xa5
 8006d22:	f001 fe21 	bl	8008968 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d28:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006d30:	3b01      	subs	r3, #1
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	4413      	add	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	f023 0307 	bic.w	r3, r3, #7
 8006d3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	f003 0307 	and.w	r3, r3, #7
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d00b      	beq.n	8006d62 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	617b      	str	r3, [r7, #20]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d01f      	beq.n	8006da8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d68:	2300      	movs	r3, #0
 8006d6a:	61fb      	str	r3, [r7, #28]
 8006d6c:	e012      	b.n	8006d94 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	4413      	add	r3, r2
 8006d74:	7819      	ldrb	r1, [r3, #0]
 8006d76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	3334      	adds	r3, #52	@ 0x34
 8006d7e:	460a      	mov	r2, r1
 8006d80:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	69fb      	ldr	r3, [r7, #28]
 8006d86:	4413      	add	r3, r2
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d006      	beq.n	8006d9c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	3301      	adds	r3, #1
 8006d92:	61fb      	str	r3, [r7, #28]
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b0f      	cmp	r3, #15
 8006d98:	d9e9      	bls.n	8006d6e <prvInitialiseNewTask+0x66>
 8006d9a:	e000      	b.n	8006d9e <prvInitialiseNewTask+0x96>
			{
				break;
 8006d9c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006da6:	e003      	b.n	8006db0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db2:	2b37      	cmp	r3, #55	@ 0x37
 8006db4:	d901      	bls.n	8006dba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006db6:	2337      	movs	r3, #55	@ 0x37
 8006db8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dbe:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc8:	2200      	movs	r2, #0
 8006dca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	3304      	adds	r3, #4
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f7ff f965 	bl	80060a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd8:	3318      	adds	r3, #24
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f7ff f960 	bl	80060a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006de4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006dec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006df4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e08:	3354      	adds	r3, #84	@ 0x54
 8006e0a:	224c      	movs	r2, #76	@ 0x4c
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 fdaa 	bl	8008968 <memset>
 8006e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e16:	4a0d      	ldr	r2, [pc, #52]	@ (8006e4c <prvInitialiseNewTask+0x144>)
 8006e18:	659a      	str	r2, [r3, #88]	@ 0x58
 8006e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1c:	4a0c      	ldr	r2, [pc, #48]	@ (8006e50 <prvInitialiseNewTask+0x148>)
 8006e1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e22:	4a0c      	ldr	r2, [pc, #48]	@ (8006e54 <prvInitialiseNewTask+0x14c>)
 8006e24:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e26:	683a      	ldr	r2, [r7, #0]
 8006e28:	68f9      	ldr	r1, [r7, #12]
 8006e2a:	69b8      	ldr	r0, [r7, #24]
 8006e2c:	f001 f95a 	bl	80080e4 <pxPortInitialiseStack>
 8006e30:	4602      	mov	r2, r0
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e42:	bf00      	nop
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20004d9c 	.word	0x20004d9c
 8006e50:	20004e04 	.word	0x20004e04
 8006e54:	20004e6c 	.word	0x20004e6c

08006e58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	b082      	sub	sp, #8
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006e60:	f001 fa72 	bl	8008348 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006e64:	4b2d      	ldr	r3, [pc, #180]	@ (8006f1c <prvAddNewTaskToReadyList+0xc4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	4a2c      	ldr	r2, [pc, #176]	@ (8006f1c <prvAddNewTaskToReadyList+0xc4>)
 8006e6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006e6e:	4b2c      	ldr	r3, [pc, #176]	@ (8006f20 <prvAddNewTaskToReadyList+0xc8>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d109      	bne.n	8006e8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006e76:	4a2a      	ldr	r2, [pc, #168]	@ (8006f20 <prvAddNewTaskToReadyList+0xc8>)
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006e7c:	4b27      	ldr	r3, [pc, #156]	@ (8006f1c <prvAddNewTaskToReadyList+0xc4>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d110      	bne.n	8006ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006e84:	f000 fc2e 	bl	80076e4 <prvInitialiseTaskLists>
 8006e88:	e00d      	b.n	8006ea6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006e8a:	4b26      	ldr	r3, [pc, #152]	@ (8006f24 <prvAddNewTaskToReadyList+0xcc>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d109      	bne.n	8006ea6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006e92:	4b23      	ldr	r3, [pc, #140]	@ (8006f20 <prvAddNewTaskToReadyList+0xc8>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d802      	bhi.n	8006ea6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ea0:	4a1f      	ldr	r2, [pc, #124]	@ (8006f20 <prvAddNewTaskToReadyList+0xc8>)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ea6:	4b20      	ldr	r3, [pc, #128]	@ (8006f28 <prvAddNewTaskToReadyList+0xd0>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	4a1e      	ldr	r2, [pc, #120]	@ (8006f28 <prvAddNewTaskToReadyList+0xd0>)
 8006eae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f28 <prvAddNewTaskToReadyList+0xd0>)
 8006eb2:	681a      	ldr	r2, [r3, #0]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f2c <prvAddNewTaskToReadyList+0xd4>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d903      	bls.n	8006ecc <prvAddNewTaskToReadyList+0x74>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec8:	4a18      	ldr	r2, [pc, #96]	@ (8006f2c <prvAddNewTaskToReadyList+0xd4>)
 8006eca:	6013      	str	r3, [r2, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4a15      	ldr	r2, [pc, #84]	@ (8006f30 <prvAddNewTaskToReadyList+0xd8>)
 8006eda:	441a      	add	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	3304      	adds	r3, #4
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	4610      	mov	r0, r2
 8006ee4:	f7ff f8e9 	bl	80060ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ee8:	f001 fa60 	bl	80083ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006eec:	4b0d      	ldr	r3, [pc, #52]	@ (8006f24 <prvAddNewTaskToReadyList+0xcc>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00e      	beq.n	8006f12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8006f20 <prvAddNewTaskToReadyList+0xc8>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d207      	bcs.n	8006f12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f02:	4b0c      	ldr	r3, [pc, #48]	@ (8006f34 <prvAddNewTaskToReadyList+0xdc>)
 8006f04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f08:	601a      	str	r2, [r3, #0]
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f12:	bf00      	nop
 8006f14:	3708      	adds	r7, #8
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	2000101c 	.word	0x2000101c
 8006f20:	20000b48 	.word	0x20000b48
 8006f24:	20001028 	.word	0x20001028
 8006f28:	20001038 	.word	0x20001038
 8006f2c:	20001024 	.word	0x20001024
 8006f30:	20000b4c 	.word	0x20000b4c
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b084      	sub	sp, #16
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f40:	2300      	movs	r3, #0
 8006f42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d018      	beq.n	8006f7c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f4a:	4b14      	ldr	r3, [pc, #80]	@ (8006f9c <vTaskDelay+0x64>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00b      	beq.n	8006f6a <vTaskDelay+0x32>
	__asm volatile
 8006f52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f56:	f383 8811 	msr	BASEPRI, r3
 8006f5a:	f3bf 8f6f 	isb	sy
 8006f5e:	f3bf 8f4f 	dsb	sy
 8006f62:	60bb      	str	r3, [r7, #8]
}
 8006f64:	bf00      	nop
 8006f66:	bf00      	nop
 8006f68:	e7fd      	b.n	8006f66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006f6a:	f000 f88b 	bl	8007084 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f6e:	2100      	movs	r1, #0
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fd09 	bl	8007988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f76:	f000 f893 	bl	80070a0 <xTaskResumeAll>
 8006f7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d107      	bne.n	8006f92 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006f82:	4b07      	ldr	r3, [pc, #28]	@ (8006fa0 <vTaskDelay+0x68>)
 8006f84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006f92:	bf00      	nop
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20001044 	.word	0x20001044
 8006fa0:	e000ed04 	.word	0xe000ed04

08006fa4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	@ 0x28
 8006fa8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006faa:	2300      	movs	r3, #0
 8006fac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006fb2:	463a      	mov	r2, r7
 8006fb4:	1d39      	adds	r1, r7, #4
 8006fb6:	f107 0308 	add.w	r3, r7, #8
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7ff f81c 	bl	8005ff8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006fc0:	6839      	ldr	r1, [r7, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	9202      	str	r2, [sp, #8]
 8006fc8:	9301      	str	r3, [sp, #4]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	9300      	str	r3, [sp, #0]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	460a      	mov	r2, r1
 8006fd2:	4924      	ldr	r1, [pc, #144]	@ (8007064 <vTaskStartScheduler+0xc0>)
 8006fd4:	4824      	ldr	r0, [pc, #144]	@ (8007068 <vTaskStartScheduler+0xc4>)
 8006fd6:	f7ff fdf1 	bl	8006bbc <xTaskCreateStatic>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4a23      	ldr	r2, [pc, #140]	@ (800706c <vTaskStartScheduler+0xc8>)
 8006fde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006fe0:	4b22      	ldr	r3, [pc, #136]	@ (800706c <vTaskStartScheduler+0xc8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d002      	beq.n	8006fee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	e001      	b.n	8006ff2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d102      	bne.n	8006ffe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ff8:	f000 fd1a 	bl	8007a30 <xTimerCreateTimerTask>
 8006ffc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d11b      	bne.n	800703c <vTaskStartScheduler+0x98>
	__asm volatile
 8007004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007008:	f383 8811 	msr	BASEPRI, r3
 800700c:	f3bf 8f6f 	isb	sy
 8007010:	f3bf 8f4f 	dsb	sy
 8007014:	613b      	str	r3, [r7, #16]
}
 8007016:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007018:	4b15      	ldr	r3, [pc, #84]	@ (8007070 <vTaskStartScheduler+0xcc>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3354      	adds	r3, #84	@ 0x54
 800701e:	4a15      	ldr	r2, [pc, #84]	@ (8007074 <vTaskStartScheduler+0xd0>)
 8007020:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007022:	4b15      	ldr	r3, [pc, #84]	@ (8007078 <vTaskStartScheduler+0xd4>)
 8007024:	f04f 32ff 	mov.w	r2, #4294967295
 8007028:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800702a:	4b14      	ldr	r3, [pc, #80]	@ (800707c <vTaskStartScheduler+0xd8>)
 800702c:	2201      	movs	r2, #1
 800702e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007030:	4b13      	ldr	r3, [pc, #76]	@ (8007080 <vTaskStartScheduler+0xdc>)
 8007032:	2200      	movs	r2, #0
 8007034:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007036:	f001 f8e3 	bl	8008200 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800703a:	e00f      	b.n	800705c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	d10b      	bne.n	800705c <vTaskStartScheduler+0xb8>
	__asm volatile
 8007044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007048:	f383 8811 	msr	BASEPRI, r3
 800704c:	f3bf 8f6f 	isb	sy
 8007050:	f3bf 8f4f 	dsb	sy
 8007054:	60fb      	str	r3, [r7, #12]
}
 8007056:	bf00      	nop
 8007058:	bf00      	nop
 800705a:	e7fd      	b.n	8007058 <vTaskStartScheduler+0xb4>
}
 800705c:	bf00      	nop
 800705e:	3718      	adds	r7, #24
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}
 8007064:	08008b8c 	.word	0x08008b8c
 8007068:	080076b5 	.word	0x080076b5
 800706c:	20001040 	.word	0x20001040
 8007070:	20000b48 	.word	0x20000b48
 8007074:	200000a0 	.word	0x200000a0
 8007078:	2000103c 	.word	0x2000103c
 800707c:	20001028 	.word	0x20001028
 8007080:	20001020 	.word	0x20001020

08007084 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007088:	4b04      	ldr	r3, [pc, #16]	@ (800709c <vTaskSuspendAll+0x18>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3301      	adds	r3, #1
 800708e:	4a03      	ldr	r2, [pc, #12]	@ (800709c <vTaskSuspendAll+0x18>)
 8007090:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007092:	bf00      	nop
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr
 800709c:	20001044 	.word	0x20001044

080070a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80070aa:	2300      	movs	r3, #0
 80070ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80070ae:	4b42      	ldr	r3, [pc, #264]	@ (80071b8 <xTaskResumeAll+0x118>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d10b      	bne.n	80070ce <xTaskResumeAll+0x2e>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	603b      	str	r3, [r7, #0]
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	e7fd      	b.n	80070ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070ce:	f001 f93b 	bl	8008348 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070d2:	4b39      	ldr	r3, [pc, #228]	@ (80071b8 <xTaskResumeAll+0x118>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	4a37      	ldr	r2, [pc, #220]	@ (80071b8 <xTaskResumeAll+0x118>)
 80070da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070dc:	4b36      	ldr	r3, [pc, #216]	@ (80071b8 <xTaskResumeAll+0x118>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d162      	bne.n	80071aa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070e4:	4b35      	ldr	r3, [pc, #212]	@ (80071bc <xTaskResumeAll+0x11c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d05e      	beq.n	80071aa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070ec:	e02f      	b.n	800714e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ee:	4b34      	ldr	r3, [pc, #208]	@ (80071c0 <xTaskResumeAll+0x120>)
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3318      	adds	r3, #24
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff f83a 	bl	8006174 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3304      	adds	r3, #4
 8007104:	4618      	mov	r0, r3
 8007106:	f7ff f835 	bl	8006174 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800710e:	4b2d      	ldr	r3, [pc, #180]	@ (80071c4 <xTaskResumeAll+0x124>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	429a      	cmp	r2, r3
 8007114:	d903      	bls.n	800711e <xTaskResumeAll+0x7e>
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711a:	4a2a      	ldr	r2, [pc, #168]	@ (80071c4 <xTaskResumeAll+0x124>)
 800711c:	6013      	str	r3, [r2, #0]
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007122:	4613      	mov	r3, r2
 8007124:	009b      	lsls	r3, r3, #2
 8007126:	4413      	add	r3, r2
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	4a27      	ldr	r2, [pc, #156]	@ (80071c8 <xTaskResumeAll+0x128>)
 800712c:	441a      	add	r2, r3
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3304      	adds	r3, #4
 8007132:	4619      	mov	r1, r3
 8007134:	4610      	mov	r0, r2
 8007136:	f7fe ffc0 	bl	80060ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800713e:	4b23      	ldr	r3, [pc, #140]	@ (80071cc <xTaskResumeAll+0x12c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007144:	429a      	cmp	r2, r3
 8007146:	d302      	bcc.n	800714e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007148:	4b21      	ldr	r3, [pc, #132]	@ (80071d0 <xTaskResumeAll+0x130>)
 800714a:	2201      	movs	r2, #1
 800714c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800714e:	4b1c      	ldr	r3, [pc, #112]	@ (80071c0 <xTaskResumeAll+0x120>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d1cb      	bne.n	80070ee <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800715c:	f000 fb66 	bl	800782c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007160:	4b1c      	ldr	r3, [pc, #112]	@ (80071d4 <xTaskResumeAll+0x134>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d010      	beq.n	800718e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800716c:	f000 f846 	bl	80071fc <xTaskIncrementTick>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007176:	4b16      	ldr	r3, [pc, #88]	@ (80071d0 <xTaskResumeAll+0x130>)
 8007178:	2201      	movs	r2, #1
 800717a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	3b01      	subs	r3, #1
 8007180:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1f1      	bne.n	800716c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007188:	4b12      	ldr	r3, [pc, #72]	@ (80071d4 <xTaskResumeAll+0x134>)
 800718a:	2200      	movs	r2, #0
 800718c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800718e:	4b10      	ldr	r3, [pc, #64]	@ (80071d0 <xTaskResumeAll+0x130>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d009      	beq.n	80071aa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007196:	2301      	movs	r3, #1
 8007198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800719a:	4b0f      	ldr	r3, [pc, #60]	@ (80071d8 <xTaskResumeAll+0x138>)
 800719c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071aa:	f001 f8ff 	bl	80083ac <vPortExitCritical>

	return xAlreadyYielded;
 80071ae:	68bb      	ldr	r3, [r7, #8]
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3710      	adds	r7, #16
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	20001044 	.word	0x20001044
 80071bc:	2000101c 	.word	0x2000101c
 80071c0:	20000fdc 	.word	0x20000fdc
 80071c4:	20001024 	.word	0x20001024
 80071c8:	20000b4c 	.word	0x20000b4c
 80071cc:	20000b48 	.word	0x20000b48
 80071d0:	20001030 	.word	0x20001030
 80071d4:	2000102c 	.word	0x2000102c
 80071d8:	e000ed04 	.word	0xe000ed04

080071dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80071e2:	4b05      	ldr	r3, [pc, #20]	@ (80071f8 <xTaskGetTickCount+0x1c>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80071e8:	687b      	ldr	r3, [r7, #4]
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	370c      	adds	r7, #12
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	20001020 	.word	0x20001020

080071fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007206:	4b4f      	ldr	r3, [pc, #316]	@ (8007344 <xTaskIncrementTick+0x148>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b00      	cmp	r3, #0
 800720c:	f040 8090 	bne.w	8007330 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007210:	4b4d      	ldr	r3, [pc, #308]	@ (8007348 <xTaskIncrementTick+0x14c>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3301      	adds	r3, #1
 8007216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007218:	4a4b      	ldr	r2, [pc, #300]	@ (8007348 <xTaskIncrementTick+0x14c>)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d121      	bne.n	8007268 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007224:	4b49      	ldr	r3, [pc, #292]	@ (800734c <xTaskIncrementTick+0x150>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <xTaskIncrementTick+0x4a>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	603b      	str	r3, [r7, #0]
}
 8007240:	bf00      	nop
 8007242:	bf00      	nop
 8007244:	e7fd      	b.n	8007242 <xTaskIncrementTick+0x46>
 8007246:	4b41      	ldr	r3, [pc, #260]	@ (800734c <xTaskIncrementTick+0x150>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	60fb      	str	r3, [r7, #12]
 800724c:	4b40      	ldr	r3, [pc, #256]	@ (8007350 <xTaskIncrementTick+0x154>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a3e      	ldr	r2, [pc, #248]	@ (800734c <xTaskIncrementTick+0x150>)
 8007252:	6013      	str	r3, [r2, #0]
 8007254:	4a3e      	ldr	r2, [pc, #248]	@ (8007350 <xTaskIncrementTick+0x154>)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6013      	str	r3, [r2, #0]
 800725a:	4b3e      	ldr	r3, [pc, #248]	@ (8007354 <xTaskIncrementTick+0x158>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3301      	adds	r3, #1
 8007260:	4a3c      	ldr	r2, [pc, #240]	@ (8007354 <xTaskIncrementTick+0x158>)
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	f000 fae2 	bl	800782c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007268:	4b3b      	ldr	r3, [pc, #236]	@ (8007358 <xTaskIncrementTick+0x15c>)
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	429a      	cmp	r2, r3
 8007270:	d349      	bcc.n	8007306 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007272:	4b36      	ldr	r3, [pc, #216]	@ (800734c <xTaskIncrementTick+0x150>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d104      	bne.n	8007286 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800727c:	4b36      	ldr	r3, [pc, #216]	@ (8007358 <xTaskIncrementTick+0x15c>)
 800727e:	f04f 32ff 	mov.w	r2, #4294967295
 8007282:	601a      	str	r2, [r3, #0]
					break;
 8007284:	e03f      	b.n	8007306 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007286:	4b31      	ldr	r3, [pc, #196]	@ (800734c <xTaskIncrementTick+0x150>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	429a      	cmp	r2, r3
 800729c:	d203      	bcs.n	80072a6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800729e:	4a2e      	ldr	r2, [pc, #184]	@ (8007358 <xTaskIncrementTick+0x15c>)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80072a4:	e02f      	b.n	8007306 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	3304      	adds	r3, #4
 80072aa:	4618      	mov	r0, r3
 80072ac:	f7fe ff62 	bl	8006174 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d004      	beq.n	80072c2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	3318      	adds	r3, #24
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe ff59 	bl	8006174 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c6:	4b25      	ldr	r3, [pc, #148]	@ (800735c <xTaskIncrementTick+0x160>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d903      	bls.n	80072d6 <xTaskIncrementTick+0xda>
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072d2:	4a22      	ldr	r2, [pc, #136]	@ (800735c <xTaskIncrementTick+0x160>)
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072da:	4613      	mov	r3, r2
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007360 <xTaskIncrementTick+0x164>)
 80072e4:	441a      	add	r2, r3
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	3304      	adds	r3, #4
 80072ea:	4619      	mov	r1, r3
 80072ec:	4610      	mov	r0, r2
 80072ee:	f7fe fee4 	bl	80060ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f6:	4b1b      	ldr	r3, [pc, #108]	@ (8007364 <xTaskIncrementTick+0x168>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d3b8      	bcc.n	8007272 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007300:	2301      	movs	r3, #1
 8007302:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007304:	e7b5      	b.n	8007272 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007306:	4b17      	ldr	r3, [pc, #92]	@ (8007364 <xTaskIncrementTick+0x168>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730c:	4914      	ldr	r1, [pc, #80]	@ (8007360 <xTaskIncrementTick+0x164>)
 800730e:	4613      	mov	r3, r2
 8007310:	009b      	lsls	r3, r3, #2
 8007312:	4413      	add	r3, r2
 8007314:	009b      	lsls	r3, r3, #2
 8007316:	440b      	add	r3, r1
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b01      	cmp	r3, #1
 800731c:	d901      	bls.n	8007322 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800731e:	2301      	movs	r3, #1
 8007320:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007322:	4b11      	ldr	r3, [pc, #68]	@ (8007368 <xTaskIncrementTick+0x16c>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d007      	beq.n	800733a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800732a:	2301      	movs	r3, #1
 800732c:	617b      	str	r3, [r7, #20]
 800732e:	e004      	b.n	800733a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007330:	4b0e      	ldr	r3, [pc, #56]	@ (800736c <xTaskIncrementTick+0x170>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3301      	adds	r3, #1
 8007336:	4a0d      	ldr	r2, [pc, #52]	@ (800736c <xTaskIncrementTick+0x170>)
 8007338:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800733a:	697b      	ldr	r3, [r7, #20]
}
 800733c:	4618      	mov	r0, r3
 800733e:	3718      	adds	r7, #24
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}
 8007344:	20001044 	.word	0x20001044
 8007348:	20001020 	.word	0x20001020
 800734c:	20000fd4 	.word	0x20000fd4
 8007350:	20000fd8 	.word	0x20000fd8
 8007354:	20001034 	.word	0x20001034
 8007358:	2000103c 	.word	0x2000103c
 800735c:	20001024 	.word	0x20001024
 8007360:	20000b4c 	.word	0x20000b4c
 8007364:	20000b48 	.word	0x20000b48
 8007368:	20001030 	.word	0x20001030
 800736c:	2000102c 	.word	0x2000102c

08007370 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007376:	4b2b      	ldr	r3, [pc, #172]	@ (8007424 <vTaskSwitchContext+0xb4>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800737e:	4b2a      	ldr	r3, [pc, #168]	@ (8007428 <vTaskSwitchContext+0xb8>)
 8007380:	2201      	movs	r2, #1
 8007382:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007384:	e047      	b.n	8007416 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8007386:	4b28      	ldr	r3, [pc, #160]	@ (8007428 <vTaskSwitchContext+0xb8>)
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800738c:	4b27      	ldr	r3, [pc, #156]	@ (800742c <vTaskSwitchContext+0xbc>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	e011      	b.n	80073b8 <vTaskSwitchContext+0x48>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d10b      	bne.n	80073b2 <vTaskSwitchContext+0x42>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	607b      	str	r3, [r7, #4]
}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	e7fd      	b.n	80073ae <vTaskSwitchContext+0x3e>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	491d      	ldr	r1, [pc, #116]	@ (8007430 <vTaskSwitchContext+0xc0>)
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	440b      	add	r3, r1
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d0e3      	beq.n	8007394 <vTaskSwitchContext+0x24>
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4613      	mov	r3, r2
 80073d0:	009b      	lsls	r3, r3, #2
 80073d2:	4413      	add	r3, r2
 80073d4:	009b      	lsls	r3, r3, #2
 80073d6:	4a16      	ldr	r2, [pc, #88]	@ (8007430 <vTaskSwitchContext+0xc0>)
 80073d8:	4413      	add	r3, r2
 80073da:	60bb      	str	r3, [r7, #8]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	3308      	adds	r3, #8
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d104      	bne.n	80073fc <vTaskSwitchContext+0x8c>
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	685a      	ldr	r2, [r3, #4]
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	605a      	str	r2, [r3, #4]
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	4a0c      	ldr	r2, [pc, #48]	@ (8007434 <vTaskSwitchContext+0xc4>)
 8007404:	6013      	str	r3, [r2, #0]
 8007406:	4a09      	ldr	r2, [pc, #36]	@ (800742c <vTaskSwitchContext+0xbc>)
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800740c:	4b09      	ldr	r3, [pc, #36]	@ (8007434 <vTaskSwitchContext+0xc4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	3354      	adds	r3, #84	@ 0x54
 8007412:	4a09      	ldr	r2, [pc, #36]	@ (8007438 <vTaskSwitchContext+0xc8>)
 8007414:	6013      	str	r3, [r2, #0]
}
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	20001044 	.word	0x20001044
 8007428:	20001030 	.word	0x20001030
 800742c:	20001024 	.word	0x20001024
 8007430:	20000b4c 	.word	0x20000b4c
 8007434:	20000b48 	.word	0x20000b48
 8007438:	200000a0 	.word	0x200000a0

0800743c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d10b      	bne.n	8007464 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800744c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007450:	f383 8811 	msr	BASEPRI, r3
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	f3bf 8f4f 	dsb	sy
 800745c:	60fb      	str	r3, [r7, #12]
}
 800745e:	bf00      	nop
 8007460:	bf00      	nop
 8007462:	e7fd      	b.n	8007460 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007464:	4b07      	ldr	r3, [pc, #28]	@ (8007484 <vTaskPlaceOnEventList+0x48>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3318      	adds	r3, #24
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7fe fe48 	bl	8006102 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007472:	2101      	movs	r1, #1
 8007474:	6838      	ldr	r0, [r7, #0]
 8007476:	f000 fa87 	bl	8007988 <prvAddCurrentTaskToDelayedList>
}
 800747a:	bf00      	nop
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20000b48 	.word	0x20000b48

08007488 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10b      	bne.n	80074b2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	617b      	str	r3, [r7, #20]
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	e7fd      	b.n	80074ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074b2:	4b0a      	ldr	r3, [pc, #40]	@ (80074dc <vTaskPlaceOnEventListRestricted+0x54>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	3318      	adds	r3, #24
 80074b8:	4619      	mov	r1, r3
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7fe fdfd 	bl	80060ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d002      	beq.n	80074cc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80074c6:	f04f 33ff 	mov.w	r3, #4294967295
 80074ca:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80074cc:	6879      	ldr	r1, [r7, #4]
 80074ce:	68b8      	ldr	r0, [r7, #8]
 80074d0:	f000 fa5a 	bl	8007988 <prvAddCurrentTaskToDelayedList>
	}
 80074d4:	bf00      	nop
 80074d6:	3718      	adds	r7, #24
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	20000b48 	.word	0x20000b48

080074e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10b      	bne.n	800750e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	60fb      	str	r3, [r7, #12]
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	e7fd      	b.n	800750a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	3318      	adds	r3, #24
 8007512:	4618      	mov	r0, r3
 8007514:	f7fe fe2e 	bl	8006174 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007518:	4b1d      	ldr	r3, [pc, #116]	@ (8007590 <xTaskRemoveFromEventList+0xb0>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d11d      	bne.n	800755c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007520:	693b      	ldr	r3, [r7, #16]
 8007522:	3304      	adds	r3, #4
 8007524:	4618      	mov	r0, r3
 8007526:	f7fe fe25 	bl	8006174 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800752a:	693b      	ldr	r3, [r7, #16]
 800752c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800752e:	4b19      	ldr	r3, [pc, #100]	@ (8007594 <xTaskRemoveFromEventList+0xb4>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d903      	bls.n	800753e <xTaskRemoveFromEventList+0x5e>
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800753a:	4a16      	ldr	r2, [pc, #88]	@ (8007594 <xTaskRemoveFromEventList+0xb4>)
 800753c:	6013      	str	r3, [r2, #0]
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007542:	4613      	mov	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4a13      	ldr	r2, [pc, #76]	@ (8007598 <xTaskRemoveFromEventList+0xb8>)
 800754c:	441a      	add	r2, r3
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	3304      	adds	r3, #4
 8007552:	4619      	mov	r1, r3
 8007554:	4610      	mov	r0, r2
 8007556:	f7fe fdb0 	bl	80060ba <vListInsertEnd>
 800755a:	e005      	b.n	8007568 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	3318      	adds	r3, #24
 8007560:	4619      	mov	r1, r3
 8007562:	480e      	ldr	r0, [pc, #56]	@ (800759c <xTaskRemoveFromEventList+0xbc>)
 8007564:	f7fe fda9 	bl	80060ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756c:	4b0c      	ldr	r3, [pc, #48]	@ (80075a0 <xTaskRemoveFromEventList+0xc0>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007572:	429a      	cmp	r2, r3
 8007574:	d905      	bls.n	8007582 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007576:	2301      	movs	r3, #1
 8007578:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800757a:	4b0a      	ldr	r3, [pc, #40]	@ (80075a4 <xTaskRemoveFromEventList+0xc4>)
 800757c:	2201      	movs	r2, #1
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	e001      	b.n	8007586 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007582:	2300      	movs	r3, #0
 8007584:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007586:	697b      	ldr	r3, [r7, #20]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3718      	adds	r7, #24
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20001044 	.word	0x20001044
 8007594:	20001024 	.word	0x20001024
 8007598:	20000b4c 	.word	0x20000b4c
 800759c:	20000fdc 	.word	0x20000fdc
 80075a0:	20000b48 	.word	0x20000b48
 80075a4:	20001030 	.word	0x20001030

080075a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80075b0:	4b06      	ldr	r3, [pc, #24]	@ (80075cc <vTaskInternalSetTimeOutState+0x24>)
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80075b8:	4b05      	ldr	r3, [pc, #20]	@ (80075d0 <vTaskInternalSetTimeOutState+0x28>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	605a      	str	r2, [r3, #4]
}
 80075c0:	bf00      	nop
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr
 80075cc:	20001034 	.word	0x20001034
 80075d0:	20001020 	.word	0x20001020

080075d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b088      	sub	sp, #32
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10b      	bne.n	80075fc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	613b      	str	r3, [r7, #16]
}
 80075f6:	bf00      	nop
 80075f8:	bf00      	nop
 80075fa:	e7fd      	b.n	80075f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10b      	bne.n	800761a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	60fb      	str	r3, [r7, #12]
}
 8007614:	bf00      	nop
 8007616:	bf00      	nop
 8007618:	e7fd      	b.n	8007616 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800761a:	f000 fe95 	bl	8008348 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800761e:	4b1d      	ldr	r3, [pc, #116]	@ (8007694 <xTaskCheckForTimeOut+0xc0>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007636:	d102      	bne.n	800763e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007638:	2300      	movs	r3, #0
 800763a:	61fb      	str	r3, [r7, #28]
 800763c:	e023      	b.n	8007686 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4b15      	ldr	r3, [pc, #84]	@ (8007698 <xTaskCheckForTimeOut+0xc4>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d007      	beq.n	800765a <xTaskCheckForTimeOut+0x86>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	429a      	cmp	r2, r3
 8007652:	d302      	bcc.n	800765a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007654:	2301      	movs	r3, #1
 8007656:	61fb      	str	r3, [r7, #28]
 8007658:	e015      	b.n	8007686 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	429a      	cmp	r2, r3
 8007662:	d20b      	bcs.n	800767c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	681a      	ldr	r2, [r3, #0]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	1ad2      	subs	r2, r2, r3
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7ff ff99 	bl	80075a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007676:	2300      	movs	r3, #0
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	e004      	b.n	8007686 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	2200      	movs	r2, #0
 8007680:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007682:	2301      	movs	r3, #1
 8007684:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007686:	f000 fe91 	bl	80083ac <vPortExitCritical>

	return xReturn;
 800768a:	69fb      	ldr	r3, [r7, #28]
}
 800768c:	4618      	mov	r0, r3
 800768e:	3720      	adds	r7, #32
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	20001020 	.word	0x20001020
 8007698:	20001034 	.word	0x20001034

0800769c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800769c:	b480      	push	{r7}
 800769e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80076a0:	4b03      	ldr	r3, [pc, #12]	@ (80076b0 <vTaskMissedYield+0x14>)
 80076a2:	2201      	movs	r2, #1
 80076a4:	601a      	str	r2, [r3, #0]
}
 80076a6:	bf00      	nop
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	20001030 	.word	0x20001030

080076b4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80076bc:	f000 f852 	bl	8007764 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80076c0:	4b06      	ldr	r3, [pc, #24]	@ (80076dc <prvIdleTask+0x28>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d9f9      	bls.n	80076bc <prvIdleTask+0x8>
			{
				taskYIELD();
 80076c8:	4b05      	ldr	r3, [pc, #20]	@ (80076e0 <prvIdleTask+0x2c>)
 80076ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80076d8:	e7f0      	b.n	80076bc <prvIdleTask+0x8>
 80076da:	bf00      	nop
 80076dc:	20000b4c 	.word	0x20000b4c
 80076e0:	e000ed04 	.word	0xe000ed04

080076e4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b082      	sub	sp, #8
 80076e8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80076ea:	2300      	movs	r3, #0
 80076ec:	607b      	str	r3, [r7, #4]
 80076ee:	e00c      	b.n	800770a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	4613      	mov	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4413      	add	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4a12      	ldr	r2, [pc, #72]	@ (8007744 <prvInitialiseTaskLists+0x60>)
 80076fc:	4413      	add	r3, r2
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fe fcae 	bl	8006060 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3301      	adds	r3, #1
 8007708:	607b      	str	r3, [r7, #4]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b37      	cmp	r3, #55	@ 0x37
 800770e:	d9ef      	bls.n	80076f0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007710:	480d      	ldr	r0, [pc, #52]	@ (8007748 <prvInitialiseTaskLists+0x64>)
 8007712:	f7fe fca5 	bl	8006060 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007716:	480d      	ldr	r0, [pc, #52]	@ (800774c <prvInitialiseTaskLists+0x68>)
 8007718:	f7fe fca2 	bl	8006060 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800771c:	480c      	ldr	r0, [pc, #48]	@ (8007750 <prvInitialiseTaskLists+0x6c>)
 800771e:	f7fe fc9f 	bl	8006060 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007722:	480c      	ldr	r0, [pc, #48]	@ (8007754 <prvInitialiseTaskLists+0x70>)
 8007724:	f7fe fc9c 	bl	8006060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007728:	480b      	ldr	r0, [pc, #44]	@ (8007758 <prvInitialiseTaskLists+0x74>)
 800772a:	f7fe fc99 	bl	8006060 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800772e:	4b0b      	ldr	r3, [pc, #44]	@ (800775c <prvInitialiseTaskLists+0x78>)
 8007730:	4a05      	ldr	r2, [pc, #20]	@ (8007748 <prvInitialiseTaskLists+0x64>)
 8007732:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007734:	4b0a      	ldr	r3, [pc, #40]	@ (8007760 <prvInitialiseTaskLists+0x7c>)
 8007736:	4a05      	ldr	r2, [pc, #20]	@ (800774c <prvInitialiseTaskLists+0x68>)
 8007738:	601a      	str	r2, [r3, #0]
}
 800773a:	bf00      	nop
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20000b4c 	.word	0x20000b4c
 8007748:	20000fac 	.word	0x20000fac
 800774c:	20000fc0 	.word	0x20000fc0
 8007750:	20000fdc 	.word	0x20000fdc
 8007754:	20000ff0 	.word	0x20000ff0
 8007758:	20001008 	.word	0x20001008
 800775c:	20000fd4 	.word	0x20000fd4
 8007760:	20000fd8 	.word	0x20000fd8

08007764 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b082      	sub	sp, #8
 8007768:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800776a:	e019      	b.n	80077a0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800776c:	f000 fdec 	bl	8008348 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007770:	4b10      	ldr	r3, [pc, #64]	@ (80077b4 <prvCheckTasksWaitingTermination+0x50>)
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	68db      	ldr	r3, [r3, #12]
 8007776:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	3304      	adds	r3, #4
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe fcf9 	bl	8006174 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007782:	4b0d      	ldr	r3, [pc, #52]	@ (80077b8 <prvCheckTasksWaitingTermination+0x54>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3b01      	subs	r3, #1
 8007788:	4a0b      	ldr	r2, [pc, #44]	@ (80077b8 <prvCheckTasksWaitingTermination+0x54>)
 800778a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800778c:	4b0b      	ldr	r3, [pc, #44]	@ (80077bc <prvCheckTasksWaitingTermination+0x58>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3b01      	subs	r3, #1
 8007792:	4a0a      	ldr	r2, [pc, #40]	@ (80077bc <prvCheckTasksWaitingTermination+0x58>)
 8007794:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007796:	f000 fe09 	bl	80083ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f810 	bl	80077c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077a0:	4b06      	ldr	r3, [pc, #24]	@ (80077bc <prvCheckTasksWaitingTermination+0x58>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d1e1      	bne.n	800776c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80077a8:	bf00      	nop
 80077aa:	bf00      	nop
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20000ff0 	.word	0x20000ff0
 80077b8:	2000101c 	.word	0x2000101c
 80077bc:	20001004 	.word	0x20001004

080077c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b084      	sub	sp, #16
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	3354      	adds	r3, #84	@ 0x54
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 f8d3 	bl	8008978 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d108      	bne.n	80077ee <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 ffa1 	bl	8008728 <vPortFree>
				vPortFree( pxTCB );
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 ff9e 	bl	8008728 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80077ec:	e019      	b.n	8007822 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	d103      	bne.n	8007800 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 ff95 	bl	8008728 <vPortFree>
	}
 80077fe:	e010      	b.n	8007822 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007806:	2b02      	cmp	r3, #2
 8007808:	d00b      	beq.n	8007822 <prvDeleteTCB+0x62>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60fb      	str	r3, [r7, #12]
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <prvDeleteTCB+0x5e>
	}
 8007822:	bf00      	nop
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007832:	4b0c      	ldr	r3, [pc, #48]	@ (8007864 <prvResetNextTaskUnblockTime+0x38>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d104      	bne.n	8007846 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800783c:	4b0a      	ldr	r3, [pc, #40]	@ (8007868 <prvResetNextTaskUnblockTime+0x3c>)
 800783e:	f04f 32ff 	mov.w	r2, #4294967295
 8007842:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007844:	e008      	b.n	8007858 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007846:	4b07      	ldr	r3, [pc, #28]	@ (8007864 <prvResetNextTaskUnblockTime+0x38>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	4a04      	ldr	r2, [pc, #16]	@ (8007868 <prvResetNextTaskUnblockTime+0x3c>)
 8007856:	6013      	str	r3, [r2, #0]
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	20000fd4 	.word	0x20000fd4
 8007868:	2000103c 	.word	0x2000103c

0800786c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007872:	4b0b      	ldr	r3, [pc, #44]	@ (80078a0 <xTaskGetSchedulerState+0x34>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d102      	bne.n	8007880 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800787a:	2301      	movs	r3, #1
 800787c:	607b      	str	r3, [r7, #4]
 800787e:	e008      	b.n	8007892 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007880:	4b08      	ldr	r3, [pc, #32]	@ (80078a4 <xTaskGetSchedulerState+0x38>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d102      	bne.n	800788e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007888:	2302      	movs	r3, #2
 800788a:	607b      	str	r3, [r7, #4]
 800788c:	e001      	b.n	8007892 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800788e:	2300      	movs	r3, #0
 8007890:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007892:	687b      	ldr	r3, [r7, #4]
	}
 8007894:	4618      	mov	r0, r3
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	20001028 	.word	0x20001028
 80078a4:	20001044 	.word	0x20001044

080078a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b086      	sub	sp, #24
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80078b4:	2300      	movs	r3, #0
 80078b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d058      	beq.n	8007970 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80078be:	4b2f      	ldr	r3, [pc, #188]	@ (800797c <xTaskPriorityDisinherit+0xd4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	693a      	ldr	r2, [r7, #16]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d00b      	beq.n	80078e0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80078c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078cc:	f383 8811 	msr	BASEPRI, r3
 80078d0:	f3bf 8f6f 	isb	sy
 80078d4:	f3bf 8f4f 	dsb	sy
 80078d8:	60fb      	str	r3, [r7, #12]
}
 80078da:	bf00      	nop
 80078dc:	bf00      	nop
 80078de:	e7fd      	b.n	80078dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80078e0:	693b      	ldr	r3, [r7, #16]
 80078e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d10b      	bne.n	8007900 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80078e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ec:	f383 8811 	msr	BASEPRI, r3
 80078f0:	f3bf 8f6f 	isb	sy
 80078f4:	f3bf 8f4f 	dsb	sy
 80078f8:	60bb      	str	r3, [r7, #8]
}
 80078fa:	bf00      	nop
 80078fc:	bf00      	nop
 80078fe:	e7fd      	b.n	80078fc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007900:	693b      	ldr	r3, [r7, #16]
 8007902:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007904:	1e5a      	subs	r2, r3, #1
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007912:	429a      	cmp	r2, r3
 8007914:	d02c      	beq.n	8007970 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800791a:	2b00      	cmp	r3, #0
 800791c:	d128      	bne.n	8007970 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	3304      	adds	r3, #4
 8007922:	4618      	mov	r0, r3
 8007924:	f7fe fc26 	bl	8006174 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007934:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007940:	4b0f      	ldr	r3, [pc, #60]	@ (8007980 <xTaskPriorityDisinherit+0xd8>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	429a      	cmp	r2, r3
 8007946:	d903      	bls.n	8007950 <xTaskPriorityDisinherit+0xa8>
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794c:	4a0c      	ldr	r2, [pc, #48]	@ (8007980 <xTaskPriorityDisinherit+0xd8>)
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	693b      	ldr	r3, [r7, #16]
 8007952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007954:	4613      	mov	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4a09      	ldr	r2, [pc, #36]	@ (8007984 <xTaskPriorityDisinherit+0xdc>)
 800795e:	441a      	add	r2, r3
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	3304      	adds	r3, #4
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f7fe fba7 	bl	80060ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800796c:	2301      	movs	r3, #1
 800796e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007970:	697b      	ldr	r3, [r7, #20]
	}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20000b48 	.word	0x20000b48
 8007980:	20001024 	.word	0x20001024
 8007984:	20000b4c 	.word	0x20000b4c

08007988 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007992:	4b21      	ldr	r3, [pc, #132]	@ (8007a18 <prvAddCurrentTaskToDelayedList+0x90>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007998:	4b20      	ldr	r3, [pc, #128]	@ (8007a1c <prvAddCurrentTaskToDelayedList+0x94>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3304      	adds	r3, #4
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fe fbe8 	bl	8006174 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079aa:	d10a      	bne.n	80079c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d007      	beq.n	80079c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079b2:	4b1a      	ldr	r3, [pc, #104]	@ (8007a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4819      	ldr	r0, [pc, #100]	@ (8007a20 <prvAddCurrentTaskToDelayedList+0x98>)
 80079bc:	f7fe fb7d 	bl	80060ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079c0:	e026      	b.n	8007a10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4413      	add	r3, r2
 80079c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079ca:	4b14      	ldr	r3, [pc, #80]	@ (8007a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079d2:	68ba      	ldr	r2, [r7, #8]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d209      	bcs.n	80079ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079da:	4b12      	ldr	r3, [pc, #72]	@ (8007a24 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b0f      	ldr	r3, [pc, #60]	@ (8007a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	3304      	adds	r3, #4
 80079e4:	4619      	mov	r1, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	f7fe fb8b 	bl	8006102 <vListInsert>
}
 80079ec:	e010      	b.n	8007a10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007a28 <prvAddCurrentTaskToDelayedList+0xa0>)
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	4b0a      	ldr	r3, [pc, #40]	@ (8007a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f7fe fb81 	bl	8006102 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a00:	4b0a      	ldr	r3, [pc, #40]	@ (8007a2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68ba      	ldr	r2, [r7, #8]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d202      	bcs.n	8007a10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a0a:	4a08      	ldr	r2, [pc, #32]	@ (8007a2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	6013      	str	r3, [r2, #0]
}
 8007a10:	bf00      	nop
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}
 8007a18:	20001020 	.word	0x20001020
 8007a1c:	20000b48 	.word	0x20000b48
 8007a20:	20001008 	.word	0x20001008
 8007a24:	20000fd8 	.word	0x20000fd8
 8007a28:	20000fd4 	.word	0x20000fd4
 8007a2c:	2000103c 	.word	0x2000103c

08007a30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b08a      	sub	sp, #40	@ 0x28
 8007a34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a36:	2300      	movs	r3, #0
 8007a38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a3a:	f000 fb13 	bl	8008064 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ab4 <xTimerCreateTimerTask+0x84>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d021      	beq.n	8007a8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a4e:	1d3a      	adds	r2, r7, #4
 8007a50:	f107 0108 	add.w	r1, r7, #8
 8007a54:	f107 030c 	add.w	r3, r7, #12
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe fae7 	bl	800602c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a5e:	6879      	ldr	r1, [r7, #4]
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	9202      	str	r2, [sp, #8]
 8007a66:	9301      	str	r3, [sp, #4]
 8007a68:	2302      	movs	r3, #2
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	460a      	mov	r2, r1
 8007a70:	4911      	ldr	r1, [pc, #68]	@ (8007ab8 <xTimerCreateTimerTask+0x88>)
 8007a72:	4812      	ldr	r0, [pc, #72]	@ (8007abc <xTimerCreateTimerTask+0x8c>)
 8007a74:	f7ff f8a2 	bl	8006bbc <xTaskCreateStatic>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	4a11      	ldr	r2, [pc, #68]	@ (8007ac0 <xTimerCreateTimerTask+0x90>)
 8007a7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a7e:	4b10      	ldr	r3, [pc, #64]	@ (8007ac0 <xTimerCreateTimerTask+0x90>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a86:	2301      	movs	r3, #1
 8007a88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10b      	bne.n	8007aa8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	613b      	str	r3, [r7, #16]
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	e7fd      	b.n	8007aa4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007aa8:	697b      	ldr	r3, [r7, #20]
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20001078 	.word	0x20001078
 8007ab8:	08008b94 	.word	0x08008b94
 8007abc:	08007bfd 	.word	0x08007bfd
 8007ac0:	2000107c 	.word	0x2000107c

08007ac4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08a      	sub	sp, #40	@ 0x28
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
 8007ad0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10b      	bne.n	8007af4 <xTimerGenericCommand+0x30>
	__asm volatile
 8007adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae0:	f383 8811 	msr	BASEPRI, r3
 8007ae4:	f3bf 8f6f 	isb	sy
 8007ae8:	f3bf 8f4f 	dsb	sy
 8007aec:	623b      	str	r3, [r7, #32]
}
 8007aee:	bf00      	nop
 8007af0:	bf00      	nop
 8007af2:	e7fd      	b.n	8007af0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007af4:	4b19      	ldr	r3, [pc, #100]	@ (8007b5c <xTimerGenericCommand+0x98>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d02a      	beq.n	8007b52 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b05      	cmp	r3, #5
 8007b0c:	dc18      	bgt.n	8007b40 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b0e:	f7ff fead 	bl	800786c <xTaskGetSchedulerState>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b02      	cmp	r3, #2
 8007b16:	d109      	bne.n	8007b2c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b18:	4b10      	ldr	r3, [pc, #64]	@ (8007b5c <xTimerGenericCommand+0x98>)
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	f107 0110 	add.w	r1, r7, #16
 8007b20:	2300      	movs	r3, #0
 8007b22:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b24:	f7fe fc5a 	bl	80063dc <xQueueGenericSend>
 8007b28:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b2a:	e012      	b.n	8007b52 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b5c <xTimerGenericCommand+0x98>)
 8007b2e:	6818      	ldr	r0, [r3, #0]
 8007b30:	f107 0110 	add.w	r1, r7, #16
 8007b34:	2300      	movs	r3, #0
 8007b36:	2200      	movs	r2, #0
 8007b38:	f7fe fc50 	bl	80063dc <xQueueGenericSend>
 8007b3c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b3e:	e008      	b.n	8007b52 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b40:	4b06      	ldr	r3, [pc, #24]	@ (8007b5c <xTimerGenericCommand+0x98>)
 8007b42:	6818      	ldr	r0, [r3, #0]
 8007b44:	f107 0110 	add.w	r1, r7, #16
 8007b48:	2300      	movs	r3, #0
 8007b4a:	683a      	ldr	r2, [r7, #0]
 8007b4c:	f7fe fd48 	bl	80065e0 <xQueueGenericSendFromISR>
 8007b50:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3728      	adds	r7, #40	@ 0x28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	20001078 	.word	0x20001078

08007b60 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b088      	sub	sp, #32
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b6a:	4b23      	ldr	r3, [pc, #140]	@ (8007bf8 <prvProcessExpiredTimer+0x98>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68db      	ldr	r3, [r3, #12]
 8007b70:	68db      	ldr	r3, [r3, #12]
 8007b72:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	3304      	adds	r3, #4
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fe fafb 	bl	8006174 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d023      	beq.n	8007bd4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b8c:	697b      	ldr	r3, [r7, #20]
 8007b8e:	699a      	ldr	r2, [r3, #24]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	18d1      	adds	r1, r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	683a      	ldr	r2, [r7, #0]
 8007b98:	6978      	ldr	r0, [r7, #20]
 8007b9a:	f000 f8d5 	bl	8007d48 <prvInsertTimerInActiveList>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d020      	beq.n	8007be6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	9300      	str	r3, [sp, #0]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	2100      	movs	r1, #0
 8007bae:	6978      	ldr	r0, [r7, #20]
 8007bb0:	f7ff ff88 	bl	8007ac4 <xTimerGenericCommand>
 8007bb4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d114      	bne.n	8007be6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	60fb      	str	r3, [r7, #12]
}
 8007bce:	bf00      	nop
 8007bd0:	bf00      	nop
 8007bd2:	e7fd      	b.n	8007bd0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bda:	f023 0301 	bic.w	r3, r3, #1
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
 8007bea:	6978      	ldr	r0, [r7, #20]
 8007bec:	4798      	blx	r3
}
 8007bee:	bf00      	nop
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	20001070 	.word	0x20001070

08007bfc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c04:	f107 0308 	add.w	r3, r7, #8
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 f859 	bl	8007cc0 <prvGetNextExpireTime>
 8007c0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	4619      	mov	r1, r3
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 f805 	bl	8007c24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c1a:	f000 f8d7 	bl	8007dcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c1e:	bf00      	nop
 8007c20:	e7f0      	b.n	8007c04 <prvTimerTask+0x8>
	...

08007c24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c2e:	f7ff fa29 	bl	8007084 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c32:	f107 0308 	add.w	r3, r7, #8
 8007c36:	4618      	mov	r0, r3
 8007c38:	f000 f866 	bl	8007d08 <prvSampleTimeNow>
 8007c3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d130      	bne.n	8007ca6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <prvProcessTimerOrBlockTask+0x3c>
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	429a      	cmp	r2, r3
 8007c50:	d806      	bhi.n	8007c60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c52:	f7ff fa25 	bl	80070a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c56:	68f9      	ldr	r1, [r7, #12]
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7ff ff81 	bl	8007b60 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c5e:	e024      	b.n	8007caa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d008      	beq.n	8007c78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c66:	4b13      	ldr	r3, [pc, #76]	@ (8007cb4 <prvProcessTimerOrBlockTask+0x90>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d101      	bne.n	8007c74 <prvProcessTimerOrBlockTask+0x50>
 8007c70:	2301      	movs	r3, #1
 8007c72:	e000      	b.n	8007c76 <prvProcessTimerOrBlockTask+0x52>
 8007c74:	2300      	movs	r3, #0
 8007c76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c78:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb8 <prvProcessTimerOrBlockTask+0x94>)
 8007c7a:	6818      	ldr	r0, [r3, #0]
 8007c7c:	687a      	ldr	r2, [r7, #4]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	683a      	ldr	r2, [r7, #0]
 8007c84:	4619      	mov	r1, r3
 8007c86:	f7fe ff65 	bl	8006b54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c8a:	f7ff fa09 	bl	80070a0 <xTaskResumeAll>
 8007c8e:	4603      	mov	r3, r0
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d10a      	bne.n	8007caa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007c94:	4b09      	ldr	r3, [pc, #36]	@ (8007cbc <prvProcessTimerOrBlockTask+0x98>)
 8007c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	f3bf 8f4f 	dsb	sy
 8007ca0:	f3bf 8f6f 	isb	sy
}
 8007ca4:	e001      	b.n	8007caa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007ca6:	f7ff f9fb 	bl	80070a0 <xTaskResumeAll>
}
 8007caa:	bf00      	nop
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	20001074 	.word	0x20001074
 8007cb8:	20001078 	.word	0x20001078
 8007cbc:	e000ed04 	.word	0xe000ed04

08007cc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d04 <prvGetNextExpireTime+0x44>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <prvGetNextExpireTime+0x16>
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	e000      	b.n	8007cd8 <prvGetNextExpireTime+0x18>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d105      	bne.n	8007cf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ce4:	4b07      	ldr	r3, [pc, #28]	@ (8007d04 <prvGetNextExpireTime+0x44>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	e001      	b.n	8007cf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3714      	adds	r7, #20
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr
 8007d02:	bf00      	nop
 8007d04:	20001070 	.word	0x20001070

08007d08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b084      	sub	sp, #16
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d10:	f7ff fa64 	bl	80071dc <xTaskGetTickCount>
 8007d14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d16:	4b0b      	ldr	r3, [pc, #44]	@ (8007d44 <prvSampleTimeNow+0x3c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d205      	bcs.n	8007d2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d20:	f000 f93a 	bl	8007f98 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	601a      	str	r2, [r3, #0]
 8007d2a:	e002      	b.n	8007d32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d32:	4a04      	ldr	r2, [pc, #16]	@ (8007d44 <prvSampleTimeNow+0x3c>)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d38:	68fb      	ldr	r3, [r7, #12]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	20001080 	.word	0x20001080

08007d48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d56:	2300      	movs	r3, #0
 8007d58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	68fa      	ldr	r2, [r7, #12]
 8007d64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d66:	68ba      	ldr	r2, [r7, #8]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d812      	bhi.n	8007d94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	1ad2      	subs	r2, r2, r3
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d302      	bcc.n	8007d82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	617b      	str	r3, [r7, #20]
 8007d80:	e01b      	b.n	8007dba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d82:	4b10      	ldr	r3, [pc, #64]	@ (8007dc4 <prvInsertTimerInActiveList+0x7c>)
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	4610      	mov	r0, r2
 8007d8e:	f7fe f9b8 	bl	8006102 <vListInsert>
 8007d92:	e012      	b.n	8007dba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d206      	bcs.n	8007daa <prvInsertTimerInActiveList+0x62>
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	429a      	cmp	r2, r3
 8007da2:	d302      	bcc.n	8007daa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007da4:	2301      	movs	r3, #1
 8007da6:	617b      	str	r3, [r7, #20]
 8007da8:	e007      	b.n	8007dba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007daa:	4b07      	ldr	r3, [pc, #28]	@ (8007dc8 <prvInsertTimerInActiveList+0x80>)
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	3304      	adds	r3, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	4610      	mov	r0, r2
 8007db6:	f7fe f9a4 	bl	8006102 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007dba:	697b      	ldr	r3, [r7, #20]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	20001074 	.word	0x20001074
 8007dc8:	20001070 	.word	0x20001070

08007dcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b08e      	sub	sp, #56	@ 0x38
 8007dd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dd2:	e0ce      	b.n	8007f72 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	da19      	bge.n	8007e0e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dda:	1d3b      	adds	r3, r7, #4
 8007ddc:	3304      	adds	r3, #4
 8007dde:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10b      	bne.n	8007dfe <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	61fb      	str	r3, [r7, #28]
}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop
 8007dfc:	e7fd      	b.n	8007dfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e04:	6850      	ldr	r0, [r2, #4]
 8007e06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e08:	6892      	ldr	r2, [r2, #8]
 8007e0a:	4611      	mov	r1, r2
 8007e0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f2c0 80ae 	blt.w	8007f72 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d004      	beq.n	8007e2c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e24:	3304      	adds	r3, #4
 8007e26:	4618      	mov	r0, r3
 8007e28:	f7fe f9a4 	bl	8006174 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e2c:	463b      	mov	r3, r7
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff ff6a 	bl	8007d08 <prvSampleTimeNow>
 8007e34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b09      	cmp	r3, #9
 8007e3a:	f200 8097 	bhi.w	8007f6c <prvProcessReceivedCommands+0x1a0>
 8007e3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e44 <prvProcessReceivedCommands+0x78>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e6d 	.word	0x08007e6d
 8007e48:	08007e6d 	.word	0x08007e6d
 8007e4c:	08007e6d 	.word	0x08007e6d
 8007e50:	08007ee3 	.word	0x08007ee3
 8007e54:	08007ef7 	.word	0x08007ef7
 8007e58:	08007f43 	.word	0x08007f43
 8007e5c:	08007e6d 	.word	0x08007e6d
 8007e60:	08007e6d 	.word	0x08007e6d
 8007e64:	08007ee3 	.word	0x08007ee3
 8007e68:	08007ef7 	.word	0x08007ef7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e72:	f043 0301 	orr.w	r3, r3, #1
 8007e76:	b2da      	uxtb	r2, r3
 8007e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	18d1      	adds	r1, r2, r3
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e8c:	f7ff ff5c 	bl	8007d48 <prvInsertTimerInActiveList>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d06c      	beq.n	8007f70 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ea4:	f003 0304 	and.w	r3, r3, #4
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d061      	beq.n	8007f70 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb0:	699b      	ldr	r3, [r3, #24]
 8007eb2:	441a      	add	r2, r3
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	2100      	movs	r1, #0
 8007ebc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ebe:	f7ff fe01 	bl	8007ac4 <xTimerGenericCommand>
 8007ec2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ec4:	6a3b      	ldr	r3, [r7, #32]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d152      	bne.n	8007f70 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	61bb      	str	r3, [r7, #24]
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ee8:	f023 0301 	bic.w	r3, r3, #1
 8007eec:	b2da      	uxtb	r2, r3
 8007eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007ef4:	e03d      	b.n	8007f72 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007efc:	f043 0301 	orr.w	r3, r3, #1
 8007f00:	b2da      	uxtb	r2, r3
 8007f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f04:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f08:	68ba      	ldr	r2, [r7, #8]
 8007f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f10:	699b      	ldr	r3, [r3, #24]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10b      	bne.n	8007f2e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f1a:	f383 8811 	msr	BASEPRI, r3
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f3bf 8f4f 	dsb	sy
 8007f26:	617b      	str	r3, [r7, #20]
}
 8007f28:	bf00      	nop
 8007f2a:	bf00      	nop
 8007f2c:	e7fd      	b.n	8007f2a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f30:	699a      	ldr	r2, [r3, #24]
 8007f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f34:	18d1      	adds	r1, r2, r3
 8007f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f3c:	f7ff ff04 	bl	8007d48 <prvInsertTimerInActiveList>
					break;
 8007f40:	e017      	b.n	8007f72 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d103      	bne.n	8007f58 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007f50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f52:	f000 fbe9 	bl	8008728 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f56:	e00c      	b.n	8007f72 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f5e:	f023 0301 	bic.w	r3, r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007f6a:	e002      	b.n	8007f72 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007f6c:	bf00      	nop
 8007f6e:	e000      	b.n	8007f72 <prvProcessReceivedCommands+0x1a6>
					break;
 8007f70:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f72:	4b08      	ldr	r3, [pc, #32]	@ (8007f94 <prvProcessReceivedCommands+0x1c8>)
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	1d39      	adds	r1, r7, #4
 8007f78:	2200      	movs	r2, #0
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fbce 	bl	800671c <xQueueReceive>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	f47f af26 	bne.w	8007dd4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f88:	bf00      	nop
 8007f8a:	bf00      	nop
 8007f8c:	3730      	adds	r7, #48	@ 0x30
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20001078 	.word	0x20001078

08007f98 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f9e:	e049      	b.n	8008034 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800805c <prvSwitchTimerLists+0xc4>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	68db      	ldr	r3, [r3, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007faa:	4b2c      	ldr	r3, [pc, #176]	@ (800805c <prvSwitchTimerLists+0xc4>)
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	3304      	adds	r3, #4
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f7fe f8db 	bl	8006174 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
 8007fc2:	68f8      	ldr	r0, [r7, #12]
 8007fc4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d02f      	beq.n	8008034 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	693a      	ldr	r2, [r7, #16]
 8007fda:	4413      	add	r3, r2
 8007fdc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fde:	68ba      	ldr	r2, [r7, #8]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d90e      	bls.n	8008004 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800805c <prvSwitchTimerLists+0xc4>)
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3304      	adds	r3, #4
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f7fe f880 	bl	8006102 <vListInsert>
 8008002:	e017      	b.n	8008034 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008004:	2300      	movs	r3, #0
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	2300      	movs	r3, #0
 800800a:	693a      	ldr	r2, [r7, #16]
 800800c:	2100      	movs	r1, #0
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7ff fd58 	bl	8007ac4 <xTimerGenericCommand>
 8008014:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d10b      	bne.n	8008034 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800801c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008020:	f383 8811 	msr	BASEPRI, r3
 8008024:	f3bf 8f6f 	isb	sy
 8008028:	f3bf 8f4f 	dsb	sy
 800802c:	603b      	str	r3, [r7, #0]
}
 800802e:	bf00      	nop
 8008030:	bf00      	nop
 8008032:	e7fd      	b.n	8008030 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008034:	4b09      	ldr	r3, [pc, #36]	@ (800805c <prvSwitchTimerLists+0xc4>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1b0      	bne.n	8007fa0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800803e:	4b07      	ldr	r3, [pc, #28]	@ (800805c <prvSwitchTimerLists+0xc4>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008044:	4b06      	ldr	r3, [pc, #24]	@ (8008060 <prvSwitchTimerLists+0xc8>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a04      	ldr	r2, [pc, #16]	@ (800805c <prvSwitchTimerLists+0xc4>)
 800804a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800804c:	4a04      	ldr	r2, [pc, #16]	@ (8008060 <prvSwitchTimerLists+0xc8>)
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	6013      	str	r3, [r2, #0]
}
 8008052:	bf00      	nop
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20001070 	.word	0x20001070
 8008060:	20001074 	.word	0x20001074

08008064 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b082      	sub	sp, #8
 8008068:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800806a:	f000 f96d 	bl	8008348 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800806e:	4b15      	ldr	r3, [pc, #84]	@ (80080c4 <prvCheckForValidListAndQueue+0x60>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d120      	bne.n	80080b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008076:	4814      	ldr	r0, [pc, #80]	@ (80080c8 <prvCheckForValidListAndQueue+0x64>)
 8008078:	f7fd fff2 	bl	8006060 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800807c:	4813      	ldr	r0, [pc, #76]	@ (80080cc <prvCheckForValidListAndQueue+0x68>)
 800807e:	f7fd ffef 	bl	8006060 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008082:	4b13      	ldr	r3, [pc, #76]	@ (80080d0 <prvCheckForValidListAndQueue+0x6c>)
 8008084:	4a10      	ldr	r2, [pc, #64]	@ (80080c8 <prvCheckForValidListAndQueue+0x64>)
 8008086:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008088:	4b12      	ldr	r3, [pc, #72]	@ (80080d4 <prvCheckForValidListAndQueue+0x70>)
 800808a:	4a10      	ldr	r2, [pc, #64]	@ (80080cc <prvCheckForValidListAndQueue+0x68>)
 800808c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800808e:	2300      	movs	r3, #0
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	4b11      	ldr	r3, [pc, #68]	@ (80080d8 <prvCheckForValidListAndQueue+0x74>)
 8008094:	4a11      	ldr	r2, [pc, #68]	@ (80080dc <prvCheckForValidListAndQueue+0x78>)
 8008096:	2110      	movs	r1, #16
 8008098:	200a      	movs	r0, #10
 800809a:	f7fe f8ff 	bl	800629c <xQueueGenericCreateStatic>
 800809e:	4603      	mov	r3, r0
 80080a0:	4a08      	ldr	r2, [pc, #32]	@ (80080c4 <prvCheckForValidListAndQueue+0x60>)
 80080a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080a4:	4b07      	ldr	r3, [pc, #28]	@ (80080c4 <prvCheckForValidListAndQueue+0x60>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d005      	beq.n	80080b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080ac:	4b05      	ldr	r3, [pc, #20]	@ (80080c4 <prvCheckForValidListAndQueue+0x60>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	490b      	ldr	r1, [pc, #44]	@ (80080e0 <prvCheckForValidListAndQueue+0x7c>)
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7fe fd24 	bl	8006b00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080b8:	f000 f978 	bl	80083ac <vPortExitCritical>
}
 80080bc:	bf00      	nop
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	20001078 	.word	0x20001078
 80080c8:	20001048 	.word	0x20001048
 80080cc:	2000105c 	.word	0x2000105c
 80080d0:	20001070 	.word	0x20001070
 80080d4:	20001074 	.word	0x20001074
 80080d8:	20001124 	.word	0x20001124
 80080dc:	20001084 	.word	0x20001084
 80080e0:	08008b9c 	.word	0x08008b9c

080080e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	3b04      	subs	r3, #4
 80080f4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80080fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	3b04      	subs	r3, #4
 8008102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	f023 0201 	bic.w	r2, r3, #1
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3b04      	subs	r3, #4
 8008112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008114:	4a0c      	ldr	r2, [pc, #48]	@ (8008148 <pxPortInitialiseStack+0x64>)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	3b14      	subs	r3, #20
 800811e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	3b04      	subs	r3, #4
 800812a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f06f 0202 	mvn.w	r2, #2
 8008132:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3b20      	subs	r3, #32
 8008138:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800813a:	68fb      	ldr	r3, [r7, #12]
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	0800814d 	.word	0x0800814d

0800814c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008152:	2300      	movs	r3, #0
 8008154:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008156:	4b13      	ldr	r3, [pc, #76]	@ (80081a4 <prvTaskExitError+0x58>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800815e:	d00b      	beq.n	8008178 <prvTaskExitError+0x2c>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	60fb      	str	r3, [r7, #12]
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	e7fd      	b.n	8008174 <prvTaskExitError+0x28>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	60bb      	str	r3, [r7, #8]
}
 800818a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800818c:	bf00      	nop
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d0fc      	beq.n	800818e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008194:	bf00      	nop
 8008196:	bf00      	nop
 8008198:	3714      	adds	r7, #20
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	2000009c 	.word	0x2000009c
	...

080081b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081b0:	4b07      	ldr	r3, [pc, #28]	@ (80081d0 <pxCurrentTCBConst2>)
 80081b2:	6819      	ldr	r1, [r3, #0]
 80081b4:	6808      	ldr	r0, [r1, #0]
 80081b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ba:	f380 8809 	msr	PSP, r0
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f04f 0000 	mov.w	r0, #0
 80081c6:	f380 8811 	msr	BASEPRI, r0
 80081ca:	4770      	bx	lr
 80081cc:	f3af 8000 	nop.w

080081d0 <pxCurrentTCBConst2>:
 80081d0:	20000b48 	.word	0x20000b48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop

080081d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081d8:	4808      	ldr	r0, [pc, #32]	@ (80081fc <prvPortStartFirstTask+0x24>)
 80081da:	6800      	ldr	r0, [r0, #0]
 80081dc:	6800      	ldr	r0, [r0, #0]
 80081de:	f380 8808 	msr	MSP, r0
 80081e2:	f04f 0000 	mov.w	r0, #0
 80081e6:	f380 8814 	msr	CONTROL, r0
 80081ea:	b662      	cpsie	i
 80081ec:	b661      	cpsie	f
 80081ee:	f3bf 8f4f 	dsb	sy
 80081f2:	f3bf 8f6f 	isb	sy
 80081f6:	df00      	svc	0
 80081f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80081fa:	bf00      	nop
 80081fc:	e000ed08 	.word	0xe000ed08

08008200 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b086      	sub	sp, #24
 8008204:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008206:	4b47      	ldr	r3, [pc, #284]	@ (8008324 <xPortStartScheduler+0x124>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a47      	ldr	r2, [pc, #284]	@ (8008328 <xPortStartScheduler+0x128>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10b      	bne.n	8008228 <xPortStartScheduler+0x28>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	f383 8811 	msr	BASEPRI, r3
 8008218:	f3bf 8f6f 	isb	sy
 800821c:	f3bf 8f4f 	dsb	sy
 8008220:	613b      	str	r3, [r7, #16]
}
 8008222:	bf00      	nop
 8008224:	bf00      	nop
 8008226:	e7fd      	b.n	8008224 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008228:	4b3e      	ldr	r3, [pc, #248]	@ (8008324 <xPortStartScheduler+0x124>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a3f      	ldr	r2, [pc, #252]	@ (800832c <xPortStartScheduler+0x12c>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d10b      	bne.n	800824a <xPortStartScheduler+0x4a>
	__asm volatile
 8008232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008236:	f383 8811 	msr	BASEPRI, r3
 800823a:	f3bf 8f6f 	isb	sy
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	60fb      	str	r3, [r7, #12]
}
 8008244:	bf00      	nop
 8008246:	bf00      	nop
 8008248:	e7fd      	b.n	8008246 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800824a:	4b39      	ldr	r3, [pc, #228]	@ (8008330 <xPortStartScheduler+0x130>)
 800824c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	b2db      	uxtb	r3, r3
 8008254:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	22ff      	movs	r2, #255	@ 0xff
 800825a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	b2db      	uxtb	r3, r3
 8008262:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008264:	78fb      	ldrb	r3, [r7, #3]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800826c:	b2da      	uxtb	r2, r3
 800826e:	4b31      	ldr	r3, [pc, #196]	@ (8008334 <xPortStartScheduler+0x134>)
 8008270:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008272:	4b31      	ldr	r3, [pc, #196]	@ (8008338 <xPortStartScheduler+0x138>)
 8008274:	2207      	movs	r2, #7
 8008276:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008278:	e009      	b.n	800828e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800827a:	4b2f      	ldr	r3, [pc, #188]	@ (8008338 <xPortStartScheduler+0x138>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3b01      	subs	r3, #1
 8008280:	4a2d      	ldr	r2, [pc, #180]	@ (8008338 <xPortStartScheduler+0x138>)
 8008282:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008284:	78fb      	ldrb	r3, [r7, #3]
 8008286:	b2db      	uxtb	r3, r3
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	b2db      	uxtb	r3, r3
 800828c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	b2db      	uxtb	r3, r3
 8008292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008296:	2b80      	cmp	r3, #128	@ 0x80
 8008298:	d0ef      	beq.n	800827a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800829a:	4b27      	ldr	r3, [pc, #156]	@ (8008338 <xPortStartScheduler+0x138>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f1c3 0307 	rsb	r3, r3, #7
 80082a2:	2b04      	cmp	r3, #4
 80082a4:	d00b      	beq.n	80082be <xPortStartScheduler+0xbe>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082aa:	f383 8811 	msr	BASEPRI, r3
 80082ae:	f3bf 8f6f 	isb	sy
 80082b2:	f3bf 8f4f 	dsb	sy
 80082b6:	60bb      	str	r3, [r7, #8]
}
 80082b8:	bf00      	nop
 80082ba:	bf00      	nop
 80082bc:	e7fd      	b.n	80082ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082be:	4b1e      	ldr	r3, [pc, #120]	@ (8008338 <xPortStartScheduler+0x138>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	021b      	lsls	r3, r3, #8
 80082c4:	4a1c      	ldr	r2, [pc, #112]	@ (8008338 <xPortStartScheduler+0x138>)
 80082c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008338 <xPortStartScheduler+0x138>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082d0:	4a19      	ldr	r2, [pc, #100]	@ (8008338 <xPortStartScheduler+0x138>)
 80082d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	b2da      	uxtb	r2, r3
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082dc:	4b17      	ldr	r3, [pc, #92]	@ (800833c <xPortStartScheduler+0x13c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a16      	ldr	r2, [pc, #88]	@ (800833c <xPortStartScheduler+0x13c>)
 80082e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80082e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082e8:	4b14      	ldr	r3, [pc, #80]	@ (800833c <xPortStartScheduler+0x13c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a13      	ldr	r2, [pc, #76]	@ (800833c <xPortStartScheduler+0x13c>)
 80082ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80082f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80082f4:	f000 f8da 	bl	80084ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80082f8:	4b11      	ldr	r3, [pc, #68]	@ (8008340 <xPortStartScheduler+0x140>)
 80082fa:	2200      	movs	r2, #0
 80082fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80082fe:	f000 f8f9 	bl	80084f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008302:	4b10      	ldr	r3, [pc, #64]	@ (8008344 <xPortStartScheduler+0x144>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a0f      	ldr	r2, [pc, #60]	@ (8008344 <xPortStartScheduler+0x144>)
 8008308:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800830c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800830e:	f7ff ff63 	bl	80081d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008312:	f7ff f82d 	bl	8007370 <vTaskSwitchContext>
	prvTaskExitError();
 8008316:	f7ff ff19 	bl	800814c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800831a:	2300      	movs	r3, #0
}
 800831c:	4618      	mov	r0, r3
 800831e:	3718      	adds	r7, #24
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	e000ed00 	.word	0xe000ed00
 8008328:	410fc271 	.word	0x410fc271
 800832c:	410fc270 	.word	0x410fc270
 8008330:	e000e400 	.word	0xe000e400
 8008334:	20001174 	.word	0x20001174
 8008338:	20001178 	.word	0x20001178
 800833c:	e000ed20 	.word	0xe000ed20
 8008340:	2000009c 	.word	0x2000009c
 8008344:	e000ef34 	.word	0xe000ef34

08008348 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
	__asm volatile
 800834e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	607b      	str	r3, [r7, #4]
}
 8008360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008362:	4b10      	ldr	r3, [pc, #64]	@ (80083a4 <vPortEnterCritical+0x5c>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3301      	adds	r3, #1
 8008368:	4a0e      	ldr	r2, [pc, #56]	@ (80083a4 <vPortEnterCritical+0x5c>)
 800836a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800836c:	4b0d      	ldr	r3, [pc, #52]	@ (80083a4 <vPortEnterCritical+0x5c>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d110      	bne.n	8008396 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008374:	4b0c      	ldr	r3, [pc, #48]	@ (80083a8 <vPortEnterCritical+0x60>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00b      	beq.n	8008396 <vPortEnterCritical+0x4e>
	__asm volatile
 800837e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	603b      	str	r3, [r7, #0]
}
 8008390:	bf00      	nop
 8008392:	bf00      	nop
 8008394:	e7fd      	b.n	8008392 <vPortEnterCritical+0x4a>
	}
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	2000009c 	.word	0x2000009c
 80083a8:	e000ed04 	.word	0xe000ed04

080083ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083b2:	4b12      	ldr	r3, [pc, #72]	@ (80083fc <vPortExitCritical+0x50>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10b      	bne.n	80083d2 <vPortExitCritical+0x26>
	__asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	607b      	str	r3, [r7, #4]
}
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	e7fd      	b.n	80083ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083d2:	4b0a      	ldr	r3, [pc, #40]	@ (80083fc <vPortExitCritical+0x50>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	4a08      	ldr	r2, [pc, #32]	@ (80083fc <vPortExitCritical+0x50>)
 80083da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083dc:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <vPortExitCritical+0x50>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d105      	bne.n	80083f0 <vPortExitCritical+0x44>
 80083e4:	2300      	movs	r3, #0
 80083e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	f383 8811 	msr	BASEPRI, r3
}
 80083ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	2000009c 	.word	0x2000009c

08008400 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008400:	f3ef 8009 	mrs	r0, PSP
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	4b15      	ldr	r3, [pc, #84]	@ (8008460 <pxCurrentTCBConst>)
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	f01e 0f10 	tst.w	lr, #16
 8008410:	bf08      	it	eq
 8008412:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008416:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841a:	6010      	str	r0, [r2, #0]
 800841c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008420:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008424:	f380 8811 	msr	BASEPRI, r0
 8008428:	f3bf 8f4f 	dsb	sy
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f7fe ff9e 	bl	8007370 <vTaskSwitchContext>
 8008434:	f04f 0000 	mov.w	r0, #0
 8008438:	f380 8811 	msr	BASEPRI, r0
 800843c:	bc09      	pop	{r0, r3}
 800843e:	6819      	ldr	r1, [r3, #0]
 8008440:	6808      	ldr	r0, [r1, #0]
 8008442:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008446:	f01e 0f10 	tst.w	lr, #16
 800844a:	bf08      	it	eq
 800844c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008450:	f380 8809 	msr	PSP, r0
 8008454:	f3bf 8f6f 	isb	sy
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	f3af 8000 	nop.w

08008460 <pxCurrentTCBConst>:
 8008460:	20000b48 	.word	0x20000b48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop

08008468 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
	__asm volatile
 800846e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	607b      	str	r3, [r7, #4]
}
 8008480:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008482:	f7fe febb 	bl	80071fc <xTaskIncrementTick>
 8008486:	4603      	mov	r3, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	d003      	beq.n	8008494 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800848c:	4b06      	ldr	r3, [pc, #24]	@ (80084a8 <xPortSysTickHandler+0x40>)
 800848e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	2300      	movs	r3, #0
 8008496:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f383 8811 	msr	BASEPRI, r3
}
 800849e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084a0:	bf00      	nop
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	e000ed04 	.word	0xe000ed04

080084ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084b0:	4b0b      	ldr	r3, [pc, #44]	@ (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084b2:	2200      	movs	r2, #0
 80084b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084b6:	4b0b      	ldr	r3, [pc, #44]	@ (80084e4 <vPortSetupTimerInterrupt+0x38>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084bc:	4b0a      	ldr	r3, [pc, #40]	@ (80084e8 <vPortSetupTimerInterrupt+0x3c>)
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4a0a      	ldr	r2, [pc, #40]	@ (80084ec <vPortSetupTimerInterrupt+0x40>)
 80084c2:	fba2 2303 	umull	r2, r3, r2, r3
 80084c6:	099b      	lsrs	r3, r3, #6
 80084c8:	4a09      	ldr	r2, [pc, #36]	@ (80084f0 <vPortSetupTimerInterrupt+0x44>)
 80084ca:	3b01      	subs	r3, #1
 80084cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084ce:	4b04      	ldr	r3, [pc, #16]	@ (80084e0 <vPortSetupTimerInterrupt+0x34>)
 80084d0:	2207      	movs	r2, #7
 80084d2:	601a      	str	r2, [r3, #0]
}
 80084d4:	bf00      	nop
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
 80084de:	bf00      	nop
 80084e0:	e000e010 	.word	0xe000e010
 80084e4:	e000e018 	.word	0xe000e018
 80084e8:	20000090 	.word	0x20000090
 80084ec:	10624dd3 	.word	0x10624dd3
 80084f0:	e000e014 	.word	0xe000e014

080084f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80084f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008504 <vPortEnableVFP+0x10>
 80084f8:	6801      	ldr	r1, [r0, #0]
 80084fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80084fe:	6001      	str	r1, [r0, #0]
 8008500:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008502:	bf00      	nop
 8008504:	e000ed88 	.word	0xe000ed88

08008508 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800850e:	f3ef 8305 	mrs	r3, IPSR
 8008512:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b0f      	cmp	r3, #15
 8008518:	d915      	bls.n	8008546 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800851a:	4a18      	ldr	r2, [pc, #96]	@ (800857c <vPortValidateInterruptPriority+0x74>)
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4413      	add	r3, r2
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008524:	4b16      	ldr	r3, [pc, #88]	@ (8008580 <vPortValidateInterruptPriority+0x78>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	7afa      	ldrb	r2, [r7, #11]
 800852a:	429a      	cmp	r2, r3
 800852c:	d20b      	bcs.n	8008546 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	607b      	str	r3, [r7, #4]
}
 8008540:	bf00      	nop
 8008542:	bf00      	nop
 8008544:	e7fd      	b.n	8008542 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008546:	4b0f      	ldr	r3, [pc, #60]	@ (8008584 <vPortValidateInterruptPriority+0x7c>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800854e:	4b0e      	ldr	r3, [pc, #56]	@ (8008588 <vPortValidateInterruptPriority+0x80>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	429a      	cmp	r2, r3
 8008554:	d90b      	bls.n	800856e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	603b      	str	r3, [r7, #0]
}
 8008568:	bf00      	nop
 800856a:	bf00      	nop
 800856c:	e7fd      	b.n	800856a <vPortValidateInterruptPriority+0x62>
	}
 800856e:	bf00      	nop
 8008570:	3714      	adds	r7, #20
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	e000e3f0 	.word	0xe000e3f0
 8008580:	20001174 	.word	0x20001174
 8008584:	e000ed0c 	.word	0xe000ed0c
 8008588:	20001178 	.word	0x20001178

0800858c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b08a      	sub	sp, #40	@ 0x28
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008594:	2300      	movs	r3, #0
 8008596:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008598:	f7fe fd74 	bl	8007084 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800859c:	4b5c      	ldr	r3, [pc, #368]	@ (8008710 <pvPortMalloc+0x184>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085a4:	f000 f924 	bl	80087f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085a8:	4b5a      	ldr	r3, [pc, #360]	@ (8008714 <pvPortMalloc+0x188>)
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	4013      	ands	r3, r2
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	f040 8095 	bne.w	80086e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d01e      	beq.n	80085fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80085bc:	2208      	movs	r2, #8
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	4413      	add	r3, r2
 80085c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d015      	beq.n	80085fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f023 0307 	bic.w	r3, r3, #7
 80085d4:	3308      	adds	r3, #8
 80085d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f003 0307 	and.w	r3, r3, #7
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d00b      	beq.n	80085fa <pvPortMalloc+0x6e>
	__asm volatile
 80085e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e6:	f383 8811 	msr	BASEPRI, r3
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	f3bf 8f4f 	dsb	sy
 80085f2:	617b      	str	r3, [r7, #20]
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop
 80085f8:	e7fd      	b.n	80085f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d06f      	beq.n	80086e0 <pvPortMalloc+0x154>
 8008600:	4b45      	ldr	r3, [pc, #276]	@ (8008718 <pvPortMalloc+0x18c>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	429a      	cmp	r2, r3
 8008608:	d86a      	bhi.n	80086e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800860a:	4b44      	ldr	r3, [pc, #272]	@ (800871c <pvPortMalloc+0x190>)
 800860c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800860e:	4b43      	ldr	r3, [pc, #268]	@ (800871c <pvPortMalloc+0x190>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008614:	e004      	b.n	8008620 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008618:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800861a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	429a      	cmp	r2, r3
 8008628:	d903      	bls.n	8008632 <pvPortMalloc+0xa6>
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d1f1      	bne.n	8008616 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008632:	4b37      	ldr	r3, [pc, #220]	@ (8008710 <pvPortMalloc+0x184>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008638:	429a      	cmp	r2, r3
 800863a:	d051      	beq.n	80086e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2208      	movs	r2, #8
 8008642:	4413      	add	r3, r2
 8008644:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008648:	681a      	ldr	r2, [r3, #0]
 800864a:	6a3b      	ldr	r3, [r7, #32]
 800864c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	685a      	ldr	r2, [r3, #4]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	1ad2      	subs	r2, r2, r3
 8008656:	2308      	movs	r3, #8
 8008658:	005b      	lsls	r3, r3, #1
 800865a:	429a      	cmp	r2, r3
 800865c:	d920      	bls.n	80086a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800865e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4413      	add	r3, r2
 8008664:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	f003 0307 	and.w	r3, r3, #7
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00b      	beq.n	8008688 <pvPortMalloc+0xfc>
	__asm volatile
 8008670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008674:	f383 8811 	msr	BASEPRI, r3
 8008678:	f3bf 8f6f 	isb	sy
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	613b      	str	r3, [r7, #16]
}
 8008682:	bf00      	nop
 8008684:	bf00      	nop
 8008686:	e7fd      	b.n	8008684 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	69bb      	ldr	r3, [r7, #24]
 8008692:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008696:	687a      	ldr	r2, [r7, #4]
 8008698:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800869a:	69b8      	ldr	r0, [r7, #24]
 800869c:	f000 f90a 	bl	80088b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086a0:	4b1d      	ldr	r3, [pc, #116]	@ (8008718 <pvPortMalloc+0x18c>)
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	4a1b      	ldr	r2, [pc, #108]	@ (8008718 <pvPortMalloc+0x18c>)
 80086ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008718 <pvPortMalloc+0x18c>)
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008720 <pvPortMalloc+0x194>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d203      	bcs.n	80086c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086ba:	4b17      	ldr	r3, [pc, #92]	@ (8008718 <pvPortMalloc+0x18c>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4a18      	ldr	r2, [pc, #96]	@ (8008720 <pvPortMalloc+0x194>)
 80086c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	4b13      	ldr	r3, [pc, #76]	@ (8008714 <pvPortMalloc+0x188>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	431a      	orrs	r2, r3
 80086cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086d6:	4b13      	ldr	r3, [pc, #76]	@ (8008724 <pvPortMalloc+0x198>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	3301      	adds	r3, #1
 80086dc:	4a11      	ldr	r2, [pc, #68]	@ (8008724 <pvPortMalloc+0x198>)
 80086de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086e0:	f7fe fcde 	bl	80070a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086e4:	69fb      	ldr	r3, [r7, #28]
 80086e6:	f003 0307 	and.w	r3, r3, #7
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d00b      	beq.n	8008706 <pvPortMalloc+0x17a>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	f383 8811 	msr	BASEPRI, r3
 80086f6:	f3bf 8f6f 	isb	sy
 80086fa:	f3bf 8f4f 	dsb	sy
 80086fe:	60fb      	str	r3, [r7, #12]
}
 8008700:	bf00      	nop
 8008702:	bf00      	nop
 8008704:	e7fd      	b.n	8008702 <pvPortMalloc+0x176>
	return pvReturn;
 8008706:	69fb      	ldr	r3, [r7, #28]
}
 8008708:	4618      	mov	r0, r3
 800870a:	3728      	adds	r7, #40	@ 0x28
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}
 8008710:	20004d84 	.word	0x20004d84
 8008714:	20004d98 	.word	0x20004d98
 8008718:	20004d88 	.word	0x20004d88
 800871c:	20004d7c 	.word	0x20004d7c
 8008720:	20004d8c 	.word	0x20004d8c
 8008724:	20004d90 	.word	0x20004d90

08008728 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b086      	sub	sp, #24
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d04f      	beq.n	80087da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800873a:	2308      	movs	r3, #8
 800873c:	425b      	negs	r3, r3
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	4413      	add	r3, r2
 8008742:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	685a      	ldr	r2, [r3, #4]
 800874c:	4b25      	ldr	r3, [pc, #148]	@ (80087e4 <vPortFree+0xbc>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4013      	ands	r3, r2
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10b      	bne.n	800876e <vPortFree+0x46>
	__asm volatile
 8008756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800875a:	f383 8811 	msr	BASEPRI, r3
 800875e:	f3bf 8f6f 	isb	sy
 8008762:	f3bf 8f4f 	dsb	sy
 8008766:	60fb      	str	r3, [r7, #12]
}
 8008768:	bf00      	nop
 800876a:	bf00      	nop
 800876c:	e7fd      	b.n	800876a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00b      	beq.n	800878e <vPortFree+0x66>
	__asm volatile
 8008776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800877a:	f383 8811 	msr	BASEPRI, r3
 800877e:	f3bf 8f6f 	isb	sy
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	60bb      	str	r3, [r7, #8]
}
 8008788:	bf00      	nop
 800878a:	bf00      	nop
 800878c:	e7fd      	b.n	800878a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	685a      	ldr	r2, [r3, #4]
 8008792:	4b14      	ldr	r3, [pc, #80]	@ (80087e4 <vPortFree+0xbc>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	4013      	ands	r3, r2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d01e      	beq.n	80087da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d11a      	bne.n	80087da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	4b0e      	ldr	r3, [pc, #56]	@ (80087e4 <vPortFree+0xbc>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	43db      	mvns	r3, r3
 80087ae:	401a      	ands	r2, r3
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087b4:	f7fe fc66 	bl	8007084 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	4b0a      	ldr	r3, [pc, #40]	@ (80087e8 <vPortFree+0xc0>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4413      	add	r3, r2
 80087c2:	4a09      	ldr	r2, [pc, #36]	@ (80087e8 <vPortFree+0xc0>)
 80087c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087c6:	6938      	ldr	r0, [r7, #16]
 80087c8:	f000 f874 	bl	80088b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087cc:	4b07      	ldr	r3, [pc, #28]	@ (80087ec <vPortFree+0xc4>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	3301      	adds	r3, #1
 80087d2:	4a06      	ldr	r2, [pc, #24]	@ (80087ec <vPortFree+0xc4>)
 80087d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087d6:	f7fe fc63 	bl	80070a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087da:	bf00      	nop
 80087dc:	3718      	adds	r7, #24
 80087de:	46bd      	mov	sp, r7
 80087e0:	bd80      	pop	{r7, pc}
 80087e2:	bf00      	nop
 80087e4:	20004d98 	.word	0x20004d98
 80087e8:	20004d88 	.word	0x20004d88
 80087ec:	20004d94 	.word	0x20004d94

080087f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80087fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80087fc:	4b27      	ldr	r3, [pc, #156]	@ (800889c <prvHeapInit+0xac>)
 80087fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 0307 	and.w	r3, r3, #7
 8008806:	2b00      	cmp	r3, #0
 8008808:	d00c      	beq.n	8008824 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3307      	adds	r3, #7
 800880e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f023 0307 	bic.w	r3, r3, #7
 8008816:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008818:	68ba      	ldr	r2, [r7, #8]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	1ad3      	subs	r3, r2, r3
 800881e:	4a1f      	ldr	r2, [pc, #124]	@ (800889c <prvHeapInit+0xac>)
 8008820:	4413      	add	r3, r2
 8008822:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008828:	4a1d      	ldr	r2, [pc, #116]	@ (80088a0 <prvHeapInit+0xb0>)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800882e:	4b1c      	ldr	r3, [pc, #112]	@ (80088a0 <prvHeapInit+0xb0>)
 8008830:	2200      	movs	r2, #0
 8008832:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	68ba      	ldr	r2, [r7, #8]
 8008838:	4413      	add	r3, r2
 800883a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800883c:	2208      	movs	r2, #8
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	1a9b      	subs	r3, r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0307 	bic.w	r3, r3, #7
 800884a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4a15      	ldr	r2, [pc, #84]	@ (80088a4 <prvHeapInit+0xb4>)
 8008850:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008852:	4b14      	ldr	r3, [pc, #80]	@ (80088a4 <prvHeapInit+0xb4>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2200      	movs	r2, #0
 8008858:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800885a:	4b12      	ldr	r3, [pc, #72]	@ (80088a4 <prvHeapInit+0xb4>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	1ad2      	subs	r2, r2, r3
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008870:	4b0c      	ldr	r3, [pc, #48]	@ (80088a4 <prvHeapInit+0xb4>)
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	4a0a      	ldr	r2, [pc, #40]	@ (80088a8 <prvHeapInit+0xb8>)
 800887e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	4a09      	ldr	r2, [pc, #36]	@ (80088ac <prvHeapInit+0xbc>)
 8008886:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008888:	4b09      	ldr	r3, [pc, #36]	@ (80088b0 <prvHeapInit+0xc0>)
 800888a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800888e:	601a      	str	r2, [r3, #0]
}
 8008890:	bf00      	nop
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	2000117c 	.word	0x2000117c
 80088a0:	20004d7c 	.word	0x20004d7c
 80088a4:	20004d84 	.word	0x20004d84
 80088a8:	20004d8c 	.word	0x20004d8c
 80088ac:	20004d88 	.word	0x20004d88
 80088b0:	20004d98 	.word	0x20004d98

080088b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088b4:	b480      	push	{r7}
 80088b6:	b085      	sub	sp, #20
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088bc:	4b28      	ldr	r3, [pc, #160]	@ (8008960 <prvInsertBlockIntoFreeList+0xac>)
 80088be:	60fb      	str	r3, [r7, #12]
 80088c0:	e002      	b.n	80088c8 <prvInsertBlockIntoFreeList+0x14>
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	60fb      	str	r3, [r7, #12]
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d8f7      	bhi.n	80088c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	68ba      	ldr	r2, [r7, #8]
 80088dc:	4413      	add	r3, r2
 80088de:	687a      	ldr	r2, [r7, #4]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d108      	bne.n	80088f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	441a      	add	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	68ba      	ldr	r2, [r7, #8]
 8008900:	441a      	add	r2, r3
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	429a      	cmp	r2, r3
 8008908:	d118      	bne.n	800893c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4b15      	ldr	r3, [pc, #84]	@ (8008964 <prvInsertBlockIntoFreeList+0xb0>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	429a      	cmp	r2, r3
 8008914:	d00d      	beq.n	8008932 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	685a      	ldr	r2, [r3, #4]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	441a      	add	r2, r3
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	601a      	str	r2, [r3, #0]
 8008930:	e008      	b.n	8008944 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008932:	4b0c      	ldr	r3, [pc, #48]	@ (8008964 <prvInsertBlockIntoFreeList+0xb0>)
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	601a      	str	r2, [r3, #0]
 800893a:	e003      	b.n	8008944 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008944:	68fa      	ldr	r2, [r7, #12]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	429a      	cmp	r2, r3
 800894a:	d002      	beq.n	8008952 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008952:	bf00      	nop
 8008954:	3714      	adds	r7, #20
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr
 800895e:	bf00      	nop
 8008960:	20004d7c 	.word	0x20004d7c
 8008964:	20004d84 	.word	0x20004d84

08008968 <memset>:
 8008968:	4402      	add	r2, r0
 800896a:	4603      	mov	r3, r0
 800896c:	4293      	cmp	r3, r2
 800896e:	d100      	bne.n	8008972 <memset+0xa>
 8008970:	4770      	bx	lr
 8008972:	f803 1b01 	strb.w	r1, [r3], #1
 8008976:	e7f9      	b.n	800896c <memset+0x4>

08008978 <_reclaim_reent>:
 8008978:	4b29      	ldr	r3, [pc, #164]	@ (8008a20 <_reclaim_reent+0xa8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4283      	cmp	r3, r0
 800897e:	b570      	push	{r4, r5, r6, lr}
 8008980:	4604      	mov	r4, r0
 8008982:	d04b      	beq.n	8008a1c <_reclaim_reent+0xa4>
 8008984:	69c3      	ldr	r3, [r0, #28]
 8008986:	b1ab      	cbz	r3, 80089b4 <_reclaim_reent+0x3c>
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	b16b      	cbz	r3, 80089a8 <_reclaim_reent+0x30>
 800898c:	2500      	movs	r5, #0
 800898e:	69e3      	ldr	r3, [r4, #28]
 8008990:	68db      	ldr	r3, [r3, #12]
 8008992:	5959      	ldr	r1, [r3, r5]
 8008994:	2900      	cmp	r1, #0
 8008996:	d13b      	bne.n	8008a10 <_reclaim_reent+0x98>
 8008998:	3504      	adds	r5, #4
 800899a:	2d80      	cmp	r5, #128	@ 0x80
 800899c:	d1f7      	bne.n	800898e <_reclaim_reent+0x16>
 800899e:	69e3      	ldr	r3, [r4, #28]
 80089a0:	4620      	mov	r0, r4
 80089a2:	68d9      	ldr	r1, [r3, #12]
 80089a4:	f000 f872 	bl	8008a8c <_free_r>
 80089a8:	69e3      	ldr	r3, [r4, #28]
 80089aa:	6819      	ldr	r1, [r3, #0]
 80089ac:	b111      	cbz	r1, 80089b4 <_reclaim_reent+0x3c>
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 f86c 	bl	8008a8c <_free_r>
 80089b4:	6961      	ldr	r1, [r4, #20]
 80089b6:	b111      	cbz	r1, 80089be <_reclaim_reent+0x46>
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 f867 	bl	8008a8c <_free_r>
 80089be:	69e1      	ldr	r1, [r4, #28]
 80089c0:	b111      	cbz	r1, 80089c8 <_reclaim_reent+0x50>
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 f862 	bl	8008a8c <_free_r>
 80089c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80089ca:	b111      	cbz	r1, 80089d2 <_reclaim_reent+0x5a>
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 f85d 	bl	8008a8c <_free_r>
 80089d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089d4:	b111      	cbz	r1, 80089dc <_reclaim_reent+0x64>
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 f858 	bl	8008a8c <_free_r>
 80089dc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80089de:	b111      	cbz	r1, 80089e6 <_reclaim_reent+0x6e>
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 f853 	bl	8008a8c <_free_r>
 80089e6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80089e8:	b111      	cbz	r1, 80089f0 <_reclaim_reent+0x78>
 80089ea:	4620      	mov	r0, r4
 80089ec:	f000 f84e 	bl	8008a8c <_free_r>
 80089f0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80089f2:	b111      	cbz	r1, 80089fa <_reclaim_reent+0x82>
 80089f4:	4620      	mov	r0, r4
 80089f6:	f000 f849 	bl	8008a8c <_free_r>
 80089fa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80089fc:	b111      	cbz	r1, 8008a04 <_reclaim_reent+0x8c>
 80089fe:	4620      	mov	r0, r4
 8008a00:	f000 f844 	bl	8008a8c <_free_r>
 8008a04:	6a23      	ldr	r3, [r4, #32]
 8008a06:	b14b      	cbz	r3, 8008a1c <_reclaim_reent+0xa4>
 8008a08:	4620      	mov	r0, r4
 8008a0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008a0e:	4718      	bx	r3
 8008a10:	680e      	ldr	r6, [r1, #0]
 8008a12:	4620      	mov	r0, r4
 8008a14:	f000 f83a 	bl	8008a8c <_free_r>
 8008a18:	4631      	mov	r1, r6
 8008a1a:	e7bb      	b.n	8008994 <_reclaim_reent+0x1c>
 8008a1c:	bd70      	pop	{r4, r5, r6, pc}
 8008a1e:	bf00      	nop
 8008a20:	200000a0 	.word	0x200000a0

08008a24 <__libc_init_array>:
 8008a24:	b570      	push	{r4, r5, r6, lr}
 8008a26:	4d0d      	ldr	r5, [pc, #52]	@ (8008a5c <__libc_init_array+0x38>)
 8008a28:	4c0d      	ldr	r4, [pc, #52]	@ (8008a60 <__libc_init_array+0x3c>)
 8008a2a:	1b64      	subs	r4, r4, r5
 8008a2c:	10a4      	asrs	r4, r4, #2
 8008a2e:	2600      	movs	r6, #0
 8008a30:	42a6      	cmp	r6, r4
 8008a32:	d109      	bne.n	8008a48 <__libc_init_array+0x24>
 8008a34:	4d0b      	ldr	r5, [pc, #44]	@ (8008a64 <__libc_init_array+0x40>)
 8008a36:	4c0c      	ldr	r4, [pc, #48]	@ (8008a68 <__libc_init_array+0x44>)
 8008a38:	f000 f87e 	bl	8008b38 <_init>
 8008a3c:	1b64      	subs	r4, r4, r5
 8008a3e:	10a4      	asrs	r4, r4, #2
 8008a40:	2600      	movs	r6, #0
 8008a42:	42a6      	cmp	r6, r4
 8008a44:	d105      	bne.n	8008a52 <__libc_init_array+0x2e>
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
 8008a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a4c:	4798      	blx	r3
 8008a4e:	3601      	adds	r6, #1
 8008a50:	e7ee      	b.n	8008a30 <__libc_init_array+0xc>
 8008a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a56:	4798      	blx	r3
 8008a58:	3601      	adds	r6, #1
 8008a5a:	e7f2      	b.n	8008a42 <__libc_init_array+0x1e>
 8008a5c:	08008c80 	.word	0x08008c80
 8008a60:	08008c80 	.word	0x08008c80
 8008a64:	08008c80 	.word	0x08008c80
 8008a68:	08008c84 	.word	0x08008c84

08008a6c <__retarget_lock_acquire_recursive>:
 8008a6c:	4770      	bx	lr

08008a6e <__retarget_lock_release_recursive>:
 8008a6e:	4770      	bx	lr

08008a70 <memcpy>:
 8008a70:	440a      	add	r2, r1
 8008a72:	4291      	cmp	r1, r2
 8008a74:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a78:	d100      	bne.n	8008a7c <memcpy+0xc>
 8008a7a:	4770      	bx	lr
 8008a7c:	b510      	push	{r4, lr}
 8008a7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a86:	4291      	cmp	r1, r2
 8008a88:	d1f9      	bne.n	8008a7e <memcpy+0xe>
 8008a8a:	bd10      	pop	{r4, pc}

08008a8c <_free_r>:
 8008a8c:	b538      	push	{r3, r4, r5, lr}
 8008a8e:	4605      	mov	r5, r0
 8008a90:	2900      	cmp	r1, #0
 8008a92:	d041      	beq.n	8008b18 <_free_r+0x8c>
 8008a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a98:	1f0c      	subs	r4, r1, #4
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	bfb8      	it	lt
 8008a9e:	18e4      	addlt	r4, r4, r3
 8008aa0:	f000 f83e 	bl	8008b20 <__malloc_lock>
 8008aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8008b1c <_free_r+0x90>)
 8008aa6:	6813      	ldr	r3, [r2, #0]
 8008aa8:	b933      	cbnz	r3, 8008ab8 <_free_r+0x2c>
 8008aaa:	6063      	str	r3, [r4, #4]
 8008aac:	6014      	str	r4, [r2, #0]
 8008aae:	4628      	mov	r0, r5
 8008ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ab4:	f000 b83a 	b.w	8008b2c <__malloc_unlock>
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d908      	bls.n	8008ace <_free_r+0x42>
 8008abc:	6820      	ldr	r0, [r4, #0]
 8008abe:	1821      	adds	r1, r4, r0
 8008ac0:	428b      	cmp	r3, r1
 8008ac2:	bf01      	itttt	eq
 8008ac4:	6819      	ldreq	r1, [r3, #0]
 8008ac6:	685b      	ldreq	r3, [r3, #4]
 8008ac8:	1809      	addeq	r1, r1, r0
 8008aca:	6021      	streq	r1, [r4, #0]
 8008acc:	e7ed      	b.n	8008aaa <_free_r+0x1e>
 8008ace:	461a      	mov	r2, r3
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	b10b      	cbz	r3, 8008ad8 <_free_r+0x4c>
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	d9fa      	bls.n	8008ace <_free_r+0x42>
 8008ad8:	6811      	ldr	r1, [r2, #0]
 8008ada:	1850      	adds	r0, r2, r1
 8008adc:	42a0      	cmp	r0, r4
 8008ade:	d10b      	bne.n	8008af8 <_free_r+0x6c>
 8008ae0:	6820      	ldr	r0, [r4, #0]
 8008ae2:	4401      	add	r1, r0
 8008ae4:	1850      	adds	r0, r2, r1
 8008ae6:	4283      	cmp	r3, r0
 8008ae8:	6011      	str	r1, [r2, #0]
 8008aea:	d1e0      	bne.n	8008aae <_free_r+0x22>
 8008aec:	6818      	ldr	r0, [r3, #0]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	6053      	str	r3, [r2, #4]
 8008af2:	4408      	add	r0, r1
 8008af4:	6010      	str	r0, [r2, #0]
 8008af6:	e7da      	b.n	8008aae <_free_r+0x22>
 8008af8:	d902      	bls.n	8008b00 <_free_r+0x74>
 8008afa:	230c      	movs	r3, #12
 8008afc:	602b      	str	r3, [r5, #0]
 8008afe:	e7d6      	b.n	8008aae <_free_r+0x22>
 8008b00:	6820      	ldr	r0, [r4, #0]
 8008b02:	1821      	adds	r1, r4, r0
 8008b04:	428b      	cmp	r3, r1
 8008b06:	bf04      	itt	eq
 8008b08:	6819      	ldreq	r1, [r3, #0]
 8008b0a:	685b      	ldreq	r3, [r3, #4]
 8008b0c:	6063      	str	r3, [r4, #4]
 8008b0e:	bf04      	itt	eq
 8008b10:	1809      	addeq	r1, r1, r0
 8008b12:	6021      	streq	r1, [r4, #0]
 8008b14:	6054      	str	r4, [r2, #4]
 8008b16:	e7ca      	b.n	8008aae <_free_r+0x22>
 8008b18:	bd38      	pop	{r3, r4, r5, pc}
 8008b1a:	bf00      	nop
 8008b1c:	20004ed8 	.word	0x20004ed8

08008b20 <__malloc_lock>:
 8008b20:	4801      	ldr	r0, [pc, #4]	@ (8008b28 <__malloc_lock+0x8>)
 8008b22:	f7ff bfa3 	b.w	8008a6c <__retarget_lock_acquire_recursive>
 8008b26:	bf00      	nop
 8008b28:	20004ed4 	.word	0x20004ed4

08008b2c <__malloc_unlock>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	@ (8008b34 <__malloc_unlock+0x8>)
 8008b2e:	f7ff bf9e 	b.w	8008a6e <__retarget_lock_release_recursive>
 8008b32:	bf00      	nop
 8008b34:	20004ed4 	.word	0x20004ed4

08008b38 <_init>:
 8008b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3a:	bf00      	nop
 8008b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3e:	bc08      	pop	{r3}
 8008b40:	469e      	mov	lr, r3
 8008b42:	4770      	bx	lr

08008b44 <_fini>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	bf00      	nop
 8008b48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4a:	bc08      	pop	{r3}
 8008b4c:	469e      	mov	lr, r3
 8008b4e:	4770      	bx	lr
